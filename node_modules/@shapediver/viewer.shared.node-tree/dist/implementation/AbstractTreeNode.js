"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractTreeNode_uuidGenerator, _AbstractTreeNode_children, _AbstractTreeNode_data, _AbstractTreeNode_transformations, _AbstractTreeNode_id, _AbstractTreeNode_name, _AbstractTreeNode_version, _AbstractTreeNode_parent, _AbstractTreeNode_boundingBox, _AbstractTreeNode_boundingBoxViewport, _AbstractTreeNode_excludeViewports, _AbstractTreeNode_restrictViewports, _AbstractTreeNode_visible, _AbstractTreeNode_skinNode, _AbstractTreeNode_bones, _AbstractTreeNode_boneInverses, _AbstractTreeNode_originalId;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTreeNode = void 0;
const gl_matrix_1 = require("gl-matrix");
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
class AbstractTreeNode {
    // #endregion Properties (13)
    // #region Constructors (1)
    /**
     * Creation of a node that can be used in the node tree.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformations the array of transformations
     */
    constructor(name = 'node', parent, data = [], transformations = []) {
        var _a;
        // #region Properties (13)
        _AbstractTreeNode_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _AbstractTreeNode_children.set(this, []);
        _AbstractTreeNode_data.set(this, []);
        _AbstractTreeNode_transformations.set(this, []);
        _AbstractTreeNode_id.set(this, void 0);
        _AbstractTreeNode_name.set(this, '');
        _AbstractTreeNode_version.set(this, void 0);
        _AbstractTreeNode_parent.set(this, void 0);
        _AbstractTreeNode_boundingBox.set(this, new viewer_shared_math_1.Box());
        _AbstractTreeNode_boundingBoxViewport.set(this, {});
        _AbstractTreeNode_excludeViewports.set(this, []);
        _AbstractTreeNode_restrictViewports.set(this, []);
        _AbstractTreeNode_visible.set(this, true);
        _AbstractTreeNode_skinNode.set(this, false);
        _AbstractTreeNode_bones.set(this, []);
        _AbstractTreeNode_boneInverses.set(this, []);
        _AbstractTreeNode_originalId.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractTreeNode_name, name.replace(/\./g, "_"), "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_parent, parent, "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_data, data, "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_transformations, transformations, "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_id, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, "f").create(), "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_originalId, __classPrivateFieldGet(this, _AbstractTreeNode_id, "f"), "f");
        __classPrivateFieldSet(this, _AbstractTreeNode_version, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, "f").create(), "f");
        (_a = __classPrivateFieldGet(this, _AbstractTreeNode_parent, "f")) === null || _a === void 0 ? void 0 : _a.addChild(this);
    }
    // #endregion Constructors (1)
    // #region Public Accessors (19)
    get bones() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_bones, "f");
    }
    set bones(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_bones, value, "f");
        this.updateVersion();
    }
    get boneInverses() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_boneInverses, "f");
    }
    set boneInverses(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_boneInverses, value, "f");
        this.updateVersion();
    }
    get boundingBox() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_boundingBox, "f");
    }
    get boundingBoxViewport() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_boundingBoxViewport, "f");
    }
    get children() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_children, "f");
    }
    get originalId() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_originalId, "f");
    }
    set originalId(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_originalId, value, "f");
    }
    get data() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_data, "f");
    }
    get excludeViewports() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_excludeViewports, "f");
    }
    set excludeViewports(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_excludeViewports, value, "f");
        this.updateVersion();
    }
    get id() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_id, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_name, "f");
    }
    set name(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_name, value, "f");
    }
    get nodeMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f"))
            if (transform.id !== 'sdtf')
                gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        return matrix;
    }
    get parent() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_parent, "f");
    }
    set parent(value) {
        // check if it was removed from previous parent
        if (__classPrivateFieldGet(this, _AbstractTreeNode_parent, "f"))
            __classPrivateFieldGet(this, _AbstractTreeNode_parent, "f").removeChild(this);
        // check if it is in children of new parent
        if (value)
            value.addChild(this);
        __classPrivateFieldSet(this, _AbstractTreeNode_parent, value, "f");
    }
    get restrictViewports() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_restrictViewports, "f");
    }
    set restrictViewports(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_restrictViewports, value, "f");
        this.updateVersion();
    }
    get skinNode() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_skinNode, "f");
    }
    set skinNode(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_skinNode, value, "f");
        this.updateVersion();
    }
    get transformations() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f");
    }
    set transformations(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_transformations, value, "f");
    }
    get version() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_version, "f");
    }
    set version(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_version, value, "f");
    }
    get visible() {
        return __classPrivateFieldGet(this, _AbstractTreeNode_visible, "f");
    }
    set visible(value) {
        __classPrivateFieldSet(this, _AbstractTreeNode_visible, value, "f");
        this.updateVersion();
    }
    get worldMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f"))
            gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        let node = this;
        while (node.parent) {
            gl_matrix_1.mat4.multiply(matrix, node.parent.nodeMatrix, matrix);
            node = node.parent;
        }
        return matrix;
    }
    // #endregion Public Accessors (19)
    // #region Public Methods (16)
    addChild(child) {
        if (this.hasChild(child))
            return false;
        __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").push(child);
        if (child.parent)
            child.parent.removeChild(child);
        child.parent = this;
        return true;
    }
    addData(data) {
        __classPrivateFieldGet(this, _AbstractTreeNode_data, "f").push(data);
        return true;
    }
    addTransformation(transformation) {
        __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f").push(transformation);
        return true;
    }
    clone() {
        const clone = new this.constructor;
        clone.name = this.name;
        clone.originalId = this.originalId;
        clone.visible = this.visible;
        for (let child of __classPrivateFieldGet(this, _AbstractTreeNode_children, "f"))
            clone.addChild(child.clone());
        for (let data of __classPrivateFieldGet(this, _AbstractTreeNode_data, "f"))
            clone.data.push(data.clone());
        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f"))
            clone.addTransformation({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix)
            });
        return clone;
    }
    cloneInstance() {
        const clone = new this.constructor;
        clone.name = this.name;
        clone.originalId = this.originalId;
        clone.visible = this.visible;
        for (let child of __classPrivateFieldGet(this, _AbstractTreeNode_children, "f"))
            clone.addChild(child.cloneInstance());
        for (let data of __classPrivateFieldGet(this, _AbstractTreeNode_data, "f"))
            clone.data.push(data);
        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f"))
            clone.addTransformation({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix)
            });
        return clone;
    }
    getChild(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").length; i++)
            if (__classPrivateFieldGet(this, _AbstractTreeNode_children, "f")[i].id === id)
                return __classPrivateFieldGet(this, _AbstractTreeNode_children, "f")[i];
        return;
    }
    getData(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_data, "f").length; i++)
            if (__classPrivateFieldGet(this, _AbstractTreeNode_data, "f")[i].id === id)
                return __classPrivateFieldGet(this, _AbstractTreeNode_data, "f")[i];
        return;
    }
    getPath() {
        let path = this.name;
        let node = this.parent;
        while (node) {
            path = node.name + '.' + path;
            node = node.parent;
        }
        return path;
    }
    getTransformation(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f").length; i++)
            if (__classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f")[i].id === id)
                return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f")[i];
        return;
    }
    hasChild(child) {
        return __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").includes(child);
    }
    hasData(data) {
        return __classPrivateFieldGet(this, _AbstractTreeNode_data, "f").includes(data);
    }
    hasTransformation(transformation) {
        return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f").includes(transformation);
    }
    removeChild(child) {
        const index = __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").indexOf(child);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").splice(index, 1);
        child.parent = undefined;
        return true;
    }
    removeData(data) {
        const index = __classPrivateFieldGet(this, _AbstractTreeNode_data, "f").indexOf(data);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _AbstractTreeNode_data, "f").splice(index, 1);
        return true;
    }
    removeTransformation(transformation) {
        const index = __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f").indexOf(transformation);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _AbstractTreeNode_transformations, "f").splice(index, 1);
        return true;
    }
    traverse(callback) {
        callback(this);
        for (let i = 0; i < this.children.length; i++)
            this.children[i].traverse(callback);
    }
    updateVersion() {
        let node = this;
        while (node.parent) {
            node = node.parent;
            node.version = __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, "f").create();
        }
        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_children, "f").length; i++)
            __classPrivateFieldGet(this, _AbstractTreeNode_children, "f")[i].updateVersion();
        __classPrivateFieldSet(this, _AbstractTreeNode_version, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, "f").create(), "f");
    }
}
exports.AbstractTreeNode = AbstractTreeNode;
_AbstractTreeNode_uuidGenerator = new WeakMap(), _AbstractTreeNode_children = new WeakMap(), _AbstractTreeNode_data = new WeakMap(), _AbstractTreeNode_transformations = new WeakMap(), _AbstractTreeNode_id = new WeakMap(), _AbstractTreeNode_name = new WeakMap(), _AbstractTreeNode_version = new WeakMap(), _AbstractTreeNode_parent = new WeakMap(), _AbstractTreeNode_boundingBox = new WeakMap(), _AbstractTreeNode_boundingBoxViewport = new WeakMap(), _AbstractTreeNode_excludeViewports = new WeakMap(), _AbstractTreeNode_restrictViewports = new WeakMap(), _AbstractTreeNode_visible = new WeakMap(), _AbstractTreeNode_skinNode = new WeakMap(), _AbstractTreeNode_bones = new WeakMap(), _AbstractTreeNode_boneInverses = new WeakMap(), _AbstractTreeNode_originalId = new WeakMap();
//# sourceMappingURL=AbstractTreeNode.js.map