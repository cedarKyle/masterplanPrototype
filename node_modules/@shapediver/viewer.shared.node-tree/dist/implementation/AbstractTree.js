"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractTree_root;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTree = void 0;
class AbstractTree {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(root) {
        // #region Properties (1)
        _AbstractTree_root.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractTree_root, root, "f");
    }
    // #endregion Constructors (1)
    // #region Public Accessors (1)
    get root() {
        return __classPrivateFieldGet(this, _AbstractTree_root, "f");
    }
    // #endregion Public Accessors (1)
    // #region Public Methods (6)
    addNode(node, parent = __classPrivateFieldGet(this, _AbstractTree_root, "f"), root = __classPrivateFieldGet(this, _AbstractTree_root, "f")) {
        if (root === parent) {
            root.addChild(node);
            return true;
        }
        for (let i = 0; i < root.children.length; i++) {
            const child = root.children[i];
            if (child && this.addNode(node, parent, child)) {
                return true;
            }
        }
        return false;
    }
    addNodeAtPath(node, path = this.root.getPath(), root = __classPrivateFieldGet(this, _AbstractTree_root, "f")) {
        if (root.name === path) {
            root.addChild(node);
            return true;
        }
        const pathStart = path.substr(0, path.indexOf('.'));
        if (root.name === pathStart) {
            const shortenedPath = path.substr(pathStart.length + 1, path.length);
            for (let i = 0; i < root.children.length; i++) {
                const child = root.children[i];
                if (child && this.addNodeAtPath(node, shortenedPath, child)) {
                    return true;
                }
            }
        }
        return false;
    }
    getNodeAtPath(path = this.root.getPath(), root = __classPrivateFieldGet(this, _AbstractTree_root, "f")) {
        if (root.name === path)
            return root;
        const pathStart = path.substr(0, path.indexOf('.'));
        if (root.name === pathStart) {
            const shortenedPath = path.substr(pathStart.length + 1, path.length);
            for (let i = 0; i < root.children.length; i++) {
                const child = root.children[i];
                const res = this.getNodeAtPath(shortenedPath, child);
                if (res)
                    return res;
            }
        }
        return null;
    }
    removeNode(node, root = __classPrivateFieldGet(this, _AbstractTree_root, "f")) {
        if (root.hasChild(node)) {
            root.removeChild(node);
            return true;
        }
        for (let i = 0; i < root.children.length; i++) {
            const child = root.children[i];
            if (child && this.removeNode(node, child)) {
                return true;
            }
        }
        return false;
    }
    removeNodeAtPath(path, root = __classPrivateFieldGet(this, _AbstractTree_root, "f")) {
        var _a;
        if (root.name === path) {
            (_a = root.parent) === null || _a === void 0 ? void 0 : _a.removeChild(root);
            return true;
        }
        const pathStart = path.substr(0, path.indexOf('.'));
        if (root.name === pathStart) {
            const shortenedPath = path.substr(pathStart.length + 1, path.length);
            for (let i = 0; i < root.children.length; i++) {
                const child = root.children[i];
                if (child && this.removeNodeAtPath(shortenedPath, child)) {
                    return true;
                }
            }
        }
        return false;
    }
}
exports.AbstractTree = AbstractTree;
_AbstractTree_root = new WeakMap();
//# sourceMappingURL=AbstractTree.js.map