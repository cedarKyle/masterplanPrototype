"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraControlsEventDistribution = void 0;
class CameraControlsEventDistribution {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor(_controls, _cameraLogic) {
        this._controls = _controls;
        this._cameraLogic = _cameraLogic;
        // #region Properties (2)
        this._active = {
            zoom: false,
            pan: false
        };
        this._activeEvents = true;
    }
    // #endregion Constructors (1)
    // #region Public Methods (14)
    activateCameraEvents() {
        this._activeEvents = true;
    }
    deactivateCameraEvents() {
        this._activeEvents = false;
    }
    onDown(event) {
        if (this._controls.camera.active === false)
            return;
        let { x, y } = this.convertInput(event);
        let input = window.TouchEvent && event instanceof TouchEvent ? event.touches.length : event.button;
        let mapping = window.TouchEvent && event instanceof TouchEvent ? this._controls.input.touch : this._controls.input.mouse;
        if (input === mapping.pan && this._controls.enablePan) {
            this._cameraLogic.pan(x, y, this._active.pan, window.TouchEvent && event instanceof TouchEvent);
            this._active.pan = true;
            this._active.zoom = false;
        }
        if (input === mapping.zoom && this._controls.enableZoom) {
            let x1 = x, y1 = y;
            if (window.TouchEvent && event instanceof TouchEvent && this._controls.input.touch.zoom === 2) {
                x1 = (event.touches[0].pageX - event.touches[1].pageX) / window.innerWidth * (window.innerWidth / window.innerHeight);
                y1 = (event.touches[0].pageY - event.touches[1].pageY) / window.innerHeight;
            }
            this._cameraLogic.zoom(x1, y1, this._active.zoom, window.TouchEvent && event instanceof TouchEvent);
            this._active.pan = false;
            this._active.zoom = true;
        }
    }
    onKey(event) {
        if (this._controls.camera.active === false)
            return;
        if (this._controls.enableKeyPan) {
            switch (event.keyCode) {
                case this._controls.input.keys.up:
                    this._cameraLogic.pan(0, 0, false, false);
                    this._cameraLogic.pan(0, this._controls.keyPanSpeed * 0.05, true, false);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                case this._controls.input.keys.down:
                    this._cameraLogic.pan(0, 0, false, false);
                    this._cameraLogic.pan(0, -this._controls.keyPanSpeed * 0.05, true, false);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                case this._controls.input.keys.left:
                    this._cameraLogic.pan(0, 0, false, false);
                    this._cameraLogic.pan(this._controls.keyPanSpeed * 0.05, 0, true, false);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                case this._controls.input.keys.right:
                    this._cameraLogic.pan(0, 0, false, false);
                    this._cameraLogic.pan(-this._controls.keyPanSpeed * 0.05, 0, true, false);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
            }
        }
    }
    onKeyDown(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onKey(event);
    }
    onMouseDown(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onDown(event);
    }
    onMouseMove(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onMove(event);
    }
    onMouseEnd(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onUp(event);
    }
    onMouseUp(event) {
        if (this._controls.camera.active === false)
            return;
    }
    onMouseOut(event) {
        if (this._controls.camera.active === false)
            return;
    }
    onMouseWheel(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onWheel(event);
    }
    onMove(event) {
        if (this._controls.camera.active === false)
            return;
        let { x, y } = this.convertInput(event);
        if (this._controls.enablePan && this._active.pan)
            this._cameraLogic.pan(x, y, this._active.pan, window.TouchEvent && event instanceof TouchEvent);
        if (this._controls.enableZoom && this._active.zoom) {
            let x1 = x, y1 = y;
            if (window.TouchEvent && event instanceof TouchEvent && this._controls.input.touch.zoom === 2) {
                x1 = (event.touches[0].pageX - event.touches[1].pageX) / window.innerWidth * (window.innerWidth / window.innerHeight);
                y1 = (event.touches[0].pageY - event.touches[1].pageY) / window.innerHeight;
            }
            this._cameraLogic.zoom(x1, y1, this._active.zoom, window.TouchEvent && event instanceof TouchEvent);
        }
    }
    onTouchEnd(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onUp(event);
    }
    onTouchMove(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onMove(event);
    }
    onTouchStart(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._activeEvents)
            return;
        this.onDown(event);
    }
    onTouchCancel(event) {
        if (this._controls.camera.active === false)
            return;
    }
    onTouchUp(event) {
        if (this._controls.camera.active === false)
            return;
    }
    onUp(event) {
        if (this._controls.camera.active === false)
            return;
        this._active.zoom = false;
        this._active.pan = false;
    }
    onWheel(event) {
        if (this._controls.camera.active === false)
            return;
        if (!this._controls.enableZoom)
            return;
        let delta = 0;
        if (event.deltaY !== undefined) {
            // WebKit / Opera / Explorer 9
            delta = -event.deltaY;
        }
        else if (event.detail !== undefined) {
            // Firefox
            delta = -event.detail;
        }
        if (Math.sign(delta) > 0) {
            this._cameraLogic.zoom(0, 0, false, false);
            this._cameraLogic.zoom(1.0, 0, true, false);
        }
        else {
            this._cameraLogic.zoom(1.0, 0, false, false);
            this._cameraLogic.zoom(0, 0, true, false);
        }
    }
    reset() {
        this._active = {
            zoom: false,
            pan: false
        };
    }
    // #endregion Public Methods (14)
    // #region Private Methods (1)
    convertInput(event) {
        let aspect = window.innerWidth / window.innerHeight;
        if (event instanceof MouseEvent) {
            return {
                x: event.clientX / window.innerWidth * aspect,
                y: event.clientY / window.innerHeight
            };
        }
        else {
            return {
                x: event.touches[0].pageX / window.innerWidth * aspect,
                y: event.touches[0].pageY / window.innerHeight
            };
        }
    }
}
exports.CameraControlsEventDistribution = CameraControlsEventDistribution;
//# sourceMappingURL=CameraControlsEventDistribution.js.map