import { SettingsEngine } from '@shapediver/viewer.shared.services';
import { vec2, vec3 } from 'gl-matrix';
import { Box } from '@shapediver/viewer.shared.math';
import { AbstractCamera } from './AbstractCamera';
import { IOrthographicCamera, ORTHOGRAPHIC_CAMERA_DIRECTION } from '../../interfaces/camera/IOrthographicCamera';
import { IOrthographicCameraControls } from '../../interfaces/controls/IOrthographicCameraControls';
export declare class OrthographicCamera extends AbstractCamera implements IOrthographicCamera {
    #private;
    protected _controls: IOrthographicCameraControls;
    constructor(id: string);
    get bottom(): number;
    set bottom(value: number);
    get controls(): IOrthographicCameraControls;
    set controls(value: IOrthographicCameraControls);
    get direction(): ORTHOGRAPHIC_CAMERA_DIRECTION;
    set direction(value: ORTHOGRAPHIC_CAMERA_DIRECTION);
    get left(): number;
    set left(value: number);
    get right(): number;
    set right(value: number);
    get top(): number;
    set top(value: number);
    get up(): vec3;
    set up(value: vec3);
    get threeJsObject(): {
        [key: string]: THREE.OrthographicCamera;
    };
    applySettings(settingsEngine: SettingsEngine): void;
    assignViewer(viewportId: string): void;
    clone(): IOrthographicCamera;
    calculateZoomTo(zoomTarget?: Box, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    project(pos: vec3): vec2;
    unproject(pos: vec3, position?: vec3, target?: vec3): vec3;
}
//# sourceMappingURL=OrthographicCamera.d.ts.map