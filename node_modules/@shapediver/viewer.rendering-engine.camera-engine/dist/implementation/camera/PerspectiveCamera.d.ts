import { SettingsEngine } from '@shapediver/viewer.shared.services';
import { vec2, vec3 } from 'gl-matrix';
import { Box } from '@shapediver/viewer.shared.math';
import { AbstractCamera } from './AbstractCamera';
import { IPerspectiveCamera } from '../../interfaces/camera/IPerspectiveCamera';
import { IPerspectiveCameraControls } from '../../interfaces/controls/IPerspectiveCameraControls';
export declare class PerspectiveCamera extends AbstractCamera implements IPerspectiveCamera {
    #private;
    protected _controls: IPerspectiveCameraControls;
    constructor(id: string);
    get aspect(): number | undefined;
    set aspect(value: number | undefined);
    get controls(): IPerspectiveCameraControls;
    set controls(value: IPerspectiveCameraControls);
    get fov(): number;
    set fov(value: number);
    get threeJsObject(): {
        [key: string]: THREE.PerspectiveCamera;
    };
    applySettings(settingsEngine: SettingsEngine): void;
    assignViewer(viewportId: string): void;
    clone(): IPerspectiveCamera;
    calculateZoomTo(zoomTarget?: Box, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    project(pos: vec3, position?: vec3, target?: vec3): vec2;
    unproject(pos: vec3, position?: vec3, target?: vec3): vec3;
}
//# sourceMappingURL=PerspectiveCamera.d.ts.map