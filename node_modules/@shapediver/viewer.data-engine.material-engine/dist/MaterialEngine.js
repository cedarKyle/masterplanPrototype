"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialEngine = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const gl_matrix_1 = require("gl-matrix");
const materialDatabase_1 = require("./materialDatabase");
let MaterialEngine = class MaterialEngine {
    // #endregion Properties (3)
    // #region Constructors (1)
    constructor() {
        // #region Properties (3)
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._httpClient = tsyringe_1.container.resolve(viewer_shared_services_1.HttpClient);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    /**
       * Load the material content into a scene graph node.
       *
       * @param content the material content
       * @returns the scene graph node
       */
    loadContent(content) {
        return __awaiter(this, void 0, void 0, function* () {
            const node = new viewer_shared_node_tree_1.TreeNode(content.name || 'material');
            if (!content) {
                const error = new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Invalid content was provided to material engine.');
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `MaterialEngine.loadContent`, error);
            }
            let material = new viewer_shared_types_1.MaterialStandardData();
            if (content.data) {
                const data = content.data;
                let presetData;
                if (data.materialpreset)
                    presetData = this.loadPresetMaterialDefinition(data.materialpreset);
                if (data.materialType && data.materialType !== 'standard') {
                    // gem material https://shapediver.atlassian.net/browse/SS-2514
                }
                else {
                    if (data.version) {
                        if (data.version === '1.0') {
                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV1(data, presetData));
                        }
                        else if (data.version === '2.0') {
                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV2(data, presetData));
                        }
                        else if (data.version === '3.0') {
                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV3(data, presetData));
                        }
                        else {
                            const error = new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Material data version not supported.');
                            throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `MaterialEngine.loadContent`, error);
                        }
                    }
                }
            }
            else {
                const error = new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: No material data was provided to material engine.');
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `MaterialEngine.loadContent`, error);
            }
            node.data.push(material);
            return node;
        });
    }
    // #endregion Public Methods (1)
    // #region Private Methods (9)
    assignGeneralDefinition(id, generalDefinition, specificDefinition, definition) {
        const promises = [];
        if (generalDefinition.transparencytexture && !specificDefinition.transparencytexture)
            definition.transparencytexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.transparencytexture
            };
        if (generalDefinition.hasOwnProperty('alphaThreshold') && !specificDefinition.hasOwnProperty('alphaThreshold'))
            definition.alphaThreshold = generalDefinition.alphaThreshold;
        if (generalDefinition.bumptexture && !specificDefinition.bumptexture)
            definition.bumptexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bumptexture
            };
        if (generalDefinition.hasOwnProperty('bumpAmplitude') && !specificDefinition.hasOwnProperty('bumpAmplitude'))
            definition.bumpAmplitude = generalDefinition.bumpAmplitude;
        if (generalDefinition.color && !specificDefinition.color)
            definition.color = generalDefinition.color;
        if (generalDefinition.bitmaptexture && !specificDefinition.bitmaptexture)
            definition.bitmaptexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bitmaptexture
            };
        if (generalDefinition.hasOwnProperty('metalness') && !specificDefinition.hasOwnProperty('metalness'))
            definition.metalness = generalDefinition.metalness;
        if (generalDefinition.metalnesstexture && !specificDefinition.metalnesstexture)
            definition.metalnesstexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.metalnesstexture
            };
        if (generalDefinition.normaltexture && !specificDefinition.normaltexture)
            definition.normaltexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.normaltexture
            };
        if (generalDefinition.hasOwnProperty('transparency') && !specificDefinition.hasOwnProperty('transparency'))
            definition.transparency = generalDefinition.transparency;
        if (generalDefinition.hasOwnProperty('roughness') && !specificDefinition.hasOwnProperty('roughness'))
            definition.roughness = generalDefinition.roughness;
        if (generalDefinition.roughnesstexture && !specificDefinition.roughnesstexture)
            definition.roughnesstexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.roughnesstexture
            };
        if (generalDefinition.side && !specificDefinition.side)
            definition.side = generalDefinition.side;
    }
    assignSpecificDefinition(id, specificDefinition, definition) {
        if (specificDefinition.transparencytexture)
            definition.transparencytexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.transparencytexture
            };
        if (specificDefinition.hasOwnProperty('alphaThreshold'))
            definition.alphaThreshold = specificDefinition.alphaThreshold;
        if (specificDefinition.bumptexture)
            definition.bumptexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bumptexture
            };
        if (specificDefinition.hasOwnProperty('bumpAmplitude'))
            definition.bumpAmplitude = specificDefinition.bumpAmplitude;
        if (specificDefinition.color)
            definition.color = specificDefinition.color;
        if (specificDefinition.bitmaptexture)
            definition.bitmaptexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bitmaptexture
            };
        if (specificDefinition.hasOwnProperty('metalness'))
            definition.metalness = specificDefinition.metalness;
        if (specificDefinition.metalnesstexture)
            definition.metalnesstexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.metalnesstexture
            };
        if (specificDefinition.normaltexture)
            definition.normaltexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.normaltexture
            };
        if (specificDefinition.hasOwnProperty('transparency'))
            definition.transparency = specificDefinition.transparency;
        if (specificDefinition.hasOwnProperty('roughness'))
            definition.roughness = specificDefinition.roughness;
        if (specificDefinition.roughnesstexture)
            definition.roughnesstexture = {
                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.roughnesstexture
            };
        if (specificDefinition.side)
            definition.side = specificDefinition.side;
    }
    getClassAndSpecificId(id) {
        // for a while, we had documented the presets to be 10, 20, 30 and 40 here, we allow for the few cases where this was used to succeed
        if (id < 100 && id % 10 == 0)
            id /= 10;
        // if the id is less than 10, multiply it by 100
        if (id < 10)
            id *= 100;
        const cast = (id) => {
            let idString = String(id);
            return idString.padStart(2, '0').slice(0, 2);
        };
        return {
            class: cast(Math.floor(id / 100)),
            specific: cast(id - (Math.floor(id / 100) * 100))
        };
    }
    loadMap(url, id) {
        return __awaiter(this, void 0, void 0, function* () {
            let image;
            try {
                if (!id) {
                    image = (yield this._converter.responseToImage(yield this._httpClient.loadTexture(url)));
                }
                else {
                    image = (yield this._converter.responseToImage(yield this._httpClient.loadTexture('https://viewer.shapediver.com/v2/materials/1024/' + id + '/' + url)));
                }
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `MaterialEngine.loadMap`, e);
            }
            return new viewer_shared_types_1.MapData(image);
        });
    }
    loadMapWithProperties(texture) {
        return __awaiter(this, void 0, void 0, function* () {
            let image;
            try {
                image = (yield this._converter.responseToImage(yield this._httpClient.loadTexture(texture.href)));
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `MaterialEngine.loadMapWithProperties`, e);
            }
            const wrapS = texture.wrapS === 1 ? viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapS === 2 ? viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT : viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT;
            const wrapT = texture.wrapT === 1 ? viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapT === 2 ? viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT : viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT;
            const center = texture.center ? gl_matrix_1.vec2.fromValues(texture.center[0], texture.center[1]) : gl_matrix_1.vec2.fromValues(0, 0);
            const color = texture.color ? gl_matrix_1.vec4.fromValues(texture.color[0] / 255, texture.color[1] / 255, texture.color[2] / 255, texture.color[3] / 255) : gl_matrix_1.vec4.fromValues(1, 1, 1, 1);
            const offset = texture.offset ? gl_matrix_1.vec2.fromValues(texture.offset[0], texture.offset[1]) : gl_matrix_1.vec2.fromValues(0, 0);
            const repeat = texture.repeat ? gl_matrix_1.vec2.fromValues(texture.repeat[0], texture.repeat[1]) : gl_matrix_1.vec2.fromValues(1, 1);
            return new viewer_shared_types_1.MapData(image, wrapS, wrapT, viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR, viewer_shared_types_1.TEXTURE_FILTERING.LINEAR, center, this._converter.toColor(color), offset, repeat, texture.rotation || 0);
        });
    }
    loadMaterialDefinitionV1(data, presetData = {}) {
        // ambient is ignored
        if (data.color) {
            presetData.color = data.color;
        }
        else if (data.diffuse) {
            presetData.color = data.diffuse;
        }
        // emission is ignored
        // specular is ignored
        if (data.shine || data.shine === 0) {
            presetData.metalness = Math.min(1, data.shine);
            presetData.roughness = 1 - (Math.min(1, data.shine));
        }
        if (data.hasOwnProperty('transparency'))
            presetData.transparency = data.transparency;
        if (data.bitmaptexture)
            presetData.bitmaptexture = {
                href: data.bitmaptexture
            };
        if (data.bumptexture)
            presetData.bumptexture = {
                href: data.bumptexture
            };
        if (data.transparencytexture)
            presetData.transparencytexture = {
                href: data.transparencytexture
            };
        return presetData;
    }
    loadMaterialDefinitionV2(data, presetData = {}) {
        // ambient is ignored
        if (data.color)
            presetData.color = data.color;
        presetData.side = data.side;
        if (data.metalness || data.metalness === 0)
            presetData.metalness = data.metalness;
        if (data.roughness || data.roughness === 0)
            presetData.roughness = data.roughness;
        if (data.hasOwnProperty('transparency'))
            presetData.transparency = data.transparency;
        if (data.alphaThreshold || data.alphaThreshold === 0)
            presetData.alphaThreshold = data.alphaThreshold;
        if (data.bitmaptexture)
            presetData.bitmaptexture = {
                href: data.bitmaptexture
            };
        if (data.metalnesstexture)
            presetData.metalnesstexture = {
                href: data.metalnesstexture
            };
        if (data.roughnesstexture)
            presetData.roughnesstexture = {
                href: data.roughnesstexture
            };
        if (data.bumptexture)
            presetData.bumptexture = {
                href: data.bumptexture
            };
        if (data.normaltexture)
            presetData.normaltexture = {
                href: data.normaltexture
            };
        if (data.transparencytexture)
            presetData.transparencytexture = {
                href: data.transparencytexture
            };
        return presetData;
    }
    loadMaterialDefinitionV3(data, presetData = {}) {
        // ambient is ignored
        if (data.color)
            presetData.color = data.color;
        presetData.side = data.side;
        if (data.metalness || data.metalness === 0)
            presetData.metalness = data.metalness;
        if (data.roughness || data.roughness === 0)
            presetData.roughness = data.roughness;
        if (data.hasOwnProperty('transparency'))
            presetData.transparency = data.transparency;
        if (data.alphaThreshold || data.alphaThreshold === 0)
            presetData.alphaThreshold = data.alphaThreshold;
        if (data.bumpAmplitude || data.bumpAmplitude === 0)
            presetData.bumpAmplitude = data.bumpAmplitude;
        if (data.bitmaptexture)
            presetData.bitmaptexture = data.bitmaptexture;
        if (data.metalnesstexture)
            presetData.metalnesstexture = data.metalnesstexture;
        if (data.roughnesstexture)
            presetData.roughnesstexture = data.roughnesstexture;
        if (data.bumptexture)
            presetData.bumptexture = data.bumptexture;
        if (data.normaltexture)
            presetData.normaltexture = data.normaltexture;
        if (data.transparencytexture)
            presetData.transparencytexture = data.transparencytexture;
        // line material https://shapediver.atlassian.net/browse/SS-2272
        return presetData;
    }
    loadMaterialV3(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const material = new viewer_shared_types_1.MaterialStandardData();
            const promises = [];
            // ambient is ignored
            if (data.color)
                material.color = this._converter.toColor(data.color);
            material.side = data.side === 'front' ? viewer_shared_types_1.MATERIAL_SIDE.FRONT : data.side === 'back' ? viewer_shared_types_1.MATERIAL_SIDE.BACK : viewer_shared_types_1.MATERIAL_SIDE.DOUBLE;
            if (data.metalness || data.metalness === 0)
                material.metalness = data.metalness;
            if (data.roughness || data.roughness === 0)
                material.roughness = data.roughness;
            if (data.hasOwnProperty('transparency'))
                material.opacity = 1 - data.transparency;
            if (data.alphaThreshold || data.alphaThreshold === 0)
                material.alphaCutoff = data.alphaThreshold;
            if (data.bumpAmplitude || data.bumpAmplitude === 0)
                material.bumpScale = data.bumpAmplitude;
            if (data.bitmaptexture) {
                promises.push(this.loadMapWithProperties(data.bitmaptexture).then(map => {
                    if (map)
                        material.map = map;
                    return map;
                }));
            }
            if (data.metalnesstexture) {
                promises.push(this.loadMapWithProperties(data.metalnesstexture).then(map => {
                    if (map)
                        material.metalnessMap = map;
                    return map;
                }));
            }
            if (data.roughnesstexture) {
                promises.push(this.loadMapWithProperties(data.roughnesstexture).then(map => {
                    if (map)
                        material.roughnessMap = map;
                    return map;
                }));
            }
            if (data.bumptexture) {
                promises.push(this.loadMapWithProperties(data.bumptexture).then(map => {
                    if (map)
                        material.bumpMap = map;
                    return map;
                }));
            }
            if (data.normaltexture) {
                promises.push(this.loadMapWithProperties(data.normaltexture).then(map => {
                    if (map)
                        material.normalMap = map;
                    return map;
                }));
            }
            if (data.transparencytexture) {
                promises.push(this.loadMapWithProperties(data.transparencytexture).then(map => {
                    if (map)
                        material.alphaMap = map;
                    return map;
                }));
            }
            // line material https://shapediver.atlassian.net/browse/SS-2272
            yield Promise.all(promises);
            return material;
        });
    }
    loadPresetMaterialDefinition(preset) {
        const definition = {};
        const idStrings = this.getClassAndSpecificId(preset);
        if (materialDatabase_1.materialDatabase[idStrings.class] && materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific]) {
            this.assignSpecificDefinition(idStrings, materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific], definition);
            this.assignGeneralDefinition(idStrings, materialDatabase_1.materialDatabase[idStrings.class].properties, materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific], definition);
        }
        else if (materialDatabase_1.materialDatabase[idStrings.class] && materialDatabase_1.materialDatabase[idStrings.class]['00']) {
            this.assignSpecificDefinition({ class: idStrings.class, specific: '00' }, materialDatabase_1.materialDatabase[idStrings.class]['00'], definition);
            this.assignGeneralDefinition({ class: idStrings.class, specific: '00' }, materialDatabase_1.materialDatabase[idStrings.class].properties, materialDatabase_1.materialDatabase[idStrings.class]['00'], definition);
        }
        else {
            this.assignSpecificDefinition({ class: '00', specific: '00' }, materialDatabase_1.materialDatabase['00']['00'], definition);
            this.assignGeneralDefinition({ class: '00', specific: '00' }, materialDatabase_1.materialDatabase['00'].properties, materialDatabase_1.materialDatabase['00']['00'], definition);
        }
        return definition;
    }
    loadPresetMaterial(preset) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.loadMaterialV3(this.loadPresetMaterialDefinition(preset));
        });
    }
};
MaterialEngine = __decorate([
    (0, tsyringe_1.singleton)(),
    __metadata("design:paramtypes", [])
], MaterialEngine);
exports.MaterialEngine = MaterialEngine;
//# sourceMappingURL=MaterialEngine.js.map