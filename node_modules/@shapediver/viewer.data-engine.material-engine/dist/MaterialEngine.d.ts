import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { MapData, MaterialStandardData } from '@shapediver/viewer.shared.types';
import { ShapeDiverResponseOutputContent } from '@shapediver/sdk.geometry-api-sdk-v2';
import { IMaterialContentDataV1, IMaterialContentDataV2, IMaterialContentDataV3, ITexture } from '@shapediver/viewer.data-engine.shared-types';
export declare class MaterialEngine {
    private readonly _converter;
    private readonly _httpClient;
    private readonly _logger;
    constructor();
    /**
       * Load the material content into a scene graph node.
       *
       * @param content the material content
       * @returns the scene graph node
       */
    loadContent(content: ShapeDiverResponseOutputContent): Promise<ITreeNode>;
    private assignGeneralDefinition;
    private assignSpecificDefinition;
    private getClassAndSpecificId;
    loadMap(url: string, id?: string): Promise<MapData | null>;
    loadMapWithProperties(texture: ITexture): Promise<MapData | null>;
    loadMaterialDefinitionV1(data: IMaterialContentDataV1, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialDefinitionV2(data: IMaterialContentDataV2, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialDefinitionV3(data: IMaterialContentDataV3, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialV3(data: IMaterialContentDataV3): Promise<MaterialStandardData>;
    loadPresetMaterialDefinition(preset: number): IMaterialContentDataV3;
    loadPresetMaterial(preset: number): Promise<MaterialStandardData>;
}
//# sourceMappingURL=MaterialEngine.d.ts.map