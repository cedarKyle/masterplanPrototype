"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateSettingsVersion = exports.validate = exports.convert = exports.DefaultsV3_1 = exports.DefaultsV3 = exports.DefaultsV2 = exports.DefaultsV1 = void 0;
const Defaults_1 = require("./versions/v1/Defaults");
Object.defineProperty(exports, "DefaultsV1", { enumerable: true, get: function () { return Defaults_1.Defaults; } });
const Validator_1 = require("./versions/v1/Validator");
const Defaults_2 = require("./versions/v2/Defaults");
Object.defineProperty(exports, "DefaultsV2", { enumerable: true, get: function () { return Defaults_2.Defaults; } });
const Validator_2 = require("./versions/v2/Validator");
const Converter_1 = require("./versions/v2/Converter");
const Defaults_3 = require("./versions/v3/Defaults");
Object.defineProperty(exports, "DefaultsV3", { enumerable: true, get: function () { return Defaults_3.Defaults; } });
const Validator_3 = require("./versions/v3/Validator");
const Converter_2 = require("./versions/v3/Converter");
const Defaults_4 = require("./versions/v3_1/Defaults");
Object.defineProperty(exports, "DefaultsV3_1", { enumerable: true, get: function () { return Defaults_4.Defaults; } });
const Validator_4 = require("./versions/v3_1/Validator");
const Converter_3 = require("./versions/v3_1/Converter");
let settingsUtilities = [];
settingsUtilities.push({
    version: '1.0',
    defaults: Defaults_1.Defaults,
    convertToPrevious: s => s,
    convertFromPrevious: s => s,
    validate: Validator_1.validate
});
settingsUtilities.push({
    version: '2.0',
    defaults: Defaults_2.Defaults,
    convertToPrevious: Converter_1.convertToPrevious,
    convertFromPrevious: Converter_1.convertFromPrevious,
    validate: Validator_2.validate
});
settingsUtilities.push({
    version: '3.0',
    defaults: Defaults_3.Defaults,
    convertToPrevious: Converter_2.convertToPrevious,
    convertFromPrevious: Converter_2.convertFromPrevious,
    validate: Validator_3.validate
});
settingsUtilities.push({
    version: '3.1',
    defaults: Defaults_4.Defaults,
    convertToPrevious: Converter_3.convertToPrevious,
    convertFromPrevious: Converter_3.convertFromPrevious,
    validate: Validator_4.validate
});
const convert = (settings, targetVersion) => {
    const original_version = settings.settings_version || '1.0';
    if (original_version === targetVersion)
        return settings;
    const target = settingsUtilities.findIndex(util => { return util.version === targetVersion; });
    const current = settingsUtilities.findIndex(util => { return util.version === original_version; });
    if (target === -1)
        throw new Error('ViewerSettings.convert: Target version not available');
    if (current === -1)
        throw new Error('ViewerSettings.convert: Settings version not available');
    let tempSettings = settings;
    if (target < current) {
        for (let i = current; target < i; i--)
            tempSettings = settingsUtilities[i].convertToPrevious(tempSettings, original_version);
    }
    else {
        for (let i = current + 1; i <= target; i++)
            tempSettings = settingsUtilities[i].convertFromPrevious(tempSettings, original_version);
    }
    return tempSettings;
};
exports.convert = convert;
const validate = (settings, targetVersion) => {
    const settings_version = settings.settings_version || '1.0';
    if (targetVersion !== undefined) {
        const index = settingsUtilities.findIndex(util => { return util.version === targetVersion; });
        if (index === -1)
            throw new Error('ViewerSettings.validate: Target version was not found.');
        if (settings_version !== undefined && settings_version !== targetVersion)
            throw new Error('ViewerSettings.validate: The settings do have a different version than the target version.');
        settingsUtilities[index].validate(settings);
    }
    else {
        if (!settings_version)
            throw new Error('ViewerSettings.validate: Settings do not have a version specified.');
        const index = settingsUtilities.findIndex(util => { return util.version === settings_version; });
        settingsUtilities[index].validate(settings);
    }
};
exports.validate = validate;
const evaluateSettingsVersion = (viewerVersion) => {
    if (!viewerVersion || viewerVersion.startsWith('1'))
        return '1.0';
    if (viewerVersion.startsWith('2')) {
        const upgradeVersions = viewerVersion.split('.');
        if (+upgradeVersions[1] >= 18) {
            return '2.0';
        }
        else {
            return '1.0';
        }
    }
    if (viewerVersion.startsWith('3')) {
        const upgradeVersions = viewerVersion.split('.');
        if ((+upgradeVersions[1] === 1 && +upgradeVersions[2] >= 12) || +upgradeVersions[1] > 1) {
            return '3.1';
        }
        else {
            return '3.0';
        }
    }
    return '1.0';
};
exports.evaluateSettingsVersion = evaluateSettingsVersion;
//# sourceMappingURL=index.js.map