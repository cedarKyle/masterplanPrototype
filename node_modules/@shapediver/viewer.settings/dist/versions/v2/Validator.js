"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const joi_1 = __importDefault(require("joi"));
const lightSchema = joi_1.default.object({
    id: joi_1.default.string(),
    name: joi_1.default.string().optional(),
    type: joi_1.default.string(),
    order: joi_1.default.number().unsafe().optional(),
    properties: {
        color: joi_1.default.alternatives([joi_1.default.number().unsafe(), joi_1.default.string()]).optional(),
        direction: joi_1.default.object({ x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }).optional(),
        position: joi_1.default.object({ x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }).optional(),
        target: joi_1.default.object({ x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }).optional(),
        castShadow: joi_1.default.boolean().optional(),
        skyColor: joi_1.default.alternatives([joi_1.default.number().unsafe(), joi_1.default.string()]).optional(),
        groundColor: joi_1.default.alternatives([joi_1.default.number().unsafe(), joi_1.default.string()]).optional(),
        intensity: joi_1.default.number().unsafe().optional(),
        distance: joi_1.default.number().unsafe().optional(),
        angle: joi_1.default.number().unsafe().optional(),
        penumbra: joi_1.default.number().unsafe().optional(),
        decay: joi_1.default.number().unsafe().optional(),
        shadowMapResolution: joi_1.default.number().unsafe().optional(),
        shadowMapBias: joi_1.default.number().unsafe().optional()
    }
});
const lightScenesSchema = joi_1.default.object().pattern(/^/, [
    joi_1.default.object({
        id: joi_1.default.string(),
        name: joi_1.default.string().optional(),
        lights: joi_1.default.object().pattern(/^/, [lightSchema])
    })
]);
const schema = joi_1.default.object({
    build_date: joi_1.default.string().allow('').optional(),
    build_version: joi_1.default.string().allow('').optional(),
    settings_version: joi_1.default.string(),
    ar: joi_1.default.object({
        enableCameraSync: joi_1.default.boolean().optional(),
        enableCameraSyncInitial: joi_1.default.boolean().optional(),
        enableLightingEstimation: joi_1.default.boolean().optional(),
        enableTouchControls: joi_1.default.boolean().optional(),
        enableTouchControlRotation: joi_1.default.boolean().optional(),
        enableAutomaticPlacement: joi_1.default.boolean().optional(),
        defaultHitTestType: joi_1.default.string().optional(),
    }).optional(),
    defaultMaterial: {
        bumpAmplitude: joi_1.default.number().unsafe().optional(),
        color: joi_1.default.alternatives([joi_1.default.string(), joi_1.default.array().items(joi_1.default.number().unsafe())]).optional(),
        metalness: joi_1.default.number().unsafe().optional(),
        roughness: joi_1.default.number().unsafe().optional(),
    },
    parameters: joi_1.default.object({
        controlOrder: joi_1.default.array().items(joi_1.default.string()).optional(),
        controlNames: joi_1.default.object().pattern(/.*/, [joi_1.default.string()]).optional(),
        parametersHidden: joi_1.default.array().items(joi_1.default.string()).optional(),
    }).optional(),
    viewer: {
        blurSceneWhenBusy: joi_1.default.boolean(),
        ignoreSuperseded: joi_1.default.boolean().optional(),
        loggingLevel: joi_1.default.number().unsafe().optional(),
        messageLoggingLevel: joi_1.default.number().unsafe().optional(),
        viewerRuntimeId: joi_1.default.string().allow('').optional(),
        hasRestoredSettings: joi_1.default.boolean().optional(),
        useModelSettings: joi_1.default.boolean().optional(),
        showMessages: joi_1.default.boolean().optional(),
        commitSettings: joi_1.default.boolean(),
        commitParameters: joi_1.default.boolean(),
        scene: {
            show: joi_1.default.boolean().optional(),
            showSceneTransition: joi_1.default.string().optional(),
            duration: joi_1.default.number().unsafe().optional(),
            fullscreen: joi_1.default.boolean().optional(),
            gridVisibility: joi_1.default.boolean(),
            groundPlaneReflectionThreshold: joi_1.default.number().unsafe().optional(),
            groundPlaneReflectionVisibility: joi_1.default.boolean().optional(),
            groundPlaneVisibility: joi_1.default.boolean(),
            camera: {
                autoAdjust: joi_1.default.boolean(),
                cameraMovementDuration: joi_1.default.number().unsafe().min(0),
                cameraTypes: {
                    perspective: {
                        default: { position: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }, target: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() } },
                        fov: joi_1.default.number().unsafe().min(0).max(180),
                        controls: joi_1.default.number().unsafe().optional(),
                    },
                    orthographic: {
                        default: { position: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }, target: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() } },
                    },
                    active: joi_1.default.number().unsafe().min(0).max(6)
                },
                controls: {
                    orbit: {
                        autoRotationSpeed: joi_1.default.number().unsafe(),
                        damping: joi_1.default.number().unsafe().min(0),
                        enableAutoRotation: joi_1.default.boolean(),
                        enableKeyPan: joi_1.default.boolean(),
                        enablePan: joi_1.default.boolean(),
                        enableRotation: joi_1.default.boolean(),
                        enableZoom: joi_1.default.boolean(),
                        input: { keys: { up: joi_1.default.number().unsafe(), down: joi_1.default.number().unsafe(), left: joi_1.default.number().unsafe(), right: joi_1.default.number().unsafe() }, mouse: { rotate: joi_1.default.number().unsafe(), zoom: joi_1.default.number().unsafe(), pan: joi_1.default.number().unsafe() }, touch: { rotate: joi_1.default.number().unsafe(), zoom: joi_1.default.number().unsafe(), pan: joi_1.default.number().unsafe() }, },
                        keyPanSpeed: joi_1.default.number().unsafe().min(0).max(1),
                        movementSmoothness: joi_1.default.number().unsafe().min(0).max(1),
                        restrictions: {
                            position: joi_1.default.object({
                                cube: joi_1.default.object({ min: { x: joi_1.default.number().unsafe().allow(-Infinity).allow(null), y: joi_1.default.number().unsafe().allow(-Infinity).allow(null), z: joi_1.default.number().unsafe().allow(-Infinity).allow(null) }, max: { x: joi_1.default.number().unsafe().allow(Infinity).allow(null), y: joi_1.default.number().unsafe().allow(Infinity).allow(null), z: joi_1.default.number().unsafe().allow(Infinity).allow(null) } }).optional(),
                                sphere: joi_1.default.object({ center: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }, radius: joi_1.default.number().unsafe().allow(Infinity).allow(null) }).optional(),
                            }).optional(),
                            target: joi_1.default.object({
                                cube: joi_1.default.object({ min: { x: joi_1.default.number().unsafe().allow(-Infinity).allow(null), y: joi_1.default.number().unsafe().allow(-Infinity).allow(null), z: joi_1.default.number().unsafe().allow(-Infinity).allow(null) }, max: { x: joi_1.default.number().unsafe().allow(Infinity).allow(null), y: joi_1.default.number().unsafe().allow(Infinity).allow(null), z: joi_1.default.number().unsafe().allow(Infinity).allow(null) } }).optional(),
                                sphere: joi_1.default.object({ center: { x: joi_1.default.number().unsafe(), y: joi_1.default.number().unsafe(), z: joi_1.default.number().unsafe() }, radius: joi_1.default.number().unsafe().allow(Infinity).allow(null) }).optional(),
                            }).optional(),
                            rotation: joi_1.default.object({ minPolarAngle: joi_1.default.number().unsafe(), maxPolarAngle: joi_1.default.number().unsafe(), minAzimuthAngle: joi_1.default.number().unsafe().allow(-Infinity).allow(null), maxAzimuthAngle: joi_1.default.number().unsafe().allow(Infinity).allow(null) }).optional(),
                            zoom: joi_1.default.object({ minDistance: joi_1.default.number().unsafe(), maxDistance: joi_1.default.number().unsafe().allow(Infinity).allow(null) }).optional(),
                        },
                        rotationSpeed: joi_1.default.number().unsafe().min(0).max(1),
                        panSpeed: joi_1.default.number().unsafe().min(0).max(1),
                        zoomSpeed: joi_1.default.number().unsafe().min(0).max(1),
                    },
                    fps: {},
                    orthographic: {
                        damping: joi_1.default.number().unsafe().min(0).max(1),
                        enableKeyPan: joi_1.default.boolean(),
                        enablePan: joi_1.default.boolean(),
                        enableZoom: joi_1.default.boolean(),
                        input: { keys: { up: joi_1.default.number().unsafe(), down: joi_1.default.number().unsafe(), left: joi_1.default.number().unsafe(), right: joi_1.default.number().unsafe() }, mouse: { rotate: joi_1.default.number().unsafe(), zoom: joi_1.default.number().unsafe(), pan: joi_1.default.number().unsafe() }, touch: { rotate: joi_1.default.number().unsafe(), zoom: joi_1.default.number().unsafe(), pan: joi_1.default.number().unsafe() }, },
                        keyPanSpeed: joi_1.default.number().unsafe().min(0).max(1),
                        movementSmoothness: joi_1.default.number().unsafe().min(0).max(1),
                        panSpeed: joi_1.default.number().unsafe().min(0).max(1),
                        zoomSpeed: joi_1.default.number().unsafe().min(0).max(1),
                    }
                },
                enableCameraControls: joi_1.default.boolean(),
                revertAtMouseUp: joi_1.default.boolean(),
                revertAtMouseUpDuration: joi_1.default.number().unsafe().min(0),
                zoomExtentsFactor: joi_1.default.number().unsafe().positive(),
            },
            lights: {
                helper: joi_1.default.boolean().optional(),
                lightScene: joi_1.default.string().allow(''),
                lightScenes: lightScenesSchema.allow(null)
            },
            material: {
                environmentMap: joi_1.default.alternatives([joi_1.default.string().allow(''), joi_1.default.array().items(joi_1.default.string())]),
                environmentMapAsBackground: joi_1.default.boolean(),
                environmentMapResolution: joi_1.default.string().valid('256', '512', '1024', '2048')
            },
            render: {
                ambientOcclusion: joi_1.default.boolean(),
                beautyRenderDelay: joi_1.default.number().unsafe().min(0),
                beautyRenderBlendingDuration: joi_1.default.number().unsafe().min(0).optional(),
                clearAlpha: joi_1.default.number().unsafe().min(0).max(1),
                clearColor: joi_1.default.string(),
                pointSize: joi_1.default.number().unsafe().min(0),
                shadows: joi_1.default.boolean(),
                sao: {
                    samples: joi_1.default.number().unsafe().positive().optional(),
                    kernelRadius: joi_1.default.number().unsafe().positive().optional(),
                    intensity: joi_1.default.number().unsafe().positive().optional(),
                    standardDev: joi_1.default.number().unsafe().min(0).optional(),
                }
            },
        },
    },
}).options({ presence: 'required' });
const validate = (s) => {
    const result = joi_1.default.attempt(s, schema);
    s = result.value;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map