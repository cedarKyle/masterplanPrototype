import { ShapeDiverRequestCustomization, ShapeDiverRequestExport, ShapeDiverResponseDto } from "@shapediver/api.geometry-api-dto-v2";
import { BaseResourceApi, ShapeDiverSdkApi, ShapeDiverSdkApiResponseType } from "@shapediver/sdk.geometry-api-sdk-core";
import { ShapeDiverSdk } from "../ShapeDiverSdk";
export declare class ShapeDiverUtilsApi extends BaseResourceApi {
    constructor(api: ShapeDiverSdkApi);
    /**
     * Upload the given file to the specified URL.
     *
     * @param url - The target URL of the upload request.
     * @param data - The data that should be uploaded.
     * @param contentType - Indicate the original media type of the resource.
     */
    upload(url: string, data: ArrayBuffer | Record<string, any> | string, contentType: string): Promise<any>;
    /**
     * Download from the given URL.
     *
     * @param url - The target URL of the download request.
     * @param responseType - Indicates the type of data that the server should respond with if possible.
     */
    download(url: string, responseType: ShapeDiverSdkApiResponseType): Promise<any>;
    /**
     * Submit a customization request and wait for the result to be finished.
     *
     * @param sdk
     * @param sessionId
     * @param body
     * @param maxWaitMsec - Maximum duration to wait for result (in milliseconds), pass value < 0 to disable limit.
     * @throws {@link ShapeDiverError} in case a maximum duration has been specified and is exceeded.
     * @returns
     */
    submitAndWaitForCustomization(sdk: ShapeDiverSdk, sessionId: string, body: ShapeDiverRequestCustomization, maxWaitMsec?: number): Promise<ShapeDiverResponseDto>;
    /**
     * Submit an export request and wait for the result to be finished.
     *
     * @param sdk
     * @param sessionId
     * @param body
     * @param maxWaitMsec - Maximum duration to wait for result (in milliseconds), pass value < 0 to disable limit.
     * @throws {@link ShapeDiverError} in case a maximum duration has been specified and is exceeded.
     * @returns
     */
    submitAndWaitForExport(sdk: ShapeDiverSdk, sessionId: string, body: ShapeDiverRequestExport, maxWaitMsec?: number): Promise<ShapeDiverResponseDto>;
    /**
     * Given a DTO resulting from a customization request, wait for the results to be finished.
     *
     * @param sdk
     * @param sessionId
     * @param dto
     * @param maxWaitMsec - Maximum duration to wait for result (in milliseconds), pass value < 0 to disable limit.
     * @returns
     */
    private static waitForCustomizationResult;
    /**
     * Given a DTO resulting from an export request, wait for the result to be finished.
     *
     * @param sdk
     * @param sessionId
     * @param dto
     * @param exportId
     * @param maxWaitMsec - Maximum duration to wait for result (in milliseconds), pass value < 0 to disable limit.
     * @returns
     */
    private static waitForExportResult;
    /**
     * Get the maximum delay which was reported for output versions.
     *
     * @param dto
     * @returns maximum delay, -1 in case no delay was reported
     */
    private static getMaxOutputDelay;
    /**
     * Get the delay which was reported for the export.
     *
     * @param dto
     * @param exportId
     * @returns delay, -1 in case no delay was reported
     */
    private static getExportDelay;
}
//# sourceMappingURL=ShapeDiverUtilsApi.d.ts.map