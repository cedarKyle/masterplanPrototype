import { BaseResourceApi, ShapeDiverSdkApi } from "@shapediver/sdk.geometry-api-sdk-core";
export declare class ShapeDiverAssetApi extends BaseResourceApi {
    constructor(api: ShapeDiverSdkApi);
    /**
     * Download an export.
     *
     * @param sessionId
     * @param assetData
     */
    getExport(sessionId: string, assetData: string): Promise<[ArrayBuffer, string]>;
    /**
     * Download an output.
     *
     * @param sessionId
     * @param assetData
     */
    getOutput(sessionId: string, assetData: string): Promise<[ArrayBuffer, string]>;
    /**
     * Downloads the JSON content part of a sdTF output.
     *
     * @param sessionId
     * @param assetData
     */
    getSdtfJsonContent(sessionId: string, assetData: string): Promise<Record<string, any>>;
    /**
     * Download a texture file.
     *
     * @param sessionId
     * @param assetData
     */
    getTexture(sessionId: string, assetData: string): Promise<[ArrayBuffer, string]>;
    /**
     * Download a glTF file.
     *
     * @param sessionId
     * @param assetData
     */
    getGltf(sessionId: string, assetData: string): Promise<ArrayBuffer>;
    /**
     * Download a USDZ file.
     *
     * @param sessionId
     * @param assetData
     */
    getUsdz(sessionId: string, assetData: string): Promise<ArrayBuffer>;
    /**
     * Download an image.
     *
     * @param sessionId
     * @param url - The URL of the image that should be downloaded.
     * @returns Array of size 2: [0] = content data, [1] = content type.
     */
    downloadImage(sessionId: string, url: string): Promise<[ArrayBuffer, string]>;
    /**
     * Fetches a ShapeDiver asset of the following types:
     *  * Output
     *  * Export
     *  * Texture
     *
     * This function works similar to {@link getOutput}, {@link getExport} and {@link getTexture}, but does not require
     * extracted _session ID_ and _asset data_ parameters.
     *
     * @param url - The URL of the asset that should be fetched.
     * @returns Array of size 3: [0] = content data, [1] = content type, [2] = asset type.
     * @throws {@link ShapeDiverError} when the given URL is not a valid ShapeDiver asset URL.
     */
    getAsset(url: string): Promise<[ArrayBuffer, string, "output" | "export" | "texture"]>;
}
//# sourceMappingURL=ShapeDiverAssetApi.d.ts.map