"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverFileApi = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const utils_1 = require("../utils/utils");
class ShapeDiverFileApi extends sdk_geometry_api_sdk_core_1.BaseResourceApi {
    constructor(api) {
        super(api);
    }
    /**
     * List all file-assets of the given parameter.
     *
     * @param sessionId
     * @param paramId
     */
    list(sessionId, paramId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () { return (yield this.api.get(`${this.buildSessionUri(sessionId)}/file/${paramId}/list`))[1]; }));
        });
    }
    /**
     * Download a file-asset.
     *
     * @param sessionId
     * @param paramId
     * @param fileId
     */
    get(sessionId, paramId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/file/${paramId}/${fileId}`, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA }))[1];
            }));
        });
    }
    /**
     * Delete a file-asset.
     *
     * @param sessionId
     * @param paramId
     * @param fileId
     */
    delete(sessionId, paramId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () { return (yield this.api.delete(`${this.buildSessionUri(sessionId)}/file/${paramId}/${fileId}`))[1]; }));
        });
    }
    /**
     * Request an Upload-URL for a file.
     *
     * @param sessionId
     * @param body
     */
    requestUpload(sessionId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () { return (yield this.api.post(this.buildSessionUri(sessionId) + "/file/upload", body))[1]; }));
        });
    }
}
exports.ShapeDiverFileApi = ShapeDiverFileApi;
//# sourceMappingURL=ShapeDiverFileApi.js.map