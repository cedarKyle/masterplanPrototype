import { ShapeDiverRequestConfigure, ShapeDiverRequestCustomization, ShapeDiverRequestModel, ShapeDiverRequestModelComputationQueryOrder, ShapeDiverRequestModelComputationQueryStatus, ShapeDiverRequestModelComputationQueryType, ShapeDiverRequestParameterDefinition, ShapeDiverResponseDto } from "@shapediver/api.geometry-api-dto-v2";
import { BaseResourceApi, ShapeDiverSdkApi } from "@shapediver/sdk.geometry-api-sdk-core";
export declare class ShapeDiverModelApi extends BaseResourceApi {
    constructor(api: ShapeDiverSdkApi);
    /**
     * Get information about a ShapeDiver Model.
     *
     * @param modelId
     */
    get(modelId: string): Promise<ShapeDiverResponseDto>;
    /**
     * Create a new ShapeDiver Model.
     *
     * @param body
     */
    create(body: ShapeDiverRequestModel): Promise<ShapeDiverResponseDto>;
    /**
     * Update properties of a ShapeDiver Model.
     *
     * @param modelId
     * @param body
     */
    update(modelId: string, body: ShapeDiverRequestModel): Promise<ShapeDiverResponseDto>;
    /**
     * Delete a ShapeDiver Model.
     *
     * @param modelId
     */
    delete(modelId: string): Promise<ShapeDiverResponseDto>;
    /**
     * Get configurations of the viewer.
     *
     * @param modelId
     */
    getConfig(modelId: string): Promise<ShapeDiverResponseDto>;
    /**
     * Create viewer configurations.
     *
     * @param modelId
     * @param body
     */
    createConfig(modelId: string, body: ShapeDiverRequestConfigure): Promise<ShapeDiverResponseDto>;
    /**
     * Update viewer configurations.
     *
     * @param modelId
     * @param body
     */
    updateConfig(modelId: string, body: ShapeDiverRequestConfigure): Promise<ShapeDiverResponseDto>;
    /**
     * Download the Grasshopper file of the ShapeDiver Model.
     *
     * @param modelId
     */
    getFile(modelId: string): Promise<ArrayBuffer>;
    /**
     * Set the default parameters for the ShapeDiver Model.
     *
     * @param modelId
     * @param body
     */
    setDefaultParams(modelId: string, body: ShapeDiverRequestCustomization): Promise<ShapeDiverResponseDto>;
    /**
     * Updates the definitions of the given parameters.
     *
     * @param modelId
     * @param body
     */
    updateParameterDefinitions(modelId: string, body: ShapeDiverRequestParameterDefinition): Promise<ShapeDiverResponseDto>;
    /**
     * Query model computation statistics.
     *
     * @param modelId
     * @param timestampFrom - Timestamp to query from
     * @param timestampTo - Timestamp to query to.
     * @param limit - How many items to return at most.
     * @param strictLimit - Whether the limit shall be attained (if there are enough items).
     * @param order - Order in which to query computation stats items.
     * @param status - Filter computations by the result status.
     * @param type - Filter computations by type.
     * @param offset - Continuation token for pagination.
     */
    queryComputations(modelId: string, timestampFrom?: string, timestampTo?: string, limit?: number, strictLimit?: boolean, order?: ShapeDiverRequestModelComputationQueryOrder, status?: ShapeDiverRequestModelComputationQueryStatus, type?: ShapeDiverRequestModelComputationQueryType, offset?: string): Promise<ShapeDiverResponseDto>;
    /**
     * Delete old export components.
     *
     * @param modelId
     * @param untilLastSeen - Delete all components that have been used last before this timestamp.
     */
    enqueueCleanupExports(modelId: string, untilLastSeen: string): Promise<ShapeDiverResponseDto>;
    /**
     * Delete old output components.
     *
     * @param modelId
     * @param untilLastSeen - Delete all components that have been used last before this timestamp.
     */
    enqueueCleanupOutputs(modelId: string, untilLastSeen: string): Promise<ShapeDiverResponseDto>;
    /**
     * Delete old texture components.
     *
     * @param modelId
     * @param untilLastSeen - Delete all components that have been used last before this timestamp.
     */
    enqueueCleanupTextures(modelId: string, untilLastSeen: string): Promise<ShapeDiverResponseDto>;
    /**
     * Get the status of all running model cleanup processes.
     *
     * @param modelId
     */
    getCleanupStatus(modelId: string): Promise<ShapeDiverResponseDto>;
}
//# sourceMappingURL=ShapeDiverModelApi.d.ts.map