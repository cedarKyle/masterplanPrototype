"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeBase64 = exports.sleep = exports.sendRequest = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const ShapeDiverErrors_1 = require("../ShapeDiverErrors");
/**
 * Sends the given request, handles retries for the HTTP status 429, and maps
 * the response error object to its typed representation.
 */
function sendRequest(call) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const retryLimit = 5;
        let retryCounter = 0;
        while (retryCounter < retryLimit) {
            try {
                return yield call();
            }
            catch (e) {
                retryCounter++;
                if (e instanceof sdk_geometry_api_sdk_core_1.ShapeDiverResponseError) {
                    /* Check for special response statuses */
                    if (e.status === 429) {
                        // 429 Too Many Requests - Extract waiting time from Retry-After header if existing.
                        const seconds = (_a = e.headers["retry-after"]) !== null && _a !== void 0 ? _a : 60; // default is 1 minute
                        yield sleep(Number(seconds) * 1000);
                        continue;
                    }
                    else if (e.status === 502) {
                        yield sleep(1000); // 1 second
                        continue;
                    }
                    // Error mapping
                    throw new ShapeDiverErrors_1.ShapeDiverResponseError(e);
                }
                else {
                    // Not a response error -> something went wrong
                    throw e;
                }
            }
        }
        throw new sdk_geometry_api_sdk_core_1.ShapeDiverError("Could not send request: Retry-limit reached");
    });
}
exports.sendRequest = sendRequest;
/** Delays the response for the given number of milliseconds */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
exports.sleep = sleep;
/** Encode the given string to base64 */
function encodeBase64(str) {
    try {
        return btoa(str);
    }
    catch (err) {
        return Buffer.from(str).toString("base64");
    }
}
exports.encodeBase64 = encodeBase64;
//# sourceMappingURL=utils.js.map