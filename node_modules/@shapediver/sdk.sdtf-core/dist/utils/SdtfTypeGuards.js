"use strict";
//<editor-fold desc="Primitives">
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNil = exports.isBinaryData = exports.isDataObject = exports.isUintArray = exports.isIntArray = exports.isNumberArray = exports.isNonEmptyString = exports.isUint = exports.isInt = exports.isNumber = exports.isNumeric = void 0;
/** Checks whether the given argument is a finite number or string number. */
function isNumeric(arg) {
    if (typeof arg === "number") {
        return arg - arg === 0;
    }
    if (typeof arg === "string" && arg.trim() !== "") {
        return (Number.isFinite) ? Number.isFinite(+arg) : isFinite(+arg);
    }
    return false;
}
exports.isNumeric = isNumeric;
/** Checks whether the given argument is a finite number. */
function isNumber(arg) {
    return isNumeric(arg) && typeof arg === "number";
}
exports.isNumber = isNumber;
/** Checks whether the given argument is a finite signed integer. */
function isInt(arg) {
    return isNumber(arg) && Number.isInteger(Number(arg));
}
exports.isInt = isInt;
/** Checks whether the given argument is a finite unsigned integer. */
function isUint(arg) {
    return isInt(arg) && Number(arg) >= 0;
}
exports.isUint = isUint;
/** Checks whether the given argument is a string of length larger than 0. */
function isNonEmptyString(arg) {
    return typeof arg === "string" && arg !== "";
}
exports.isNonEmptyString = isNonEmptyString;
//</editor-fold>
//<editor-fold desc="Arrays">
/** Checks whether the given argument is an array of numbers. */
function isNumberArray(arg) {
    return Array.isArray(arg) && arg.every(a => isNumber(a));
}
exports.isNumberArray = isNumberArray;
/** Checks whether the given argument is an array of signed integers. */
function isIntArray(arg) {
    return Array.isArray(arg) && arg.every(a => isInt(a));
}
exports.isIntArray = isIntArray;
/** Checks whether the given argument is an array of unsigned integers. */
function isUintArray(arg) {
    return Array.isArray(arg) && arg.every(a => isUint(a));
}
exports.isUintArray = isUintArray;
//</editor-fold>
//<editor-fold desc="Objects">
/** Checks whether the given argument is an object - excluding `null` and `array`. */
function isDataObject(arg) {
    return typeof arg === "object" &&
        !Array.isArray(arg) &&
        arg !== null &&
        !isBinaryData(arg);
}
exports.isDataObject = isDataObject;
function isBinaryData(arg) {
    return arg instanceof ArrayBuffer || // Catches `ArrayBuffer`
        ArrayBuffer.isView(arg); // Catches `DataView`, `Uint8Array`, etc.
}
exports.isBinaryData = isBinaryData;
//</editor-fold>
//<editor-fold desc="Misc">
/** Checks whether the given argument is `null` or `undefined`. */
function isNil(arg) {
    return arg === undefined || arg === null;
}
exports.isNil = isNil;
//</editor-fold>
//# sourceMappingURL=SdtfTypeGuards.js.map