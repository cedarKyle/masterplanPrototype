export declare enum SdtfPrimitiveTypeHintName {
    BOOLEAN = "boolean",
    CHAR = "char",
    COLOR = "color",
    DATA = "data",
    DECIMAL = "decimal",
    DOUBLE = "double",
    GUID = "guid",
    IMAGE = "image",
    INT8 = "int8",
    INT16 = "int16",
    INT32 = "int32",
    INT64 = "int64",
    SINGLE = "single",
    STRING = "string",
    UINT8 = "uint8",
    UINT16 = "uint16",
    UINT32 = "uint32",
    UINT64 = "uint64"
}
export declare enum SdtfGeometryTypeHintName {
    GEOMETRY_ARC = "geometry.arc",
    GEOMETRY_BOUNDING_BOX = "geometry.boundingbox",
    GEOMETRY_BOX = "geometry.box",
    GEOMETRY_CIRCLE = "geometry.circle",
    GEOMETRY_COMPLEX = "geometry.complex",
    GEOMETRY_CONE = "geometry.cone",
    GEOMETRY_CYLINDER = "geometry.cylinder",
    GEOMETRY_ELLIPSE = "geometry.ellipse",
    GEOMETRY_INTERVAL = "geometry.interval",
    GEOMETRY_INTERVAL2 = "geometry.interval2",
    GEOMETRY_LINE = "geometry.line",
    GEOMETRY_MATRIX = "geometry.matrix",
    GEOMETRY_PLANE = "geometry.plane",
    GEOMETRY_POINT = "geometry.point",
    GEOMETRY_POLYLINE = "geometry.polyline",
    GEOMETRY_RAY = "geometry.ray",
    GEOMETRY_RECTANGLE = "geometry.rectangle",
    GEOMETRY_SPHERE = "geometry.sphere",
    GEOMETRY_TORUS = "geometry.torus",
    GEOMETRY_TRANSFORM = "geometry.transform",
    GEOMETRY_VECTOR = "geometry.vector"
}
export declare enum SdtfGrasshopperTypeHintName {
    GRASSHOPPER_PATH = "grasshopper.path"
}
export declare enum SdtfRhinoTypeHintName {
    RHINO_ARC_CURVE = "rhino.arccurve",
    RHINO_BREP = "rhino.brep",
    RHINO_CURVE = "rhino.curve",
    RHINO_EXTRUSION = "rhino.extrusion",
    RHINO_LINE_CURVE = "rhino.linecurve",
    RHINO_MESH = "rhino.mesh",
    RHINO_NURBS_CURVE = "rhino.nurbscurve",
    RHINO_NURBS_SURFACE = "rhino.nurbssurface",
    RHINO_PLANE_SURFACE = "rhino.planesurface",
    RHINO_POINT = "rhino.point",
    RHINO_POLY_CURVE = "rhino.polycurve",
    RHINO_POLYLINE_CURVE = "rhino.polylinecurve",
    RHINO_REV_SURFACE = "rhino.revsurface",
    RHINO_SUBD = "rhino.subd",
    RHINO_SURFACE = "rhino.surface"
}
/** Holds all supported type hints. */
export declare const SdtfTypeHintName: {
    RHINO_ARC_CURVE: SdtfRhinoTypeHintName.RHINO_ARC_CURVE;
    RHINO_BREP: SdtfRhinoTypeHintName.RHINO_BREP;
    RHINO_CURVE: SdtfRhinoTypeHintName.RHINO_CURVE;
    RHINO_EXTRUSION: SdtfRhinoTypeHintName.RHINO_EXTRUSION;
    RHINO_LINE_CURVE: SdtfRhinoTypeHintName.RHINO_LINE_CURVE;
    RHINO_MESH: SdtfRhinoTypeHintName.RHINO_MESH;
    RHINO_NURBS_CURVE: SdtfRhinoTypeHintName.RHINO_NURBS_CURVE;
    RHINO_NURBS_SURFACE: SdtfRhinoTypeHintName.RHINO_NURBS_SURFACE;
    RHINO_PLANE_SURFACE: SdtfRhinoTypeHintName.RHINO_PLANE_SURFACE;
    RHINO_POINT: SdtfRhinoTypeHintName.RHINO_POINT;
    RHINO_POLY_CURVE: SdtfRhinoTypeHintName.RHINO_POLY_CURVE;
    RHINO_POLYLINE_CURVE: SdtfRhinoTypeHintName.RHINO_POLYLINE_CURVE;
    RHINO_REV_SURFACE: SdtfRhinoTypeHintName.RHINO_REV_SURFACE;
    RHINO_SUBD: SdtfRhinoTypeHintName.RHINO_SUBD;
    RHINO_SURFACE: SdtfRhinoTypeHintName.RHINO_SURFACE;
    GRASSHOPPER_PATH: SdtfGrasshopperTypeHintName.GRASSHOPPER_PATH;
    GEOMETRY_ARC: SdtfGeometryTypeHintName.GEOMETRY_ARC;
    GEOMETRY_BOUNDING_BOX: SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX;
    GEOMETRY_BOX: SdtfGeometryTypeHintName.GEOMETRY_BOX;
    GEOMETRY_CIRCLE: SdtfGeometryTypeHintName.GEOMETRY_CIRCLE;
    GEOMETRY_COMPLEX: SdtfGeometryTypeHintName.GEOMETRY_COMPLEX;
    GEOMETRY_CONE: SdtfGeometryTypeHintName.GEOMETRY_CONE;
    GEOMETRY_CYLINDER: SdtfGeometryTypeHintName.GEOMETRY_CYLINDER;
    GEOMETRY_ELLIPSE: SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE;
    GEOMETRY_INTERVAL: SdtfGeometryTypeHintName.GEOMETRY_INTERVAL;
    GEOMETRY_INTERVAL2: SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2;
    GEOMETRY_LINE: SdtfGeometryTypeHintName.GEOMETRY_LINE;
    GEOMETRY_MATRIX: SdtfGeometryTypeHintName.GEOMETRY_MATRIX;
    GEOMETRY_PLANE: SdtfGeometryTypeHintName.GEOMETRY_PLANE;
    GEOMETRY_POINT: SdtfGeometryTypeHintName.GEOMETRY_POINT;
    GEOMETRY_POLYLINE: SdtfGeometryTypeHintName.GEOMETRY_POLYLINE;
    GEOMETRY_RAY: SdtfGeometryTypeHintName.GEOMETRY_RAY;
    GEOMETRY_RECTANGLE: SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE;
    GEOMETRY_SPHERE: SdtfGeometryTypeHintName.GEOMETRY_SPHERE;
    GEOMETRY_TORUS: SdtfGeometryTypeHintName.GEOMETRY_TORUS;
    GEOMETRY_TRANSFORM: SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM;
    GEOMETRY_VECTOR: SdtfGeometryTypeHintName.GEOMETRY_VECTOR;
    BOOLEAN: SdtfPrimitiveTypeHintName.BOOLEAN;
    CHAR: SdtfPrimitiveTypeHintName.CHAR;
    COLOR: SdtfPrimitiveTypeHintName.COLOR;
    DATA: SdtfPrimitiveTypeHintName.DATA;
    DECIMAL: SdtfPrimitiveTypeHintName.DECIMAL;
    DOUBLE: SdtfPrimitiveTypeHintName.DOUBLE;
    GUID: SdtfPrimitiveTypeHintName.GUID;
    IMAGE: SdtfPrimitiveTypeHintName.IMAGE;
    INT8: SdtfPrimitiveTypeHintName.INT8;
    INT16: SdtfPrimitiveTypeHintName.INT16;
    INT32: SdtfPrimitiveTypeHintName.INT32;
    INT64: SdtfPrimitiveTypeHintName.INT64;
    SINGLE: SdtfPrimitiveTypeHintName.SINGLE;
    STRING: SdtfPrimitiveTypeHintName.STRING;
    UINT8: SdtfPrimitiveTypeHintName.UINT8;
    UINT16: SdtfPrimitiveTypeHintName.UINT16;
    UINT32: SdtfPrimitiveTypeHintName.UINT32;
    UINT64: SdtfPrimitiveTypeHintName.UINT64;
};
export declare type SdtfTypeHintName = typeof SdtfTypeHintName[keyof typeof SdtfTypeHintName];
//# sourceMappingURL=SdtfShapeDiverTypeHints.d.ts.map