"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightEngine = void 0;
const tsyringe_1 = require("tsyringe");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const AmbientLight_1 = require("./types/AmbientLight");
const DirectionalLight_1 = require("./types/DirectionalLight");
const HemisphereLight_1 = require("./types/HemisphereLight");
const PointLight_1 = require("./types/PointLight");
const SpotLight_1 = require("./types/SpotLight");
const LightScene_1 = require("./LightScene");
const ILight_1 = require("../interface/ILight");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
class LightEngine {
    // #endregion Properties (6)
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        // #region Properties (6)
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._lightNode = new viewer_shared_node_tree_1.TreeNode('lights');
        this._tree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this._uuidGenerator = tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator);
        this._lightScenes = {};
        this._tree.root.addChild(this._lightNode);
        this._lightNode.restrictViewports = [this._renderingEngine.id];
    }
    // #endregion Constructors (1)
    // #region Public Accessors (2)
    get lightScene() {
        return this._lightScene;
    }
    get lightScenes() {
        return this._lightScenes;
    }
    get update() {
        return this._update;
    }
    set update(value) {
        this._update = value;
    }
    // #endregion Public Accessors (2)
    // #region Public Methods (6)
    applySettings(settingsEngine) {
        this._lightScenes = {};
        for (let lightSceneId in settingsEngine.light.lightScenes) {
            const lightSceneUUID = this._uuidGenerator.validate(lightSceneId) ? lightSceneId : this._uuidGenerator.create();
            const lightSceneName = settingsEngine.light.lightScenes[lightSceneId].name ? settingsEngine.light.lightScenes[lightSceneId].name : lightSceneId;
            const ls = new LightScene_1.LightScene(this._renderingEngine, { id: lightSceneUUID, name: lightSceneName });
            for (let lightId in settingsEngine.light.lightScenes[lightSceneId].lights) {
                const lightUUID = this._uuidGenerator.validate(lightId) ? lightId : this._uuidGenerator.create();
                const light = settingsEngine.light.lightScenes[lightSceneId].lights[lightId];
                let l;
                switch (light.type) {
                    case ILight_1.LIGHT_TYPE.DIRECTIONAL:
                        l = new DirectionalLight_1.DirectionalLight({
                            color: this._converter.toColor(light.properties.color),
                            intensity: light.properties.intensity,
                            direction: this._converter.toVec3(light.properties.direction),
                            castShadow: light.properties.castShadow,
                            name: light.name ? light.name : lightId,
                            order: light.order,
                            id: lightUUID
                        });
                        break;
                    case ILight_1.LIGHT_TYPE.HEMISPHERE:
                        l = new HemisphereLight_1.HemisphereLight({
                            color: this._converter.toColor(light.properties.skyColor),
                            intensity: light.properties.intensity,
                            groundColor: this._converter.toColor(light.properties.groundColor),
                            name: light.name ? light.name : lightId,
                            order: light.order,
                            id: lightUUID
                        });
                        break;
                    case ILight_1.LIGHT_TYPE.POINT:
                        l = new PointLight_1.PointLight({
                            color: this._converter.toColor(light.properties.color),
                            intensity: light.properties.intensity,
                            position: this._converter.toVec3(light.properties.position),
                            distance: light.properties.distance,
                            decay: light.properties.decay,
                            name: light.name ? light.name : lightId,
                            order: light.order,
                            id: lightUUID
                        });
                        break;
                    case ILight_1.LIGHT_TYPE.SPOT:
                        l = new SpotLight_1.SpotLight({
                            color: this._converter.toColor(light.properties.color),
                            intensity: light.properties.intensity,
                            position: this._converter.toVec3(light.properties.position),
                            target: this._converter.toVec3(light.properties.target),
                            distance: light.properties.distance,
                            decay: light.properties.decay,
                            angle: light.properties.angle,
                            penumbra: light.properties.penumbra,
                            name: light.name ? light.name : lightId,
                            order: light.order,
                            id: lightUUID
                        });
                        break;
                    case ILight_1.LIGHT_TYPE.AMBIENT:
                    default:
                        l = new AmbientLight_1.AmbientLight({
                            color: this._converter.toColor(light.properties.color),
                            intensity: light.properties.intensity,
                            name: light.name ? light.name : lightId,
                            order: light.order,
                            id: lightUUID
                        });
                }
                ls.addLight(l);
            }
            this._lightScenes[ls.id] = ls;
        }
        // there is a light scene but no id is saved (old viewer)
        if (settingsEngine.light.lightSceneId === undefined && Object.values(settingsEngine.light.lightScenes).length > 0) {
            const res = this.assignLightScene(Object.keys(settingsEngine.light.lightScenes)[0]);
            if (res === false) {
                const ls = this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });
                ls.addLight(new AmbientLight_1.AmbientLight({ color: '#ffffff', intensity: 0.5, name: 'ambient0' }));
                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.75, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));
                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.35, direction: gl_matrix_1.vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1' }));
                this._lightScenes[ls.id] = ls;
            }
        } // there is no standard light scene in the light scenes, but a light scene name is specified (old viewer)
        else if (settingsEngine.light.lightSceneId) {
            const res = this.assignLightScene(settingsEngine.light.lightSceneId);
            if (res === false) {
                const ls = this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });
                ls.addLight(new AmbientLight_1.AmbientLight({ color: '#ffffff', intensity: 0.5, name: 'ambient0' }));
                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.75, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));
                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.35, direction: gl_matrix_1.vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1' }));
                this._lightScenes[ls.id] = ls;
            }
        }
        if (this._update)
            this._update();
    }
    assignLightScene(id) {
        if (!this._lightScenes[id]) {
            for (let lightSceneId in this._lightScenes) {
                const lightScene = this._lightScenes[lightSceneId];
                const lightSceneName = lightScene.name || lightSceneId;
                if (lightSceneName === id) {
                    const res = this.assignLightScene(lightSceneId);
                    return res;
                }
            }
            return false;
        }
        this._lightScene = this._lightScenes[id];
        while (this._lightNode.children.length > 0)
            this._lightNode.removeChild(this._lightNode.children[0]);
        this._lightNode.addChild(this._lightScene.node);
        this._lightNode.updateVersion();
        return true;
    }
    close() {
        this._tree.root.removeChild(this._lightNode);
    }
    createLightScene(properties) {
        const lightSceneId = this._uuidGenerator.create();
        const lightScene = new LightScene_1.LightScene(this._renderingEngine, { id: lightSceneId, name: properties.name });
        if (properties.standard === true) {
            lightScene.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 2.5, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));
            lightScene.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 1, direction: gl_matrix_1.vec3.fromValues(-.5774, -.5774, .5774), castShadow: false, name: 'directional1' }));
        }
        this._lightScenes[lightSceneId] = lightScene;
        this._lightScene = lightScene;
        while (this._lightNode.children.length > 0)
            this._lightNode.removeChild(this._lightNode.children[0]);
        this._lightNode.addChild(this._lightScene.node);
        this._lightNode.updateVersion();
        if (this._update)
            this._update();
        return lightScene;
    }
    removeLightScene(id) {
        if (!this._lightScenes[id]) {
            for (let lightSceneId in this._lightScenes) {
                const lightScene = this._lightScenes[lightSceneId];
                const lightSceneName = lightScene.name || lightSceneId;
                if (lightSceneName === id) {
                    const res = this.removeLightScene(lightSceneId);
                    return res;
                }
            }
            return false;
        }
        if (this._lightScene && this._lightScene.id === id)
            this._lightScene = undefined;
        delete this._lightScenes[id];
        while (this._lightNode.children.length > 0)
            this._lightNode.removeChild(this._lightNode.children[0]);
        this._lightNode.updateVersion();
        if (this._update)
            this._update();
        return true;
    }
    saveSettings(settingsEngine) {
        settingsEngine.light.lightSceneId = this.lightScene ? this.lightScene.id : undefined;
        const converted = {};
        for (let lightSceneId in this._lightScenes) {
            const lightScene = this._lightScenes[lightSceneId];
            const lightSceneName = lightScene.name || lightSceneId;
            converted[lightSceneId] = {
                name: lightSceneName,
                lights: {}
            };
            for (let lightId in lightScene.lights) {
                const light = lightScene.lights[lightId];
                let properties;
                switch (light.type) {
                    case ILight_1.LIGHT_TYPE.DIRECTIONAL:
                        properties = {
                            color: light.color,
                            intensity: light.intensity,
                            direction: { x: light.direction[0], y: light.direction[1], z: light.direction[2] },
                            castShadow: light.castShadow,
                            shadowMapResolution: light.shadowMapResolution,
                            shadowMapBias: light.shadowMapBias
                        };
                        break;
                    case ILight_1.LIGHT_TYPE.HEMISPHERE:
                        properties = {
                            skyColor: light.color,
                            intensity: light.intensity,
                            groundColor: light.groundColor
                        };
                        break;
                    case ILight_1.LIGHT_TYPE.POINT:
                        properties = {
                            color: light.color,
                            intensity: light.intensity,
                            position: { x: light.position[0], y: light.position[1], z: light.position[2] },
                            distance: light.distance,
                            decay: light.decay
                        };
                        break;
                    case ILight_1.LIGHT_TYPE.SPOT:
                        properties = {
                            color: light.color,
                            intensity: light.intensity,
                            position: { x: light.position[0], y: light.position[1], z: light.position[2] },
                            target: { x: light.target[0], y: light.target[1], z: light.target[2] },
                            distance: light.distance,
                            decay: light.decay,
                            angle: light.angle,
                            penumbra: light.penumbra
                        };
                        break;
                    case ILight_1.LIGHT_TYPE.AMBIENT:
                    default:
                        properties = {
                            color: light.color,
                            intensity: light.intensity
                        };
                }
                converted[lightSceneId].lights[lightId] = {
                    name: light.name,
                    type: light.type,
                    properties
                };
                if (light.order !== undefined)
                    converted[lightSceneId].lights[lightId].order = light.order;
            }
        }
        settingsEngine.light.lightScenes = converted;
    }
}
exports.LightEngine = LightEngine;
//# sourceMappingURL=LightEngine.js.map