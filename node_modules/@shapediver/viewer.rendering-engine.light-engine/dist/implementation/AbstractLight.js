"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractLight_type, _AbstractLight_color, _AbstractLight_intensity, _AbstractLight_name, _AbstractLight_order, _AbstractLight_useNodeData;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractLight = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const tsyringe_1 = require("tsyringe");
class AbstractLight extends viewer_shared_node_tree_1.AbstractTreeNodeData {
    // #endregion Properties (6)
    // #region Constructors (1)
    constructor(properties) {
        super(properties.id);
        // #region Properties (6)
        _AbstractLight_type.set(this, void 0);
        _AbstractLight_color.set(this, void 0);
        _AbstractLight_intensity.set(this, void 0);
        _AbstractLight_name.set(this, void 0);
        _AbstractLight_order.set(this, void 0);
        _AbstractLight_useNodeData.set(this, false);
        this._uuidGenerator = tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator);
        __classPrivateFieldSet(this, _AbstractLight_color, properties.color, "f");
        __classPrivateFieldSet(this, _AbstractLight_intensity, properties.intensity, "f");
        __classPrivateFieldSet(this, _AbstractLight_type, properties.type, "f");
        __classPrivateFieldSet(this, _AbstractLight_name, properties.name, "f");
        __classPrivateFieldSet(this, _AbstractLight_order, properties.order, "f");
    }
    // #endregion Constructors (1)
    // #region Public Accessors (9)
    get color() {
        return __classPrivateFieldGet(this, _AbstractLight_color, "f");
    }
    set color(value) {
        __classPrivateFieldSet(this, _AbstractLight_color, value, "f");
        this.updateVersion();
    }
    get intensity() {
        return __classPrivateFieldGet(this, _AbstractLight_intensity, "f");
    }
    set intensity(value) {
        __classPrivateFieldSet(this, _AbstractLight_intensity, value, "f");
        this.updateVersion();
    }
    get name() {
        return __classPrivateFieldGet(this, _AbstractLight_name, "f");
    }
    set name(value) {
        __classPrivateFieldSet(this, _AbstractLight_name, value, "f");
        this.updateVersion();
    }
    get order() {
        return __classPrivateFieldGet(this, _AbstractLight_order, "f");
    }
    set order(value) {
        __classPrivateFieldSet(this, _AbstractLight_order, value, "f");
        this.updateVersion();
    }
    get type() {
        return __classPrivateFieldGet(this, _AbstractLight_type, "f");
    }
    set useNodeData(value) {
        __classPrivateFieldSet(this, _AbstractLight_useNodeData, value, "f");
    }
    get useNodeData() {
        return __classPrivateFieldGet(this, _AbstractLight_useNodeData, "f");
    }
}
exports.AbstractLight = AbstractLight;
_AbstractLight_type = new WeakMap(), _AbstractLight_color = new WeakMap(), _AbstractLight_intensity = new WeakMap(), _AbstractLight_name = new WeakMap(), _AbstractLight_order = new WeakMap(), _AbstractLight_useNodeData = new WeakMap();
//# sourceMappingURL=AbstractLight.js.map