"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataEngine = void 0;
const tsyringe_1 = require("tsyringe");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const viewer_data_engine_geometry_engine_1 = require("@shapediver/viewer.data-engine.geometry-engine");
const viewer_data_engine_material_engine_1 = require("@shapediver/viewer.data-engine.material-engine");
const viewer_data_engine_sdtf_engine_1 = require("@shapediver/viewer.data-engine.sdtf-engine");
const viewer_data_engine_tag3d_engine_1 = require("@shapediver/viewer.data-engine.tag3d-engine");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_data_engine_html_element_anchor_engine_1 = require("@shapediver/viewer.data-engine.html-element-anchor-engine");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_node_tree_utils_1 = require("@shapediver/viewer.shared.node-tree-utils");
let DataEngine = class DataEngine {
    constructor() {
        // #region Properties (6)
        this._geometryEngine = tsyringe_1.container.resolve(viewer_data_engine_geometry_engine_1.GeometryEngine);
        this._htmlElementAnchorEngine = tsyringe_1.container.resolve(viewer_data_engine_html_element_anchor_engine_1.HTMLElementAnchorEngine);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._materialEngine = tsyringe_1.container.resolve(viewer_data_engine_material_engine_1.MaterialEngine);
        this._sdtfEngine = tsyringe_1.container.resolve(viewer_data_engine_sdtf_engine_1.SDTFEngine);
        this._tag3dEngine = tsyringe_1.container.resolve(viewer_data_engine_tag3d_engine_1.Tag3dEngine);
        // #endregion Public Methods (1)
    }
    // #endregion Properties (6)
    // #region Public Methods (1)
    loadContent(content, jwtToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!content || (content && !content.format)) {
                const error = new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('DataEngine cannot load content.');
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `DataEngine.loadContent`, error);
            }
            try {
                let node;
                if (content.format === 'glb' || content.format === 'gltf') {
                    node = yield this._geometryEngine.loadContent(content);
                }
                else if (content.format === 'material') {
                    node = yield this._materialEngine.loadContent(content);
                }
                else if (content.format === 'tag2d' || content.format === 'anchor') {
                    node = yield this._htmlElementAnchorEngine.loadContent(content);
                }
                else if (content.format === 'tag3d') {
                    node = yield this._tag3dEngine.loadContent(content);
                }
                else if (content.format === 'sdtf') {
                    node = yield this._sdtfEngine.loadContent(content, jwtToken);
                }
                else {
                    node = new viewer_shared_node_tree_1.TreeNode('custom');
                    node.data.push(new viewer_shared_types_1.CustomData(Object.assign({}, content)));
                }
                const transformationNode = new viewer_shared_node_tree_1.TreeNode('transformation');
                if (content.transformations && Array.isArray(content.transformations)) {
                    for (let i = 0; i < content.transformations.length; i++) {
                        const t = content.transformations[i];
                        if (Array.isArray(t) && t.length === 16) {
                            const nodeInstance = node.clone();
                            nodeInstance.transformations = [{
                                    id: 'content_' + i,
                                    matrix: gl_matrix_1.mat4.fromValues(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15])
                                }].concat(node.transformations);
                            transformationNode.updateVersion();
                            transformationNode.addChild(nodeInstance);
                            viewer_shared_node_tree_utils_1.NodeTreeUtils.cloneSkinData(node, nodeInstance);
                        }
                    }
                }
                else {
                    transformationNode.addChild(node);
                }
                return transformationNode;
            }
            catch (e) {
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.DATA_PROCESSING, `DataEngine.loadContent`, e);
            }
        });
    }
};
DataEngine = __decorate([
    (0, tsyringe_1.singleton)()
], DataEngine);
exports.DataEngine = DataEngine;
//# sourceMappingURL=DataEngine.js.map