"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverRequestModelComputationQueryType = exports.ShapeDiverRequestModelComputationQueryStatus = exports.ShapeDiverRequestModelComputationQueryOrder = exports.ShapeDiverRequestGltfUploadQueryConversion = exports.ShapeDiverRequestLogMessageLevel = exports.ShapeDiverRequestTicketType = void 0;
const SdCommonsTicket_1 = require("../commons/SdCommonsTicket");
/**
 * @swagger {components.schemas} RequestTicketType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicketType" }
     ]
   }
 */
/** */
exports.ShapeDiverRequestTicketType = Object.assign({}, SdCommonsTicket_1.ShapeDiverCommonsTicketType);
/**
 * @swagger {components.schemas} RequestLogMessageLevel {
     "description": "Log message level for log requests.",
     "type": "string",
     "enum": [ 0, 1, 2 ]
   }
 */
/** Log message level for log requests. */
var ShapeDiverRequestLogMessageLevel;
(function (ShapeDiverRequestLogMessageLevel) {
    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel["INFO"] = 0] = "INFO";
    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel["WARNING"] = 1] = "WARNING";
    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel["ERROR"] = 2] = "ERROR";
})(ShapeDiverRequestLogMessageLevel = exports.ShapeDiverRequestLogMessageLevel || (exports.ShapeDiverRequestLogMessageLevel = {}));
/**
 * @swagger {components.schemas} RequestGltfUploadQueryConversion {
     "description": "Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>.",
     "type": "string",
     "enum": [ "none", "scene", "usdz" ]
   }
 */
/** Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>. */
var ShapeDiverRequestGltfUploadQueryConversion;
(function (ShapeDiverRequestGltfUploadQueryConversion) {
    ShapeDiverRequestGltfUploadQueryConversion["NONE"] = "none";
    ShapeDiverRequestGltfUploadQueryConversion["SCENE"] = "scene";
    ShapeDiverRequestGltfUploadQueryConversion["USDZ"] = "usdz";
})(ShapeDiverRequestGltfUploadQueryConversion = exports.ShapeDiverRequestGltfUploadQueryConversion || (exports.ShapeDiverRequestGltfUploadQueryConversion = {}));
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryOrder {
     "description": "Query values of a model computation statistics request.<br/>Specifies the order of the results.",
     "type": "string",
     "enum": [ "asc", "desc" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Specifies the order of the results. */
var ShapeDiverRequestModelComputationQueryOrder;
(function (ShapeDiverRequestModelComputationQueryOrder) {
    ShapeDiverRequestModelComputationQueryOrder["ASC"] = "asc";
    ShapeDiverRequestModelComputationQueryOrder["DESC"] = "desc";
})(ShapeDiverRequestModelComputationQueryOrder = exports.ShapeDiverRequestModelComputationQueryOrder || (exports.ShapeDiverRequestModelComputationQueryOrder = {}));
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryStatus {
     "description": "Query values of a model computation statistics request.<br/>Filter by status.",
     "type": "string",
     "enum": [ "success", "timeout", "other", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by status. */
var ShapeDiverRequestModelComputationQueryStatus;
(function (ShapeDiverRequestModelComputationQueryStatus) {
    ShapeDiverRequestModelComputationQueryStatus["SUCCESS"] = "success";
    ShapeDiverRequestModelComputationQueryStatus["TIMEOUT"] = "timeout";
    ShapeDiverRequestModelComputationQueryStatus["OTHER"] = "other";
    ShapeDiverRequestModelComputationQueryStatus["ALL"] = "*";
})(ShapeDiverRequestModelComputationQueryStatus = exports.ShapeDiverRequestModelComputationQueryStatus || (exports.ShapeDiverRequestModelComputationQueryStatus = {}));
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryType {
     "description": "Query values of a model computation statistics request.<br/>Filter by computation or export request.",
     "type": "string",
     "enum": [ "computation", "export", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by computation or export request. */
var ShapeDiverRequestModelComputationQueryType;
(function (ShapeDiverRequestModelComputationQueryType) {
    ShapeDiverRequestModelComputationQueryType["COMPUTATION"] = "computation";
    ShapeDiverRequestModelComputationQueryType["EXPORT"] = "export";
    ShapeDiverRequestModelComputationQueryType["ALL"] = "*";
})(ShapeDiverRequestModelComputationQueryType = exports.ShapeDiverRequestModelComputationQueryType || (exports.ShapeDiverRequestModelComputationQueryType = {}));
//# sourceMappingURL=SdRequestDto.js.map