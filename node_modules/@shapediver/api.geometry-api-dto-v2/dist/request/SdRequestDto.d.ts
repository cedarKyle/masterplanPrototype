import { ShapeDiverCommonsTicket, ShapeDiverCommonsTicketType } from "../commons/SdCommonsTicket";
/**
 * @swagger {components.schemas} RequestTicketType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicketType" }
     ]
   }
 */
/** */
export declare const ShapeDiverRequestTicketType: {
    BACKEND: ShapeDiverCommonsTicketType.BACKEND;
    NONE: ShapeDiverCommonsTicketType.NONE;
};
export declare type ShapeDiverRequestTicketType = typeof ShapeDiverRequestTicketType[keyof typeof ShapeDiverRequestTicketType];
/**
 * @swagger {components.schemas} RequestTicket {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicket" },
       {
         "description": "Body of a ticket request.",
         "type": "object"
       }
     ]
   }
 */
/** Body of a ticket request. */
export interface ShapeDiverRequestTicket extends ShapeDiverCommonsTicket {
    /**
     * @swagger {components.schemas.RequestTicket.properties} type {
         "description": "The type of the ticket.",
         "$ref": "#/components/schemas/RequestTicketType"
       }
     * @swagger {components.schemas.RequestTicket} required [ "type" ]
     */
    /** The type of the ticket. */
    type: ShapeDiverRequestTicketType;
}
/**
 * @swagger {components.schemas} RequestAnalyticsModelPart {
     "description": "Parameters of a single model-session analytics request. When multiple model IDs or timestamps are requested, the resulting response-item represents an aggregation of the requested data.",
     "type": "object"
   }
 */
/** Parameters of a single model-session analytics request. When multiple model IDs or timestamps are requested, the resulting response-item represents an aggregation of the requested data. */
export interface ShapeDiverRequestAnalyticsModelPart {
    /**
     * @swagger {components.schemas.RequestAnalyticsModelPart.properties} modelid {
         "oneOf": [
           {
             "description": "A single model ID.",
             "type": "string"
           },
           {
             "description": "Multiple model IDs are aggregated and result in a single statistic object.",
             "type": "array",
             "items": { "type": "string" }
           }
         ]
       }
     * @swagger {components.schemas.RequestAnalyticsModelPart} required [ "modelid" ]
     */
    /** Either a single or multiple model IDs. Multiple model IDs are aggregated and result in a single statistic object. */
    modelid: string | string[];
    /**
     * @swagger {components.schemas.RequestAnalyticsModelPart.properties} timestamp {
         "oneOf": [
           {
             "description": "A single timestamp.",
             "type": "string",
             "pattern": "^\\d{4}(?:\\d{2})?(?:\\d{2})?(?:\\d{2})?$",
             "examples": {
               "year": {
                 "value": "2021",
                 "summary": "YYYY"
               },
               "year-month": {
                 "value": "202112",
                 "summary": "YYYYMM"
               },
               "year-month-day": {
                 "value": "20211225",
                 "summary": "YYYYMMDD"
               },
               "year-month-day-hour": {
                 "value": "2021122514",
                 "summary": "YYYYMMDDhh"
               }
             }
           },
           {
             "description": "Multiple timestamps are aggregated and result in a single statistic object.",
             "type": "array",
             "items": { "type": "string" },
             "pattern": "^\\d{4}(?:\\d{2})?(?:\\d{2})?(?:\\d{2})?$",
             "examples": {
               "mixed": {
                 "value": "['2021', '2022010101']"
               }
             }
           }
         ]
       }
     */
    /** Either a single or multiple timestamps. Multiple timestamps are aggregated and result in a single statistic object. */
    timestamp?: string | string[];
    /**
     * @swagger {components.schemas.RequestAnalyticsModelPart.properties} timestamp_from {
         "description": "Allows to define the beginning of a time range, instead of specifying individual timestamps.",
         "type": "string",
         "pattern": "^\\d{4}(?:\\d{2})?(?:\\d{2})?(?:\\d{2})?$",
         "examples": {
           "year": {
             "value": "2021",
             "summary": "YYYY"
           },
           "year-month": {
             "value": "202112",
             "summary": "YYYYMM"
           },
           "year-month-day": {
             "value": "20211225",
             "summary": "YYYYMMDD"
           },
           "year-month-day-hour": {
             "value": "2021122514",
             "summary": "YYYYMMDDhh"
           }
         }
       }
     */
    /** Allows to define the beginning of a time range, instead of specifying individual timestamps. */
    timestamp_from?: string;
    /**
     * @swagger {components.schemas.RequestAnalyticsModelPart.properties} timestamp_to {
         "description": "Allows to define the ending of a time range, instead of specifying individual timestamps.",
         "type": "string",
         "pattern": "^\\d{4}(?:\\d{2})?(?:\\d{2})?(?:\\d{2})?$",
         "examples": {
           "year": {
             "value": "2021",
             "summary": "YYYY"
           },
           "year-month": {
             "value": "202112",
             "summary": "YYYYMM"
           },
           "year-month-day": {
             "value": "20211225",
             "summary": "YYYYMMDD"
           },
           "year-month-day-hour": {
             "value": "2021122514",
             "summary": "YYYYMMDDhh"
           }
         }
       }
     */
    /** Allows to define the ending of a time range, instead of specifying individual timestamps. */
    timestamp_to?: string;
}
/**
 * @swagger {components.schemas} RequestAnalyticsModel {
     "description": "Body of a model statistics request. Every request-item results in exactly one response-item, whereby the order of response-items corresponds to the order of the request-items.",
     "type": "object",
     "properties": {
       "parameters": {
         "type": "array",
           "items": {
             "$ref": "#/components/schemas/RequestAnalyticsModelPart"
           }
         }
     }
   }
 */
/** Body of a model statistics request. Every request-item results in exactly one response-item, whereby the order of response-items corresponds to the order of the request-items. */
export declare type ShapeDiverRequestAnalyticsModel = {
    "parameters": ShapeDiverRequestAnalyticsModelPart[];
};
/**
 * @swagger {components.schemas} RequestConfigure {
     "description": "Body of a configure request."
   }
 */
/** Body of a configure request. */
export declare type ShapeDiverRequestConfigure = {
    [key: string]: any;
};
/**
 * @swagger {components.schemas} RequestLogMessageLevel {
     "description": "Log message level for log requests.",
     "type": "string",
     "enum": [ 0, 1, 2 ]
   }
 */
/** Log message level for log requests. */
export declare enum ShapeDiverRequestLogMessageLevel {
    INFO = 0,
    WARNING = 1,
    ERROR = 2
}
/**
 * @swagger {components.schemas} RequestLogMessage {
     "description": "Body of a log message request.",
     "type": "object"
   }
 */
/** Body of a log message request. */
export interface ShapeDiverRequestLogMessage {
    /**
     * @swagger {components.schemas.RequestLogMessage.properties} level {
         "$ref": "#/components/schemas/RequestLogMessageLevel"
       }
     * @swagger {components.schemas.RequestLogMessage} required [ "level" ]
     */
    /** */
    level: ShapeDiverRequestLogMessageLevel;
    /**
     * @swagger {components.schemas.RequestLogMessage.properties} message {
         "description": "The message that should be logged.",
         "type": "string"
       }
     * @swagger {components.schemas.RequestLogMessage} required [ "message" ]
     */
    /** The message that should be logged. */
    message: string;
}
/**
 * @swagger {components.schemas} RequestAuthorizationGroup {
     "description": "Body of an authorization group request.",
     "type": "object"
   }
 */
/** Body of an authorization group request. */
export interface ShapeDiverRequestAuthorizationGroup {
    /**
     * @swagger {components.schemas.RequestAuthorizationGroup.properties} models {
         "description": "The model IDs that should form the new authorization group.",
         "type": "array",
         "items": { "type": "string", "format": "uuid" }
       }
     * @swagger {components.schemas.RequestAuthorizationGroup} required [ "models" ]
     */
    /** The model IDs that should form the new authorization group. */
    models: string[];
}
/**
 * @swagger {components.schemas} RequestGltfUploadQueryConversion {
     "description": "Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>.",
     "type": "string",
     "enum": [ "none", "scene", "usdz" ]
   }
 */
/** Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>. */
export declare enum ShapeDiverRequestGltfUploadQueryConversion {
    NONE = "none",
    SCENE = "scene",
    USDZ = "usdz"
}
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryOrder {
     "description": "Query values of a model computation statistics request.<br/>Specifies the order of the results.",
     "type": "string",
     "enum": [ "asc", "desc" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Specifies the order of the results. */
export declare enum ShapeDiverRequestModelComputationQueryOrder {
    ASC = "asc",
    DESC = "desc"
}
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryStatus {
     "description": "Query values of a model computation statistics request.<br/>Filter by status.",
     "type": "string",
     "enum": [ "success", "timeout", "other", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by status. */
export declare enum ShapeDiverRequestModelComputationQueryStatus {
    SUCCESS = "success",
    TIMEOUT = "timeout",
    OTHER = "other",
    ALL = "*"
}
/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryType {
     "description": "Query values of a model computation statistics request.<br/>Filter by computation or export request.",
     "type": "string",
     "enum": [ "computation", "export", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by computation or export request. */
export declare enum ShapeDiverRequestModelComputationQueryType {
    COMPUTATION = "computation",
    EXPORT = "export",
    ALL = "*"
}
//# sourceMappingURL=SdRequestDto.d.ts.map