"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PointLightApi_light, _PointLightApi_inputValidator, _PointLightApi_logger, _PointLightApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PointLightApi = void 0;
const AbstractLightApi_1 = require("../AbstractLightApi");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
class PointLightApi extends AbstractLightApi_1.AbstractLightApi {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(viewportApi, light) {
        super(viewportApi, light);
        // #region Properties (4)
        _PointLightApi_light.set(this, void 0);
        _PointLightApi_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _PointLightApi_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _PointLightApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _PointLightApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _PointLightApi_light, light, "f");
        this.scope = 'PointLightApi';
    }
    // #endregion Constructors (1)
    // #region Public Accessors (6)
    get decay() {
        return __classPrivateFieldGet(this, _PointLightApi_light, "f").decay;
    }
    set decay(value) {
        const scope = 'decay';
        try {
            __classPrivateFieldGet(this, _PointLightApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PointLightApi_light, "f").decay = value;
            __classPrivateFieldGet(this, _PointLightApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PointLightApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PointLightApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, e);
        }
    }
    get distance() {
        return __classPrivateFieldGet(this, _PointLightApi_light, "f").distance;
    }
    set distance(value) {
        const scope = 'distance';
        try {
            __classPrivateFieldGet(this, _PointLightApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PointLightApi_light, "f").distance = value;
            __classPrivateFieldGet(this, _PointLightApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PointLightApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PointLightApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, e);
        }
    }
    get position() {
        return __classPrivateFieldGet(this, _PointLightApi_light, "f").position;
    }
    set position(value) {
        const scope = 'position';
        try {
            __classPrivateFieldGet(this, _PointLightApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _PointLightApi_light, "f").position = value;
            __classPrivateFieldGet(this, _PointLightApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PointLightApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PointLightApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.LIGHT, `${this.scope}.${scope}`, e);
        }
    }
}
exports.PointLightApi = PointLightApi;
_PointLightApi_light = new WeakMap(), _PointLightApi_inputValidator = new WeakMap(), _PointLightApi_logger = new WeakMap(), _PointLightApi_viewportApi = new WeakMap();
//# sourceMappingURL=PointLightApi.js.map