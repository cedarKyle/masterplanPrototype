"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ViewportApi_renderingEngine, _ViewportApi_creationControlCenter, _ViewportApi_converter, _ViewportApi_gltfConverter, _ViewportApi_inputValidator, _ViewportApi_logger, _ViewportApi_systemInfo, _ViewportApi_cameras, _ViewportApi_lightScenes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewportApi = void 0;
const gl_matrix_1 = require("gl-matrix");
const tsyringe_1 = require("tsyringe");
const viewer_main_creation_control_center_1 = require("@shapediver/viewer.main.creation-control-center");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
const PerspectiveCameraApi_1 = require("./camera/PerspectiveCameraApi");
const OrthographicCameraApi_1 = require("./camera/OrthographicCameraApi");
const LightSceneApi_1 = require("./lights/LightSceneApi");
const viewer_data_engine_gltf_converter_1 = require("@shapediver/viewer.data-engine.gltf-converter");
const sdk_geometry_api_sdk_v2_1 = require("@shapediver/sdk.geometry-api-sdk-v2");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const main_1 = require("../../main");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const QRCode = __importStar(require("qrcode"));
class ViewportApi {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor(renderingEngine) {
        // #region Properties (5)
        _ViewportApi_renderingEngine.set(this, void 0);
        _ViewportApi_creationControlCenter.set(this, tsyringe_1.container.resolve(viewer_main_creation_control_center_1.CreationControlCenter));
        _ViewportApi_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _ViewportApi_gltfConverter.set(this, tsyringe_1.container.resolve(viewer_data_engine_gltf_converter_1.GLTFConverter));
        _ViewportApi_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _ViewportApi_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _ViewportApi_systemInfo.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SystemInfo));
        _ViewportApi_cameras.set(this, {});
        _ViewportApi_lightScenes.set(this, {});
        __classPrivateFieldSet(this, _ViewportApi_renderingEngine, renderingEngine, "f");
        // Whenever a camera is added or removed from the camera engine, this update is called.
        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.update = () => {
            for (let c in __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.cameras) {
                if (!__classPrivateFieldGet(this, _ViewportApi_cameras, "f")[c]) {
                    if (__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.cameras[c].type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE) {
                        __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[c] = new PerspectiveCameraApi_1.PerspectiveCameraApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.cameras[c]);
                    }
                    else {
                        __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[c] = new OrthographicCameraApi_1.OrthographicCameraApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.cameras[c]);
                    }
                }
            }
            for (let c in __classPrivateFieldGet(this, _ViewportApi_cameras, "f")) {
                if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.cameras[c]) {
                    delete __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[c];
                }
            }
        };
        // We call it once in the beginning to get the current state.
        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.update();
        // Whenever a camera is added or removed from the camera engine, this update is called.
        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.update = () => {
            for (let l in __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.lightScenes) {
                if (!__classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")[l]) {
                    __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")[l] = new LightSceneApi_1.LightSceneApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.lightScenes[l]);
                }
            }
            for (let l in __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")) {
                if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.lightScenes[l]) {
                    delete __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")[l];
                }
            }
        };
        // We call it once in the beginning to get the current state.
        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.update();
    }
    // #endregion Constructors (1)
    // #region Public Accessors (69)
    get ambientOcclusion() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").ambientOcclusion;
    }
    set ambientOcclusion(value) {
        const scope = 'ambientOcclusion';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").ambientOcclusion = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get ambientOcclusionIntensity() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").ambientOcclusionIntensity;
    }
    set ambientOcclusionIntensity(value) {
        const scope = 'ambientOcclusionIntensity';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").ambientOcclusionIntensity = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get animations() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").animations;
    }
    get arRotation() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arRotation;
    }
    set arRotation(value) {
        const scope = 'arRotation';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arRotation = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get arScale() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arScale;
    }
    set arScale(value) {
        const scope = 'arScale';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arScale = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get arTranslation() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arTranslation;
    }
    set arTranslation(value) {
        const scope = 'arTranslation';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").arTranslation = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get automaticResizing() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").automaticResizing;
    }
    set automaticResizing(value) {
        const scope = 'automaticResizing';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").automaticResizing = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get beautyRenderBlendingDuration() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").beautyRenderBlendingDuration;
    }
    set beautyRenderBlendingDuration(value) {
        const scope = 'beautyRenderBlendingDuration';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").beautyRenderBlendingDuration = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get beautyRenderDelay() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").beautyRenderDelay;
    }
    set beautyRenderDelay(value) {
        const scope = 'beautyRenderDelay';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").beautyRenderDelay = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get camera() {
        if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.camera)
            return null;
        return __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.camera.id];
    }
    get cameras() {
        return __classPrivateFieldGet(this, _ViewportApi_cameras, "f");
    }
    get canvas() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").canvas;
    }
    get clearAlpha() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").clearAlpha;
    }
    set clearAlpha(value) {
        const scope = 'clearAlpha';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").clearAlpha = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get clearColor() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").clearColor;
    }
    set clearColor(value) {
        const scope = 'clearColor';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'color');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").clearColor = __classPrivateFieldGet(this, _ViewportApi_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get enableAR() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").enableAR;
    }
    set enableAR(value) {
        const scope = 'enableAR';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").enableAR = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get environmentMap() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMap;
    }
    set environmentMap(value) {
        const scope = 'environmentMap';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'cubeMap');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMap = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get environmentMapAsBackground() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMapAsBackground;
    }
    set environmentMapAsBackground(value) {
        const scope = 'environmentMapAsBackground';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMapAsBackground = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get environmentMapResolution() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMapResolution;
    }
    set environmentMapResolution(value) {
        const scope = 'environmentMapResolution';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'string');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").environmentMapResolution = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get gridColor() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").gridColor;
    }
    set gridColor(value) {
        const scope = 'gridColor';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'color');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").gridColor = __classPrivateFieldGet(this, _ViewportApi_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get gridVisibility() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").gridVisibility;
    }
    set gridVisibility(value) {
        const scope = 'gridVisibility';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").gridVisibility = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get groundPlaneColor() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneColor;
    }
    set groundPlaneColor(value) {
        const scope = 'groundPlaneColor';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'color');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneColor = __classPrivateFieldGet(this, _ViewportApi_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get groundPlaneVisibility() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneVisibility;
    }
    set groundPlaneVisibility(value) {
        const scope = 'groundPlaneVisibility';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneVisibility = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get groundPlaneShadowColor() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneShadowColor;
    }
    set groundPlaneShadowColor(value) {
        const scope = 'groundPlaneShadowColor';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'color');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneShadowColor = __classPrivateFieldGet(this, _ViewportApi_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get groundPlaneShadowVisibility() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneShadowVisibility;
    }
    set groundPlaneShadowVisibility(value) {
        const scope = 'groundPlaneShadowVisibility';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").groundPlaneShadowVisibility = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get id() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").id;
    }
    get lights() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lights;
    }
    set lights(value) {
        const scope = 'lights';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lights = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get lightScene() {
        if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.lightScene)
            return null;
        return __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")[__classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.lightScene.id];
    }
    get lightScenes() {
        return __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f");
    }
    get outputEncoding() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").outputEncoding;
    }
    set outputEncoding(value) {
        const scope = 'outputEncoding';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").outputEncoding = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get physicallyCorrectLights() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").physicallyCorrectLights;
    }
    set physicallyCorrectLights(value) {
        const scope = 'physicallyCorrectLights';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").physicallyCorrectLights = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get pointSize() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").pointSize;
    }
    set pointSize(value) {
        const scope = 'pointSize';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").pointSize = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get sessionSettingsId() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").sessionSettingsId;
    }
    get sessionSettingsMode() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").sessionSettingsMode;
    }
    get shadows() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").shadows;
    }
    set shadows(value) {
        const scope = 'shadows';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").shadows = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get show() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").show;
    }
    set show(value) {
        const scope = 'show';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").show = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get showStatistics() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").showStatistics;
    }
    set showStatistics(value) {
        const scope = 'showStatistics';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").showStatistics = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get textureEncoding() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").textureEncoding;
    }
    set textureEncoding(value) {
        const scope = 'textureEncoding';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").textureEncoding = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get toneMapping() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").toneMapping;
    }
    set toneMapping(value) {
        const scope = 'toneMapping';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TONE_MAPPING));
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").toneMapping = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get toneMappingExposure() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").toneMappingExposure;
    }
    set toneMappingExposure(value) {
        const scope = 'toneMappingExposure';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").toneMappingExposure = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get type() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").type;
    }
    set type(value) {
        const scope = 'type';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE));
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").type = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    get visualizeAttributes() {
        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").visualizeAttributes;
    }
    set visualizeAttributes(value) {
        const scope = 'visualizeAttributes';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, value, 'function', false);
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").visualizeAttributes = value;
            __classPrivateFieldGet(this, _ViewportApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}: ${scope} was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    // #endregion Public Accessors (69)
    // #region Public Methods (23)
    addCanvasEventListener(listener) {
        const scope = 'addCanvasEventListener';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, listener, 'object');
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").domEventEngine.addDomEventListener(listener);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    addFlag(flag) {
        const scope = 'addFlag';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, flag, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.FLAG_TYPE));
            const token = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").addFlag(flag);
            return token;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    assignCamera(id) {
        const scope = 'assignCamera';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.assignCamera(id);
            this.update();
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    assignLightScene(id) {
        const scope = 'assignLightScene';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.assignLightScene(id);
            this.update();
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    applyViewportSettings(settings, sections) {
        const scope = 'applyViewportSettings';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, settings, 'object');
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, sections, 'object', false);
            return __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, "f").applyViewportSettings(this.id, settings, sections);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, e);
        }
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = 'close';
            try {
                return yield __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, "f").closeRenderingEngine(this.id);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
            }
        });
    }
    convert3Dto2D(p) {
        const scope = 'convert3Dto2D';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, p, 'vec3');
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").convert3Dto2D(p);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    convertToGlTF(node = main_1.sceneTree.root) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = 'convertToGlTF';
            try {
                if (!(node instanceof viewer_shared_node_tree_1.TreeNode)) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, 'InputValidator.validateAndError', error, false);
                }
                this.update();
                const result = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, "f").convert(node, false, this.id);
                this.update();
                return new Blob([result], { type: 'application/octet-stream' });
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
            }
        });
    }
    createLightScene(properties) {
        const scope = 'createLightScene';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, properties, 'object', false);
            const prop = Object.assign({}, properties);
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, prop.name, 'string', false);
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, prop.standard, 'boolean', false);
            const lightScene = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.createLightScene(properties || {});
            this.update();
            return __classPrivateFieldGet(this, _ViewportApi_lightScenes, "f")[lightScene.id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    createOrthographicCamera(id) {
        const scope = 'createOrthographicCamera';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string', false);
            const camera = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.createCamera(viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.ORTHOGRAPHIC, id);
            this.update();
            return __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[camera.id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    createPerspectiveCamera(id) {
        const scope = 'createPerspectiveCamera';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string', false);
            const camera = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.createCamera(viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE, id);
            this.update();
            return __classPrivateFieldGet(this, _ViewportApi_cameras, "f")[camera.id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    createSDTFOverview(node) {
        const scope = 'createSDTFOverview';
        try {
            if (!(node instanceof viewer_shared_node_tree_1.TreeNode)) {
                const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, 'InputValidator.validateAndError', error, false);
            }
            this.update();
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").createSDTFOverview(node);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    displayErrorMessage(message) {
        const scope = 'displayErrorMessage';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, message, 'string');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").displayErrorMessage(message);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    getEnvironmentMapImageUrl() {
        const scope = 'getEnvironmentMapImageUrl';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").getEnvironmentMapImageUrl();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    getScreenshot(type, quality) {
        const scope = 'getScreenshot';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, type, 'string', false);
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, quality, 'number', false);
            this.update();
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").getScreenshot(type, quality);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    getViewportSettings() {
        const scope = 'getViewportSettings';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, "f").getViewportSettings(this.id);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, e);
        }
    }
    mouseEventToRay(event) {
        const scope = 'mouseEventToRay';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").mouseEventToRay(event);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, e);
        }
    }
    raytraceScene(origin, direction, root) {
        const scope = 'raytraceScene';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, origin, 'vec3');
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, direction, 'vec3');
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").raytraceScene(origin, direction, root);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    removeCamera(id) {
        const scope = 'removeCamera';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.removeCamera(id);
            this.update();
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    removeCanvasEventListener(token) {
        const scope = 'removeCanvasEventListener';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, token, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").domEventEngine.removeDomEventListener(token);
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    removeFlag(token) {
        const scope = 'removeFlag';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, token, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").removeFlag(token);
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    removeLightScene(id) {
        const scope = 'removeLightScene';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, id, 'string');
            const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").lightEngine.removeLightScene(id);
            this.update();
            return check;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    render() {
        const scope = 'render';
        try {
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").renderingManager.render();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    resetToDefaultCameras() {
        const scope = 'resetToDefaultCameras';
        try {
            for (let c in this.cameras)
                __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.removeCamera(c);
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").cameraEngine.createDefaultCameras();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    resize(width, height) {
        const scope = 'resize';
        try {
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, width, 'number');
            __classPrivateFieldGet(this, _ViewportApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, height, 'number');
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").resize(width, height);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    touchToRay(event) {
        const scope = 'touchToRay';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").touchToRay(event);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, e);
        }
    }
    touchEventToRay(event) {
        const scope = 'touchEventToRay';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").touchEventToRay(event);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `SessionApi.${scope}`, e);
        }
    }
    update() {
        const scope = 'update';
        try {
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").update('ViewportApi');
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    updateNode(node) {
        const scope = 'updateNode';
        try {
            if (!(node instanceof viewer_shared_node_tree_1.TreeNode)) {
                const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, 'InputValidator.validateAndError', error, false);
            }
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").sceneTreeManager.updateNode(node, node.threeJsObject[this.id]);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    updateEnvironmentGeometry() {
        const scope = 'updateEnvironmentGeometry';
        try {
            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").updateEnvironmentGeometry();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
    createArSessionLink(node, qrCode = true, fallbackUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = 'createArSessionLink';
            try {
                if (node && !(node instanceof viewer_shared_node_tree_1.TreeNode)) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, 'ViewportApi.validateAndError', error, false);
                }
                const arSessionEngine = __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, "f").getARSessionEngine();
                if (!arSessionEngine) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerArError('ViewportApi.createArSessionLink: None of the sessions that are registered are capable of using the AR feature.');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.AR, 'ViewportApi.createArSessionLink', error, false);
                }
                const targetNode = node || main_1.sceneTree.root;
                let scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.arScale);
                // add scaling matrix to scene tree node
                targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix });
                // create the gltf
                this.update();
                const blob = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, "f").convert(targetNode, true);
                // remove scaling the matrix
                for (let i = 0; i < targetNode.transformations.length; i++)
                    if (targetNode.transformations[i].id === 'ar_scaling')
                        targetNode.transformations.splice(i, 1);
                this.update();
                const response = yield arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.SCENE);
                const backends = {
                    "sddev3": "https://sddev3.eu-central-1.shapediver.com",
                    "sddev2": "https://sddev2.eu-central-1.shapediver.com",
                    "sddev": "https://sddev.eu-central-1.shapediver.com",
                    "sdtest": "https://sdtest.us-east-1.shapediver.com",
                    "sdeuc1": "https://sdeuc1.eu-central-1.shapediver.com",
                    "sdr7euc1": "https://sdr7euc1.eu-central-1.shapediver.com",
                    "sduse1": "https://model-view.shapediver.com",
                };
                let backendIdentifier = Object.keys(backends).find((key) => backends[key] === arSessionEngine.modelViewUrl);
                if (!backendIdentifier) {
                    const modelViewUrl = arSessionEngine.modelViewUrl;
                    backendIdentifier = modelViewUrl.replace("https://", "").replace(".shapediver.com", "");
                }
                let fallbackQueryParameter = fallbackUrl ? `fb=${encodeURIComponent(fallbackUrl)}&` : "";
                if (!response.gltf || !response.gltf.sceneId) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerArError('ViewportApi.createArSessionLink: There was an unexpected error with the ar scene response. Please contact us if this happens again.');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.AR, 'ViewportApi.createArSessionLink', error, false);
                }
                let sceneId = response.gltf.sceneId;
                const link = `https://viewer.shapediver.com/v3/${viewer_shared_build_data_1.build_data.build_version.replace('3.', '')}/ar.html?${fallbackQueryParameter}b=${encodeURIComponent(backendIdentifier)}&id=${encodeURIComponent(sceneId)}`;
                if (qrCode === false) {
                    return link;
                }
                else {
                    let qrCodeLink = yield new Promise(resolve => {
                        QRCode.toDataURL(link, (error, url) => {
                            resolve(url);
                        });
                    });
                    return qrCodeLink;
                }
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
            }
        });
    }
    viewInAR(node) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = 'viewInAR';
            try {
                if (node && !(node instanceof viewer_shared_node_tree_1.TreeNode)) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, 'InputValidator.validateAndError', error, false);
                }
                const arSessionEngine = __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, "f").getARSessionEngine();
                if (!arSessionEngine) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: None of the sessions that are registered are capable of using the AR feature.');
                    throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.AR, 'Api.viewInAR', error, false);
                }
                const targetNode = node || main_1.sceneTree.root;
                let scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.arScale);
                // add scaling matrix to scene tree node
                targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix });
                // create the gltf
                this.update();
                const blob = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, "f").convert(targetNode, true);
                // remove scaling the matrix
                for (let i = 0; i < targetNode.transformations.length; i++)
                    if (targetNode.transformations[i].id === 'ar_scaling')
                        targetNode.transformations.splice(i, 1);
                this.update();
                const response = yield arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), __classPrivateFieldGet(this, _ViewportApi_systemInfo, "f").isIOS ? sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.USDZ : sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.NONE);
                return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").viewInAR(response.gltf.href);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
            }
        });
    }
    viewableInAR() {
        const scope = 'viewableInAR';
        try {
            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, "f").viewableInAR();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _ViewportApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `ViewportApi.${scope}`, e);
        }
    }
}
exports.ViewportApi = ViewportApi;
_ViewportApi_renderingEngine = new WeakMap(), _ViewportApi_creationControlCenter = new WeakMap(), _ViewportApi_converter = new WeakMap(), _ViewportApi_gltfConverter = new WeakMap(), _ViewportApi_inputValidator = new WeakMap(), _ViewportApi_logger = new WeakMap(), _ViewportApi_systemInfo = new WeakMap(), _ViewportApi_cameras = new WeakMap(), _ViewportApi_lightScenes = new WeakMap();
//# sourceMappingURL=ViewportApi.js.map