import { vec3, vec2 } from "gl-matrix";
import { CAMERA_TYPE, ICamera, ICameraOptions } from "@shapediver/viewer.rendering-engine.camera-engine";
import { ICameraApi } from "../../../interfaces/viewport/camera/ICameraApi";
import { IBox } from "@shapediver/viewer.shared.math";
import { IViewportApi } from "../../../interfaces/viewport/IViewportApi";
export declare abstract class AbstractCameraApi implements ICameraApi {
    #private;
    protected scope: string;
    constructor(viewportApi: IViewportApi, camera: ICamera);
    get autoAdjust(): boolean;
    set autoAdjust(value: boolean);
    get cameraMovementDuration(): number;
    set cameraMovementDuration(value: number);
    get defaultPosition(): vec3;
    set defaultPosition(value: vec3);
    get defaultTarget(): vec3;
    set defaultTarget(value: vec3);
    get enabled(): boolean;
    set enabled(value: boolean);
    get id(): string;
    get name(): string | undefined;
    set name(value: string | undefined);
    get order(): number | undefined;
    set order(value: number | undefined);
    get position(): vec3;
    set position(value: vec3);
    get revertAtMouseUp(): boolean;
    set revertAtMouseUp(value: boolean);
    get revertAtMouseUpDuration(): number;
    set revertAtMouseUpDuration(value: number);
    get target(): vec3;
    set target(value: vec3);
    get type(): CAMERA_TYPE;
    get zoomToFactor(): number;
    set zoomToFactor(value: number);
    animate(path: {
        position: vec3;
        target: vec3;
    }[], options?: ICameraOptions): Promise<boolean>;
    calculateZoomTo(zoomTarget?: IBox, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    project(p: vec3): vec2;
    reset(options?: ICameraOptions): Promise<boolean>;
    set(position: vec3, target: vec3, options?: ICameraOptions): Promise<boolean>;
    unproject(p: vec3): vec3;
    zoomTo(zoomTarget?: IBox, options?: ICameraOptions): Promise<boolean>;
}
//# sourceMappingURL=AbstractCameraApi.d.ts.map