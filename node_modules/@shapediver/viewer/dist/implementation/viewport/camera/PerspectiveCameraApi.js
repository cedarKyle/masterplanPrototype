"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PerspectiveCameraApi_camera, _PerspectiveCameraApi_inputValidator, _PerspectiveCameraApi_logger, _PerspectiveCameraApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerspectiveCameraApi = void 0;
const AbstractCameraApi_1 = require("./AbstractCameraApi");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
class PerspectiveCameraApi extends AbstractCameraApi_1.AbstractCameraApi {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(viewportApi, camera) {
        super(viewportApi, camera);
        // #region Properties (1)
        _PerspectiveCameraApi_camera.set(this, void 0);
        _PerspectiveCameraApi_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _PerspectiveCameraApi_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _PerspectiveCameraApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _PerspectiveCameraApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _PerspectiveCameraApi_camera, camera, "f");
        this.scope = 'PerspectiveCameraApi';
    }
    // #endregion Constructors (1)
    // #region Public Accessors (38)
    get autoRotationSpeed() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.autoRotationSpeed;
    }
    set autoRotationSpeed(value) {
        const scope = 'autoRotationSpeed';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.autoRotationSpeed = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get cubePositionRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.cubePositionRestriction;
    }
    set cubePositionRestriction(value) {
        const scope = 'cubePositionRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.min, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.max, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.cubePositionRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get cubeTargetRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.cubeTargetRestriction;
    }
    set cubeTargetRestriction(value) {
        const scope = 'cubeTargetRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.min, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.max, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.cubeTargetRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get damping() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.damping;
    }
    set damping(value) {
        const scope = 'damping';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.damping = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enableAutoRotation() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableAutoRotation;
    }
    set enableAutoRotation(value) {
        const scope = 'enableAutoRotation';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableAutoRotation = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enableKeyPan() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableKeyPan;
    }
    set enableKeyPan(value) {
        const scope = 'enableKeyPan';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableKeyPan = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enablePan() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enablePan;
    }
    set enablePan(value) {
        const scope = 'enablePan';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enablePan = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enableRotation() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableRotation;
    }
    set enableRotation(value) {
        const scope = 'enableRotation';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableRotation = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enableZoom() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableZoom;
    }
    set enableZoom(value) {
        const scope = 'enableZoom';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.enableZoom = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get fov() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").fov;
    }
    set fov(value) {
        const scope = 'fov';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").fov = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get keyPanSpeed() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.keyPanSpeed;
    }
    set keyPanSpeed(value) {
        const scope = 'keyPanSpeed';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.keyPanSpeed = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get movementSmoothness() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.movementSmoothness;
    }
    set movementSmoothness(value) {
        const scope = 'movementSmoothness';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.movementSmoothness = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get panSpeed() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.panSpeed;
    }
    set panSpeed(value) {
        const scope = 'panSpeed';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.panSpeed = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get rotationRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.rotationRestriction;
    }
    set rotationRestriction(value) {
        const scope = 'rotationRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.minAzimuthAngle, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.maxAzimuthAngle, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.minPolarAngle, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.maxPolarAngle, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.rotationRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get rotationSpeed() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.rotationSpeed;
    }
    set rotationSpeed(value) {
        const scope = 'rotationSpeed';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.rotationSpeed = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get spherePositionRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.spherePositionRestriction;
    }
    set spherePositionRestriction(value) {
        const scope = 'spherePositionRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.center, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.radius, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.spherePositionRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get sphereTargetRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.sphereTargetRestriction;
    }
    set sphereTargetRestriction(value) {
        const scope = 'sphereTargetRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.center, 'vec3');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.radius, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.sphereTargetRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get zoomRestriction() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.zoomRestriction;
    }
    set zoomRestriction(value) {
        const scope = 'zoomRestriction';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'object');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.minDistance, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value.maxDistance, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.zoomRestriction = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get zoomSpeed() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.zoomSpeed;
    }
    set zoomSpeed(value) {
        const scope = 'zoomSpeed';
        try {
            __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").controls.zoomSpeed = value;
            __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
}
exports.PerspectiveCameraApi = PerspectiveCameraApi;
_PerspectiveCameraApi_camera = new WeakMap(), _PerspectiveCameraApi_inputValidator = new WeakMap(), _PerspectiveCameraApi_logger = new WeakMap(), _PerspectiveCameraApi_viewportApi = new WeakMap();
//# sourceMappingURL=PerspectiveCameraApi.js.map