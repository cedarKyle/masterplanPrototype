"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractCameraApi_camera, _AbstractCameraApi_viewportApi, _AbstractCameraApi_inputValidator, _AbstractCameraApi_logger, _AbstractCameraApi_validateOptions;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCameraApi = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
class AbstractCameraApi {
    // #endregion Properties (15)
    // #region Constructors (1)
    constructor(viewportApi, camera) {
        // #region Properties (15)
        _AbstractCameraApi_camera.set(this, void 0);
        _AbstractCameraApi_viewportApi.set(this, void 0);
        _AbstractCameraApi_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _AbstractCameraApi_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _AbstractCameraApi_validateOptions.set(this, (scope, options) => {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, options, 'object', false);
            const prop = Object.assign({}, options);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, prop.easing, 'string', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, prop.duration, 'number', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, prop.coordinates, 'string', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, prop.interpolation, 'string', false);
        });
        this.scope = 'AbstractCameraApi';
        __classPrivateFieldSet(this, _AbstractCameraApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _AbstractCameraApi_camera, camera, "f");
    }
    // #endregion Constructors (1)
    // #region Public Accessors (28)
    get autoAdjust() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").autoAdjust;
    }
    set autoAdjust(value) {
        const scope = 'autoAdjust';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").autoAdjust = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get cameraMovementDuration() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").cameraMovementDuration;
    }
    set cameraMovementDuration(value) {
        const scope = 'cameraMovementDuration';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").cameraMovementDuration = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get defaultPosition() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").defaultPosition;
    }
    set defaultPosition(value) {
        const scope = 'defaultPosition';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").defaultPosition = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get defaultTarget() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").defaultTarget;
    }
    set defaultTarget(value) {
        const scope = 'defaultTarget';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").defaultTarget = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get enabled() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").controls.enabled;
    }
    set enabled(value) {
        const scope = 'enabled';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").controls.enabled = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get id() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").id;
    }
    get name() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").name;
    }
    set name(value) {
        const scope = 'name';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'string', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").name = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get order() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").order;
    }
    set order(value) {
        const scope = 'order';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").order = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get position() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").position;
    }
    set position(value) {
        const scope = 'position';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").position = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get revertAtMouseUp() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").revertAtMouseUp;
    }
    set revertAtMouseUp(value) {
        const scope = 'revertAtMouseUp';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").revertAtMouseUp = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get revertAtMouseUpDuration() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").revertAtMouseUpDuration;
    }
    set revertAtMouseUpDuration(value) {
        const scope = 'revertAtMouseUpDuration';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").revertAtMouseUpDuration = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get target() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").target;
    }
    set target(value) {
        const scope = 'target';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").target = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    get type() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").type;
    }
    get zoomToFactor() {
        return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").zoomExtentsFactor;
    }
    set zoomToFactor(value) {
        const scope = 'zoomToFactor';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, value, 'number');
            __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").zoomExtentsFactor = value;
            __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}: ${scope} was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCameraApi_viewportApi, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    // #endregion Public Accessors (28)
    // #region Public Methods (7)
    animate(path, options) {
        const scope = 'animate';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, path, 'array');
            for (let i = 0; i < path.length; i++) {
                __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, path[i].position, 'vec3');
                __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, path[i].target, 'vec3');
            }
            __classPrivateFieldGet(this, _AbstractCameraApi_validateOptions, "f").call(this, scope, options);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").animate(path, options);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    calculateZoomTo(zoomTarget, startingPosition, startingTarget) {
        const scope = 'calculateZoomTo';
        try {
            if (zoomTarget !== undefined && !(zoomTarget instanceof viewer_shared_math_1.Box)) {
                const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${zoomTarget} is not of type Box.`, zoomTarget, 'Box');
                throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, error, false);
            }
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, startingPosition, 'vec3', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, startingTarget, 'vec3', false);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").calculateZoomTo(zoomTarget, startingPosition, startingTarget);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    project(p) {
        const scope = 'project';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, p, 'vec3');
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").project(p);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    reset(options) {
        const scope = 'reset';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_validateOptions, "f").call(this, scope, options);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").reset(options);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    set(position, target, options) {
        const scope = 'set';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, position, 'vec3', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, target, 'vec3', false);
            __classPrivateFieldGet(this, _AbstractCameraApi_validateOptions, "f").call(this, scope, options);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").set(position, target, options);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    unproject(p) {
        const scope = 'unproject';
        try {
            __classPrivateFieldGet(this, _AbstractCameraApi_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, p, 'vec3', false);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").unproject(p);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
    zoomTo(zoomTarget, options) {
        const scope = 'zoomTo';
        try {
            if (zoomTarget !== undefined && !(zoomTarget instanceof viewer_shared_math_1.Box)) {
                const error = new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${zoomTarget} is not of type Box.`, zoomTarget, 'Box');
                throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, error, false);
            }
            __classPrivateFieldGet(this, _AbstractCameraApi_validateOptions, "f").call(this, scope, options);
            return __classPrivateFieldGet(this, _AbstractCameraApi_camera, "f").zoomTo(zoomTarget, options);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCameraApi_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.CAMERA, `${this.scope}.${scope}`, e);
        }
    }
}
exports.AbstractCameraApi = AbstractCameraApi;
_AbstractCameraApi_camera = new WeakMap(), _AbstractCameraApi_viewportApi = new WeakMap(), _AbstractCameraApi_inputValidator = new WeakMap(), _AbstractCameraApi_logger = new WeakMap(), _AbstractCameraApi_validateOptions = new WeakMap();
//# sourceMappingURL=AbstractCameraApi.js.map