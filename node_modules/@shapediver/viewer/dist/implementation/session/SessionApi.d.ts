import { ShapeDiverResponseDto } from "@shapediver/api.geometry-api-dto-v2";
import { ISettingsSections, SessionEngine } from "@shapediver/viewer.session-engine.session-engine";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IExportApi } from "../../interfaces/session/IExportApi";
import { IOutputApi } from "../../interfaces/session/IOutputApi";
import { IParameterApi } from "../../interfaces/session/IParameterApi";
import { ISessionApi } from "../../interfaces/session/ISessionApi";
export declare class SessionApi implements ISessionApi {
    #private;
    constructor(sessionEngine: SessionEngine);
    get automaticSceneUpdate(): boolean;
    set automaticSceneUpdate(value: boolean);
    get commitParameters(): boolean;
    set commitParameters(value: boolean);
    get commitSettings(): boolean;
    set commitSettings(value: boolean);
    get customizeOnParameterChange(): boolean;
    set customizeOnParameterChange(value: boolean);
    get excludeViewports(): string[];
    set excludeViewports(value: string[]);
    get exports(): {
        [key: string]: IExportApi;
    };
    get id(): string;
    get initialized(): boolean;
    get jwtToken(): string | undefined;
    set jwtToken(value: string | undefined);
    get modelViewUrl(): string;
    get node(): ITreeNode;
    get outputs(): {
        [key: string]: IOutputApi;
    };
    get parameters(): {
        [key: string]: IParameterApi<any>;
    };
    get updateCallback(): ((newNode: ITreeNode, oldNode: ITreeNode) => void) | null;
    set updateCallback(value: ((newNode: ITreeNode, oldNode: ITreeNode) => void) | null);
    get refreshJwtToken(): (() => Promise<string>) | undefined;
    set refreshJwtToken(value: (() => Promise<string>) | undefined);
    get ticket(): string;
    applySettings(response: ShapeDiverResponseDto, sections?: ISettingsSections): Promise<void>;
    canGoBack(): boolean;
    canGoForward(): boolean;
    close(): Promise<void>;
    convertToGlTF(): Promise<Blob>;
    customize(force?: boolean): Promise<ITreeNode>;
    customizeParallel(parameterValues: {
        [key: string]: string;
    }): Promise<ITreeNode>;
    getExportById(id: string): IExportApi | null;
    getExportByName(name: string): IExportApi[];
    getExportByType(type: string): IExportApi[];
    getOutputByFormat(format: string): IOutputApi[];
    getOutputById(id: string): IOutputApi | null;
    getOutputByName(name: string): IOutputApi[];
    getParameterById(id: string): IParameterApi<any> | null;
    getParameterByName(name: string): IParameterApi<any>[];
    getParameterByType(type: string): IParameterApi<any>[];
    goBack(): Promise<ITreeNode>;
    goForward(): Promise<ITreeNode>;
    resetParameterValues(force?: boolean): Promise<ITreeNode>;
    resetSettings(sections?: ISettingsSections): Promise<void>;
    saveDefaultParameterValues(): Promise<boolean>;
    saveSettings(viewportId?: string): Promise<boolean>;
    saveUiProperties(): Promise<boolean>;
    updateOutputs(): Promise<ITreeNode>;
}
//# sourceMappingURL=SessionApi.d.ts.map