import { ShapeDiverResponseModelComputationStatus } from "@shapediver/api.geometry-api-dto-v2";
import { IOutput, ShapeDiverResponseOutputContent, ShapeDiverResponseOutputChunk } from "@shapediver/viewer.session-engine.session-engine";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IOutputApi } from "../../interfaces/session/IOutputApi";
export declare class OutputApi implements IOutputApi {
    #private;
    constructor(output: IOutput);
    get bbmax(): number[] | undefined;
    get bbmin(): number[] | undefined;
    get chunks(): ShapeDiverResponseOutputChunk[] | undefined;
    get content(): ShapeDiverResponseOutputContent[] | undefined;
    get delay(): number | undefined;
    get dependency(): string[];
    get displayname(): string | undefined;
    set displayname(value: string | undefined);
    get format(): string[];
    get freeze(): boolean;
    set freeze(value: boolean);
    get hidden(): boolean;
    set hidden(value: boolean);
    get id(): string;
    get material(): string | undefined;
    get msg(): string | undefined;
    get name(): string;
    get node(): ITreeNode | undefined;
    get order(): number | undefined;
    set order(value: number | undefined);
    get status_collect(): ShapeDiverResponseModelComputationStatus | undefined;
    get status_computation(): ShapeDiverResponseModelComputationStatus | undefined;
    get tooltip(): string | undefined;
    set tooltip(value: string | undefined);
    get uid(): string | undefined;
    get updateCallback(): ((newNode?: ITreeNode, oldNode?: ITreeNode) => void) | null;
    set updateCallback(value: ((newNode?: ITreeNode, oldNode?: ITreeNode) => void) | null);
    get version(): string;
    updateOutputContent(outputContent: ShapeDiverResponseOutputContent[], preventUpdate?: boolean): Promise<ITreeNode | undefined>;
}
//# sourceMappingURL=OutputApi.d.ts.map