import { BUSY_MODE_DISPLAY, SESSION_SETTINGS_MODE, SPINNER_POSITIONING, VISIBILITY_MODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { ITree } from '@shapediver/viewer.shared.node-tree';
import { ISessionApi } from './interfaces/session/ISessionApi';
import { IViewportApi } from './interfaces/viewport/IViewportApi';
import { IEvent, LOGGING_LEVEL, MainEventTypes } from '@shapediver/viewer.shared.services';
export interface IGeneralOptions {
    /**
     * The logging level that is used.
     */
    loggingLevel: LOGGING_LEVEL;
    /**
     * Option to show/hide messages in the browser console.
     */
    showMessages: boolean;
}
/**
 * Adds an event listener.
 *
 * @param type The type of event.
 * @param cb The callback.
 * @returns
 */
export declare const addListener: (type: string | MainEventTypes, cb: (event: IEvent) => void) => string;
/**
 * Removes an event listener.
 *
 * @param id The id of the listener.
 * @returns
 */
export declare const removeListener: (id: string) => boolean;
/**
 * The scene tree that is used to store the scene.
 * The scene tree contains a unique node and child nodes for each session,
 * and can also be used to add your own nodes.
 */
export declare const sceneTree: ITree;
/**
 * The viewports that are currently being used.
 */
export declare const viewports: {
    [key: string]: IViewportApi;
};
/**
 * The sessions that are currently being used.
 */
export declare const sessions: {
    [key: string]: ISessionApi;
};
/**
 * General Viewer options that are used everywhere.
 * - loggingLevel: The logging level that is used.
 * - showMessages: Option to show/hide messages in the browser console.
 */
export declare const generalOptions: IGeneralOptions;
/**
 * Create and initialize a session with a model hosted on a
 * {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend},
 * using the provided ticket and modelViewUrl.
 * Returns a session api object allowing to control the session.
 *
 * A JWT can be specified for authorizing the API calls to the Geometry Backend.
 * The model's settings on the Geometry Backend might require a JWT to be provided.
 *
 * By default the outputs of the model for its default parameter values will be loaded.
 *
 * An optional identifier for the session can be provided. This identifier can be used to retrieve the
 * api object from {@link sessions}. In case no identifier is provided, a unique one will be generated.
 *
 * @param properties.ticket The ticket for direct embedding of the model to create a session for. This identifies the model on the Geometry Backend.
 * @param properties.modelViewUrl The modelViewUrl of the {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend} hosting the model.
 * @param properties.jwtToken The JWT to use for authorizing the API calls to the Geometry Backend.
 * @param properties.id The unique identifier to use for the session.
 * @param properties.waitForOutputs Option to wait for the outputs to be loaded, or return immediately after creation of the session. (default: true)
 * @param properties.loadOutputs Option to load the outputs, or not load them until the first call of {@link ISessioncustomize}. (default: true)
 * @param properties.excludeViewports Option to exclude some viewports from the start. Can be accessed via {@link ISessionexcludeViewports}.
 * @param properties.initialParameterValues The initial set of parameter values to use. Map from parameter id to parameter value. The default value will be used for any parameter not specified.
 * @returns
 */
export declare const createSession: (properties: {
    ticket: string;
    modelViewUrl: string;
    jwtToken?: string | undefined;
    id?: string | undefined;
    waitForOutputs?: boolean | undefined;
    loadOutputs?: boolean | undefined;
    excludeViewports?: string[] | undefined;
    initialParameterValues?: {
        [key: string]: string;
    } | undefined;
}) => Promise<ISessionApi>;
/**
 * Create and initialize a viewport with the provided type and canvas,
 * and return a viewport api object allowing to control it.
 *
 * An optional identifier for the viewport can be provided. This identifier can be used to retrieve the
 * viewport object from {@link viewports}. In case no identifier is provided, a unique one will be generated.
 *
 * By default a new viewport displays the complete scene tree. Viewports can be excluded from
 * displaying geometry for specific sessions by using the {@link excludeViewports} property of
 * {@link ISessionApi}.
 *
 * @param properties.visibility The visibility of the viewport.
 * @param properties.canvas The canvas that the viewport should use. A canvas element will be created if none is provided.
 * @param properties.id The unique identifier to use for the viewport.
 * @param properties.branding Optional branding options.
 * @param properties.sessionSettingsId Optional identifier of the session to be used for loading / persisting settings of the viewport when the {@link SESSION_SETTINGS_MODE} is set to MANUAL.
 * @param properties.sessionSettingsMode Allows to control which session to use for loading / persisting settings of the viewport. (default: {@link SESSION_SETTINGS_MODE.FIRST}).
 * @returns
 */
export declare const createViewport: (properties?: {
    canvas?: HTMLCanvasElement | undefined;
    id?: string | undefined;
    branding?: {
        /**
         * Optional URL to a logo to be displayed while the viewport is hidden.
         * A default logo will be used if none is provided.
         * Supply null to display no logo at all.
         */
        logo?: string | null | undefined;
        /**
         * Optional background color to show while the viewport is hidden, can include alpha channel.
         * A default color will be used if none is provided.
         */
        backgroundColor?: string | undefined;
        /**
         * Optional URL to a logo to be displayed while the viewport is in busy mode.
         * A default logo will be used if none is provided.
         * The positioning of the spinner can be influenced via {@link SPINNER_POSITIONING}.
         */
        busyModeSpinner?: string | undefined;
        /**
         * The mode used to indicate that the viewport is busy. (default: BUSY_MODE_DISPLAY.SPINNER)
         * Whenever the busy mode gets toggled, the events {@link EVENTTYPE_VIEWPORT.BUSY_MODE_ON} and {@link EVENTTYPE_VIEWPORT.BUSY_MODE_OFF} will be emitted.
         */
        busyModeDisplay?: BUSY_MODE_DISPLAY | undefined;
        /**
         * Where the spinner that is specified by {@link BUSY_MODE_DISPLAY} is desplayed on the screen. (default: BUSY_MODE_DISPLAY.BOTTOM_RIGHT)
         */
        spinnerPositioning?: SPINNER_POSITIONING | undefined;
    } | undefined;
    sessionSettingsId?: string | undefined;
    sessionSettingsMode?: SESSION_SETTINGS_MODE | undefined;
    visibility?: VISIBILITY_MODE | undefined;
} | undefined) => Promise<IViewportApi>;
//# sourceMappingURL=main.d.ts.map