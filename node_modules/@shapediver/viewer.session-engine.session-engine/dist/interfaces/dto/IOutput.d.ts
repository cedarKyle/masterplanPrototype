import { ShapeDiverResponseOutput, ShapeDiverResponseOutputContent as ShapeDiverResponseOutputContentBackend, ShapeDiverResponseOutputChunk as ShapeDiverResponseOutputChunkBackend } from '@shapediver/sdk.geometry-api-sdk-v2';
import { IAnchor, IMaterialContentData, IMaterialContentDataV1, IMaterialContentDataV2, IMaterialContentDataV3, ITag2D, ITag3D } from '@shapediver/viewer.data-engine.shared-types';
import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
/**
 * Extension of the ShapeDiverResponseOutputContent as the viewer already creates types for them
 */
export interface ShapeDiverResponseOutputContent extends ShapeDiverResponseOutputContentBackend {
    data?: ITag2D[] | ITag3D[] | IAnchor[] | IMaterialContentData | IMaterialContentDataV1 | IMaterialContentDataV2 | IMaterialContentDataV3 | any;
}
/**
 * Extension of the ShapeDiverResponseOutputChunk with a node
 */
export interface ShapeDiverResponseOutputChunk extends ShapeDiverResponseOutputChunkBackend {
    node?: ITreeNode;
}
export interface IOutput extends ShapeDiverResponseOutput {
    readonly node?: ITreeNode;
    format: string[];
    freeze: boolean;
    updateCallback: ((newNode?: ITreeNode, oldNode?: ITreeNode) => void) | null;
    updateOutput(newNode?: ITreeNode, oldNode?: ITreeNode): void;
    updateOutputContent(content: ShapeDiverResponseOutputContent[], preventUpdate?: boolean): Promise<ITreeNode | undefined>;
    updateOutputDefinition(outputDef: ShapeDiverResponseOutput): void;
}
//# sourceMappingURL=IOutput.d.ts.map