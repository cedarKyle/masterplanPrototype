"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Parameter_choices, _Parameter_converter, _Parameter_decimalplaces, _Parameter_defaultValue, _Parameter_defval, _Parameter_expression, _Parameter_format, _Parameter_group, _Parameter_id, _Parameter_inputValidator, _Parameter_logger, _Parameter_max, _Parameter_min, _Parameter_name, _Parameter_sessionEngine, _Parameter_structure, _Parameter_type, _Parameter_visualization, _Parameter_displayname, _Parameter_hidden, _Parameter_lastValidatedValue, _Parameter_order, _Parameter_sessionValue, _Parameter_tooltip, _Parameter_value;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parameter = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const ISessionEngine_1 = require("../../interfaces/ISessionEngine");
const MimeTypeUtils = __importStar(require("@shapediver/viewer.utils.mime-type"));
class Parameter {
    // #endregion Properties (24)
    // #region Constructors (1)
    constructor(paramDef, sessionEngine) {
        // #region Properties (24)
        _Parameter_choices.set(this, void 0);
        _Parameter_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _Parameter_decimalplaces.set(this, void 0);
        _Parameter_defaultValue.set(this, void 0);
        _Parameter_defval.set(this, void 0);
        _Parameter_expression.set(this, void 0);
        _Parameter_format.set(this, void 0);
        _Parameter_group.set(this, void 0);
        _Parameter_id.set(this, void 0);
        _Parameter_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Parameter_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Parameter_max.set(this, void 0);
        _Parameter_min.set(this, void 0);
        _Parameter_name.set(this, void 0);
        _Parameter_sessionEngine.set(this, void 0);
        _Parameter_structure.set(this, void 0);
        _Parameter_type.set(this, void 0);
        _Parameter_visualization.set(this, void 0);
        _Parameter_displayname.set(this, void 0);
        _Parameter_hidden.set(this, false);
        _Parameter_lastValidatedValue.set(this, void 0);
        _Parameter_order.set(this, void 0);
        _Parameter_sessionValue.set(this, void 0);
        _Parameter_tooltip.set(this, void 0);
        _Parameter_value.set(this, void 0);
        __classPrivateFieldSet(this, _Parameter_sessionEngine, sessionEngine, "f");
        __classPrivateFieldSet(this, _Parameter_id, paramDef.id, "f");
        __classPrivateFieldSet(this, _Parameter_defval, paramDef.defval, "f");
        __classPrivateFieldSet(this, _Parameter_name, paramDef.name, "f");
        __classPrivateFieldSet(this, _Parameter_type, paramDef.type, "f");
        if (paramDef.choices !== undefined)
            __classPrivateFieldSet(this, _Parameter_choices, paramDef.choices, "f");
        if (paramDef.decimalplaces !== undefined)
            __classPrivateFieldSet(this, _Parameter_decimalplaces, +paramDef.decimalplaces, "f");
        if (paramDef.expression !== undefined)
            __classPrivateFieldSet(this, _Parameter_expression, paramDef.expression, "f");
        if (paramDef.format !== undefined)
            __classPrivateFieldSet(this, _Parameter_format, MimeTypeUtils.extendMimeTypes(paramDef.format), "f");
        if (paramDef.min !== undefined)
            __classPrivateFieldSet(this, _Parameter_min, +paramDef.min, "f");
        if (paramDef.max !== undefined)
            __classPrivateFieldSet(this, _Parameter_max, +paramDef.max, "f");
        if (paramDef.visualization !== undefined)
            __classPrivateFieldSet(this, _Parameter_visualization, paramDef.visualization, "f");
        if (paramDef.structure !== undefined)
            __classPrivateFieldSet(this, _Parameter_structure, paramDef.structure, "f");
        if (paramDef.group !== undefined)
            __classPrivateFieldSet(this, _Parameter_group, paramDef.group, "f");
        if (paramDef.tooltip !== undefined)
            __classPrivateFieldSet(this, _Parameter_tooltip, paramDef.tooltip, "f");
        if (paramDef.displayname !== undefined)
            __classPrivateFieldSet(this, _Parameter_displayname, paramDef.displayname, "f");
        if (paramDef.order !== undefined)
            __classPrivateFieldSet(this, _Parameter_order, paramDef.order, "f");
        if (paramDef.hidden !== undefined)
            __classPrivateFieldSet(this, _Parameter_hidden, paramDef.hidden, "f");
        if (__classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.BOOL) {
            __classPrivateFieldSet(this, _Parameter_defaultValue, (__classPrivateFieldGet(this, _Parameter_defval, "f") === 'true'), "f");
        }
        else if (__classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.EVEN || __classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.FLOAT || __classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.INT || __classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.ODD) {
            __classPrivateFieldSet(this, _Parameter_defaultValue, +__classPrivateFieldGet(this, _Parameter_defval, "f"), "f");
        }
        else {
            __classPrivateFieldSet(this, _Parameter_defaultValue, __classPrivateFieldGet(this, _Parameter_defval, "f"), "f");
        }
        if (__classPrivateFieldGet(this, _Parameter_type, "f") === ISessionEngine_1.PARAMETER_TYPE.COLOR) {
            this.convertColor = (color) => {
                return __classPrivateFieldGet(this, _Parameter_converter, "f").toColor(color);
            };
        }
        __classPrivateFieldSet(this, _Parameter_value, __classPrivateFieldGet(this, _Parameter_defaultValue, "f"), "f");
        __classPrivateFieldSet(this, _Parameter_sessionValue, __classPrivateFieldGet(this, _Parameter_value, "f"), "f");
        __classPrivateFieldSet(this, _Parameter_lastValidatedValue, __classPrivateFieldGet(this, _Parameter_value, "f"), "f");
    }
    // #endregion Constructors (1)
    // #region Public Accessors (26)
    get choices() {
        return __classPrivateFieldGet(this, _Parameter_choices, "f");
    }
    get decimalplaces() {
        return __classPrivateFieldGet(this, _Parameter_decimalplaces, "f");
    }
    get defval() {
        return __classPrivateFieldGet(this, _Parameter_defval, "f");
    }
    get displayname() {
        return __classPrivateFieldGet(this, _Parameter_displayname, "f");
    }
    set displayname(value) {
        __classPrivateFieldSet(this, _Parameter_displayname, value, "f");
    }
    get expression() {
        return __classPrivateFieldGet(this, _Parameter_expression, "f");
    }
    get format() {
        return __classPrivateFieldGet(this, _Parameter_format, "f");
    }
    get group() {
        return __classPrivateFieldGet(this, _Parameter_group, "f");
    }
    get hidden() {
        return __classPrivateFieldGet(this, _Parameter_hidden, "f");
    }
    set hidden(value) {
        __classPrivateFieldSet(this, _Parameter_hidden, value, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _Parameter_id, "f");
    }
    get lastValidatedValue() {
        return __classPrivateFieldGet(this, _Parameter_lastValidatedValue, "f");
    }
    get max() {
        return __classPrivateFieldGet(this, _Parameter_max, "f");
    }
    get min() {
        return __classPrivateFieldGet(this, _Parameter_min, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _Parameter_name, "f");
    }
    get order() {
        return __classPrivateFieldGet(this, _Parameter_order, "f");
    }
    set order(value) {
        __classPrivateFieldSet(this, _Parameter_order, value, "f");
    }
    get sessionValue() {
        return __classPrivateFieldGet(this, _Parameter_sessionValue, "f");
    }
    set sessionValue(value) {
        __classPrivateFieldSet(this, _Parameter_sessionValue, value, "f");
    }
    get structure() {
        return __classPrivateFieldGet(this, _Parameter_structure, "f");
    }
    get tooltip() {
        return __classPrivateFieldGet(this, _Parameter_tooltip, "f");
    }
    set tooltip(value) {
        __classPrivateFieldSet(this, _Parameter_tooltip, value, "f");
    }
    get type() {
        return __classPrivateFieldGet(this, _Parameter_type, "f");
    }
    get value() {
        return __classPrivateFieldGet(this, _Parameter_value, "f");
    }
    set value(value) {
        __classPrivateFieldSet(this, _Parameter_value, value, "f");
        if (__classPrivateFieldGet(this, _Parameter_sessionEngine, "f").customizeOnParameterChange)
            __classPrivateFieldGet(this, _Parameter_sessionEngine, "f").customize();
    }
    get visualization() {
        return __classPrivateFieldGet(this, _Parameter_visualization, "f");
    }
    // #endregion Public Accessors (26)
    // #region Public Methods (4)
    isValid(value) {
        switch (true) {
            case this.type === ISessionEngine_1.PARAMETER_TYPE.BOOL:
                if (typeof value === 'string') {
                    if (!(value === 'true' || value === 'false')) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is a string that is neither true or false.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                }
                else {
                    __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, value, 'boolean');
                }
                break;
            case this.type === ISessionEngine_1.PARAMETER_TYPE.COLOR:
                __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, value, 'color');
                break;
            case this.type === ISessionEngine_1.PARAMETER_TYPE.FILE:
                __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, value, 'file');
                break;
            case this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN || this.type === ISessionEngine_1.PARAMETER_TYPE.FLOAT || this.type === ISessionEngine_1.PARAMETER_TYPE.INT || this.type === ISessionEngine_1.PARAMETER_TYPE.ODD:
                let temp = value;
                if (typeof value === 'string')
                    temp = +value;
                __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, temp, 'number');
                if (this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN) {
                    if (temp % 2 !== 0) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is not even.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                }
                else if (this.type === ISessionEngine_1.PARAMETER_TYPE.ODD) {
                    if (temp % 2 === 0) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is not odd.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                }
                else if (this.type === ISessionEngine_1.PARAMETER_TYPE.INT) {
                    if (!Number.isInteger(temp)) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is not an integer.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                }
                if (this.min || this.min === 0)
                    if (temp < this.min) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is smaller than the minimum ${this.min}.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                if (this.max || this.max === 0)
                    if (temp > this.max) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} is larger than the maximum ${this.max}.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                if (this.decimalplaces || this.decimalplaces === 0) {
                    const numStr = temp + '';
                    let decimalplaces = 0;
                    if (numStr.includes('.'))
                        decimalplaces = numStr.split('.')[1].length;
                    if (this.decimalplaces < decimalplaces) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${value} has not the correct number of decimalplaces (${this.decimalplaces}).`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                }
                break;
            case this.type === ISessionEngine_1.PARAMETER_TYPE.STRINGLIST:
                __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, value, 'string');
                const choicesChecker = (v) => {
                    // has to be a single value that is
                    // 1. convertible to number
                    // 2. between 0 and choices.length -1
                    const temp = +v;
                    __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, temp, 'number');
                    if (temp < 0 || temp > this.choices.length - 1) {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${v} is not within the range of the defined number choices.`);
                        throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                    }
                };
                if (this.visualization === ISessionEngine_1.PARAMETER_VISUALIZATION.CHECKLIST) {
                    // comma separated numbers
                    if (value.includes(',')) {
                        const values = value.split(',');
                        for (let i = 0; i < values.length; i++) {
                            if (values.filter(item => item === values[i]).length !== 1) {
                                const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid: The value ${values[i]} exists multiple times, but should only exist once.`);
                                throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error, false);
                            }
                            choicesChecker(values[i]);
                        }
                    }
                    else {
                        // to number
                        let temp = value;
                        if (typeof value === 'string')
                            temp = +value;
                        __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, temp, 'number');
                        choicesChecker(value);
                    }
                }
                else {
                    // to number
                    let temp = value;
                    if (typeof value === 'string')
                        temp = +value;
                    __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, temp, 'number');
                    choicesChecker(value);
                }
                break;
            default:
                __classPrivateFieldGet(this, _Parameter_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).isValid`, value, 'string');
                break;
        }
        return true;
    }
    resetToDefaultValue() {
        __classPrivateFieldSet(this, _Parameter_value, __classPrivateFieldGet(this, _Parameter_defaultValue, "f"), "f");
    }
    resetToSessionValue() {
        __classPrivateFieldSet(this, _Parameter_value, this.sessionValue, "f");
    }
    stringify() {
        switch (true) {
            case this.type === ISessionEngine_1.PARAMETER_TYPE.BOOL:
                return typeof this.value === 'string' ? this.value : this.value + '';
            case this.type === ISessionEngine_1.PARAMETER_TYPE.COLOR:
                return __classPrivateFieldGet(this, _Parameter_converter, "f").toHex8Color(this.value);
            case this.type === ISessionEngine_1.PARAMETER_TYPE.FILE:
                if (typeof this.value !== 'string') {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, "f")}).stringify: Error in stringify. Cannot stringify FileParameter that has not been uploaded yet.`);
                    throw __classPrivateFieldGet(this, _Parameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).value`, error);
                }
                return this.value;
            case this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN || this.type === ISessionEngine_1.PARAMETER_TYPE.FLOAT || this.type === ISessionEngine_1.PARAMETER_TYPE.INT || this.type === ISessionEngine_1.PARAMETER_TYPE.ODD:
                if (typeof this.value === 'string') {
                    // cast to number and round to decimalplaces if they exist
                    if (this.decimalplaces || this.decimalplaces === 0) {
                        const number = +this.value;
                        return number.toFixed(__classPrivateFieldGet(this, _Parameter_decimalplaces, "f"));
                    }
                    else {
                        return this.value;
                    }
                }
                else {
                    // round to decimalplaces if they exist
                    if (this.decimalplaces || this.decimalplaces === 0) {
                        return this.value.toFixed(__classPrivateFieldGet(this, _Parameter_decimalplaces, "f"));
                    }
                    else {
                        return this.value + '';
                    }
                }
            default:
                return this.value;
        }
    }
}
exports.Parameter = Parameter;
_Parameter_choices = new WeakMap(), _Parameter_converter = new WeakMap(), _Parameter_decimalplaces = new WeakMap(), _Parameter_defaultValue = new WeakMap(), _Parameter_defval = new WeakMap(), _Parameter_expression = new WeakMap(), _Parameter_format = new WeakMap(), _Parameter_group = new WeakMap(), _Parameter_id = new WeakMap(), _Parameter_inputValidator = new WeakMap(), _Parameter_logger = new WeakMap(), _Parameter_max = new WeakMap(), _Parameter_min = new WeakMap(), _Parameter_name = new WeakMap(), _Parameter_sessionEngine = new WeakMap(), _Parameter_structure = new WeakMap(), _Parameter_type = new WeakMap(), _Parameter_visualization = new WeakMap(), _Parameter_displayname = new WeakMap(), _Parameter_hidden = new WeakMap(), _Parameter_lastValidatedValue = new WeakMap(), _Parameter_order = new WeakMap(), _Parameter_sessionValue = new WeakMap(), _Parameter_tooltip = new WeakMap(), _Parameter_value = new WeakMap();
//# sourceMappingURL=Parameter.js.map