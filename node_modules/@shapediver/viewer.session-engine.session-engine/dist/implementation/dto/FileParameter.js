"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileParameter_logger, _FileParameter_sessionEngine, _FileParameter_uuidGenerator;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileParameter = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const Parameter_1 = require("./Parameter");
const MimeTypeUtils = __importStar(require("@shapediver/viewer.utils.mime-type"));
class FileParameter extends Parameter_1.Parameter {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor(paramDef, sessionEngine) {
        super(paramDef, sessionEngine);
        // #region Properties (5)
        _FileParameter_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _FileParameter_sessionEngine.set(this, void 0);
        _FileParameter_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        __classPrivateFieldSet(this, _FileParameter_sessionEngine, sessionEngine, "f");
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    upload() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.value === undefined)
                return this.defval;
            if (typeof this.value === 'string' && ((this.value.length === 36 && __classPrivateFieldGet(this, _FileParameter_uuidGenerator, "f").validate(this.value)) || this.value === ""))
                return this.value;
            const data = new File([
                typeof this.value === 'string' ?
                    new Blob([this.value], { type: 'text/plain' }) :
                    this.value
            ], 'upload', { type: this.value.type });
            let types = [data.type];
            // get all endings that are possible for this type
            const endings = MimeTypeUtils.mapMimeTypeToFileEndings(types);
            // get all mimeTypes that are possible for these endings
            endings.forEach((e) => types = types.concat(MimeTypeUtils.guessMimeTypeFromFilename(e)));
            let type;
            // check if one of the mime types is allowed
            let allowedType = false;
            for (let i = 0; i < types.length; i++) {
                if ((_a = this.format) === null || _a === void 0 ? void 0 : _a.includes(types[i])) {
                    allowedType = true;
                    type = types[i];
                    break;
                }
            }
            if (!allowedType) {
                const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, type of data (${data.type}) is not a valid type. Has to be ${this.format}.`);
                throw __classPrivateFieldGet(this, _FileParameter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).upload`, error);
            }
            __classPrivateFieldGet(this, _FileParameter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.PARAMETER, `Parameter(${this.id}).upload: Uploading FileParameter.`);
            return yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").uploadFile(this.id, data, type);
        });
    }
}
exports.FileParameter = FileParameter;
_FileParameter_logger = new WeakMap(), _FileParameter_sessionEngine = new WeakMap(), _FileParameter_uuidGenerator = new WeakMap();
//# sourceMappingURL=FileParameter.js.map