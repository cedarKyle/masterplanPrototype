import { SessionTreeNode } from './SessionTreeNode';
import { ShapeDiverResponseOutput } from '@shapediver/sdk.geometry-api-sdk-v2';
import { ISessionEngine } from '../interfaces/ISessionEngine';
export declare class OutputLoader {
    private readonly _sessionEngine;
    private readonly _dataEngine;
    private readonly _loadedOutputNodes;
    private readonly _lastOutputNodes;
    private readonly _performanceEvaluator;
    /**
     * The output loader takes care of loading the outputs of a session, storing them and returning stored or newly loaded nodes.
     *
     * @param _session the session for this output loader
     */
    constructor(_sessionEngine: ISessionEngine);
    /**
     * Load the outputs and return the scene graph node of the result.
     * In case the outputs have a delay property, it throws an OutputDelayException.
     *
     * @param outputs the outputs to load
     * @returns promise with a scene graph node
     */
    loadOutputs(nodeName: string, outputs: {
        [key: string]: ShapeDiverResponseOutput;
    }, outputsFreeze: {
        [key: string]: boolean;
    }): Promise<SessionTreeNode>;
    private assignMaterials;
    private mergeContentNodes;
}
//# sourceMappingURL=OutputLoader.d.ts.map