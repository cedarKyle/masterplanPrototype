"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SessionTreeNode_sessionNode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionTreeNode = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
class SessionTreeNode extends viewer_shared_node_tree_1.TreeNode {
    // #endregion Properties (1)
    // #region Constructors (1)
    /**
     * Special scene graph node for session data. Only to be created internally.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformation the array of transformations
     */
    constructor(name, parent, data, transformations) {
        super(name, parent, data, transformations);
        // #region Properties (1)
        _SessionTreeNode_sessionNode.set(this, true);
    }
    // #endregion Constructors (1)
    // #region Public Accessors (1)
    get sessionNode() {
        return __classPrivateFieldGet(this, _SessionTreeNode_sessionNode, "f");
    }
}
exports.SessionTreeNode = SessionTreeNode;
_SessionTreeNode_sessionNode = new WeakMap();
//# sourceMappingURL=SessionTreeNode.js.map