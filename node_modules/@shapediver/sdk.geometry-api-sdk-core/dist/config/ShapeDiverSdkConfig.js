"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkConfigInternal = exports.ShapeDiverSdkConfigType = void 0;
const ShapeDiverErrors_1 = require("../ShapeDiverErrors");
/** Supported types of the ShapeDiver configuration object */
var ShapeDiverSdkConfigType;
(function (ShapeDiverSdkConfigType) {
    ShapeDiverSdkConfigType["BASE_URL"] = "BASE_URL";
    ShapeDiverSdkConfigType["JWT_TOKEN"] = "JWT_TOKEN";
    ShapeDiverSdkConfigType["REQUEST_HEADERS"] = "REQUEST_HEADERS";
})(ShapeDiverSdkConfigType = exports.ShapeDiverSdkConfigType || (exports.ShapeDiverSdkConfigType = {}));
/** Private interface of the ShapeDiver configuration object */
class SdkConfigInternal {
    constructor(baseUrl) {
        this._baseUrl = baseUrl;
        this._headers = {};
        this._jwt = "";
    }
    get baseUrl() {
        return this._baseUrl;
    }
    get headers() {
        return this._headers;
    }
    get jwt() {
        return this._jwt;
    }
    toConfig() {
        return {
            baseUrl: this._baseUrl,
            headers: this._headers,
            jwt: this._jwt,
        };
    }
    setConfigValue(type, value) {
        switch (type) {
            case ShapeDiverSdkConfigType.BASE_URL:
                this._baseUrl = SdkConfigInternal.validateValue(type, value, "string");
                break;
            case ShapeDiverSdkConfigType.JWT_TOKEN:
                this._jwt = SdkConfigInternal.validateValue(type, value, "string");
                break;
            case ShapeDiverSdkConfigType.REQUEST_HEADERS:
                this._headers = SdkConfigInternal.validateValue(type, value, "string_map");
                break;
            default:
                throw new ShapeDiverErrors_1.ShapeDiverError(`Invalid config-type ${type}`);
        }
    }
    static validateValue(type, value, dataType) {
        switch (dataType) {
            case "string":
                if (typeof value !== "string")
                    throw new ShapeDiverErrors_1.ShapeDiverError(`Invalid value for config-type '${type}': Value must be a string`);
                break;
            case "string_map":
                if (typeof value !== "object" || !Object.values(value).every(v => typeof v === "string"))
                    throw new ShapeDiverErrors_1.ShapeDiverError(`Invalid value for config-type '${type}': Value must be a string-map`);
                break;
        }
        return value;
    }
}
exports.SdkConfigInternal = SdkConfigInternal;
//# sourceMappingURL=ShapeDiverSdkConfig.js.map