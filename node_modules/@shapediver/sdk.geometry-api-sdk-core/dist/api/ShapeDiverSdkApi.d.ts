import { SdkConfigInternal } from "../config/ShapeDiverSdkConfig";
export interface ShapeDiverSdkApiRequestOptions {
    contentType?: string;
    responseType: ShapeDiverSdkApiResponseType;
    disableAuthorization?: boolean;
    disableCustomHeaders?: boolean;
    accept?: string;
}
export declare enum ShapeDiverSdkApiResponseType {
    JSON = "json",
    DATA = "arraybuffer",
    TEXT = "text"
}
export declare class ShapeDiverSdkApi {
    private config;
    constructor(config: SdkConfigInternal);
    private buildRequestConfig;
    private buildUrl;
    /**
     * Processes the given Axios error, maps it content and throws the
     * respective ShapeDiver error.
     *
     * @param error
     * @param responseType
     * @throws
     * @private
     */
    private static processError;
    /**
     * Axios returns errors in the same type that we where using to specify the
     * data response type of the happy-path. Thus, we have to convert them
     * manually.
     *
     * @param data
     * @private
     */
    private static convertErrorResponseData;
    get<T>(url: string, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    post<T>(url: string, data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    put<T>(url: string, data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    patch<T>(url: string, data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    delete<T>(url: string, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
}
//# sourceMappingURL=ShapeDiverSdkApi.d.ts.map