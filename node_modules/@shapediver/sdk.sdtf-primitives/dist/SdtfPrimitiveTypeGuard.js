"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfPrimitiveTypeGuard = void 0;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
class SdtfPrimitiveTypeGuard {
    /**
     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.BOOLEAN`.
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertBoolean(value) {
        if (!this.isBoolean(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a primitive boolean type.");
    }
    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */
    static isBoolean(value) {
        return typeof value === "boolean";
    }
    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */
    static isBooleanType(typeHint) {
        return typeHint === sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.BOOLEAN;
    }
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertString(value) {
        if (!this.isString(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a primitive string type.");
    }
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     */
    static isString(value) {
        return typeof value === "string";
    }
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     */
    static isStringType(typeHint) {
        return [
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.CHAR,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.GUID,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.STRING,
        ].includes(typeHint);
    }
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertNumber(value) {
        if (!this.isNumber(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a primitive number type.");
    }
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     */
    static isNumber(value) {
        return (0, sdk_sdtf_core_1.isNumber)(value);
    }
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     */
    static isNumberType(typeHint) {
        return [
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DECIMAL,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DOUBLE,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.SINGLE,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT8,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT16,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT32,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT64,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT8,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT16,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT32,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT64,
        ].includes(typeHint);
    }
    /**
     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.COLOR`.
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertColor(value) {
        if (!this.isColor(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a primitive color type.");
    }
    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.COLOR`. */
    static isColor(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 4;
    }
    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.COLOR`. */
    static isColorType(typeHint) {
        return typeHint === sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.COLOR;
    }
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertDataView(value) {
        if (!this.isDataView(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a primitive data type.");
    }
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     */
    static isDataView(value) {
        return ArrayBuffer.isView(value);
    }
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     */
    static isDataViewType(typeHint) {
        return [
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DATA,
            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.IMAGE,
        ].includes(typeHint);
    }
}
exports.SdtfPrimitiveTypeGuard = SdtfPrimitiveTypeGuard;
//# sourceMappingURL=SdtfPrimitiveTypeGuard.js.map