import { SdtfPrimitiveTypeHintName } from "@shapediver/sdk.sdtf-core";
import { SdtfPrimitiveColorType } from "./ISdtfPrimitiveTypes";
export declare class SdtfPrimitiveTypeGuard {
    /**
     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.BOOLEAN`.
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertBoolean(value: unknown): asserts value is boolean;
    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */
    static isBoolean(value: unknown): value is boolean;
    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */
    static isBooleanType(typeHint: string | undefined): typeHint is SdtfPrimitiveTypeHintName.BOOLEAN;
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertString(value: unknown): asserts value is string;
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     */
    static isString(value: unknown): value is string;
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.CHAR`
     *   * `SdtfPrimitiveTypeHintName.GUID`
     *   * `SdtfPrimitiveTypeHintName.STRING`
     */
    static isStringType(typeHint: string | undefined): typeHint is SdtfPrimitiveTypeHintName.CHAR | SdtfPrimitiveTypeHintName.GUID | SdtfPrimitiveTypeHintName.STRING;
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertNumber(value: unknown): asserts value is number;
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     */
    static isNumber(value: unknown): value is number;
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.DECIMAL`
     *   * `SdtfPrimitiveTypeHintName.DOUBLE`
     *   * `SdtfPrimitiveTypeHintName.SINGLE`
     *   * `SdtfPrimitiveTypeHintName.INT8`
     *   * `SdtfPrimitiveTypeHintName.INT16`
     *   * `SdtfPrimitiveTypeHintName.INT32`
     *   * `SdtfPrimitiveTypeHintName.INT64`
     *   * `SdtfPrimitiveTypeHintName.UINT8`
     *   * `SdtfPrimitiveTypeHintName.UINT16`
     *   * `SdtfPrimitiveTypeHintName.UINT32`
     *   * `SdtfPrimitiveTypeHintName.UINT64`
     */
    static isNumberType(typeHint: string | undefined): typeHint is SdtfPrimitiveTypeHintName.DECIMAL | SdtfPrimitiveTypeHintName.DOUBLE | SdtfPrimitiveTypeHintName.SINGLE | SdtfPrimitiveTypeHintName.INT8 | SdtfPrimitiveTypeHintName.INT16 | SdtfPrimitiveTypeHintName.INT32 | SdtfPrimitiveTypeHintName.INT64 | SdtfPrimitiveTypeHintName.UINT8 | SdtfPrimitiveTypeHintName.UINT16 | SdtfPrimitiveTypeHintName.UINT32 | SdtfPrimitiveTypeHintName.UINT64;
    /**
     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.COLOR`.
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertColor(value: unknown): asserts value is SdtfPrimitiveColorType;
    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.COLOR`. */
    static isColor(value: unknown): value is SdtfPrimitiveColorType;
    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.COLOR`. */
    static isColorType(typeHint: string | undefined): typeHint is SdtfPrimitiveTypeHintName.COLOR;
    /**
     * Runtime check that raises an error when the given value is not of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     * @throws {@link SdtfError} when the invariant is not met.
     */
    static assertDataView(value: unknown): asserts value is DataView;
    /**
     * Returns `true` when the given value is of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     */
    static isDataView(value: unknown): value is DataView;
    /**
     * Returns `true` when the given type hint name is of type:
     *   * `SdtfPrimitiveTypeHintName.DATA`
     *   * `SdtfPrimitiveTypeHintName.IMAGE`
     */
    static isDataViewType(typeHint: string | undefined): typeHint is SdtfPrimitiveTypeHintName.DATA | SdtfPrimitiveTypeHintName.IMAGE;
}
//# sourceMappingURL=SdtfPrimitiveTypeGuard.d.ts.map