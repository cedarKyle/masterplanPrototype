import { ISdtfReadableAccessor, ISdtfWriteableAccessor, SdtfPrimitiveTypeHintName } from "@shapediver/sdk.sdtf-core";
import { SdtfPrimitiveColorType } from "./ISdtfPrimitiveTypes";
/** Validates values that are of a type hint supported by this integration. */
export declare class SdtfPrimitiveTypeValidator {
    /**
     * Validates the given component of the given type.
     * @throws {@link SdtfError} when the given type is not supported.
     */
    validateComponent(typeHint: SdtfPrimitiveTypeHintName, value?: unknown, accessor?: ISdtfReadableAccessor | ISdtfWriteableAccessor): boolean;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.BOOLEAN` type, otherwise `false`. */
    static validateBooleanType(value: unknown): value is boolean;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.CHAR` type, otherwise `false`. */
    static validateCharType(value: unknown): value is string;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.COLOR` type. */
    static validateColorType(value: unknown): value is SdtfPrimitiveColorType | string;
    /**
     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.DECIMAL` type, otherwise `false`.
     *
     * WARNING:
     * JavaScript floating-point numbers have a maximum precision of 17, while .Net decimals have a precision of 29.
     * Thus, JavaScript automatically rounds them to a precision of 17.
     */
    static validateDecimalType(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.DOUBLE` type, otherwise `false`. */
    static validateDoubleType(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.GUID` type, otherwise `false`. */
    static validateGuidType(value: unknown): value is string;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT8` type, otherwise `false`. */
    static validateInt8Type(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT16` type, otherwise `false`. */
    static validateInt16Type(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT32` type, otherwise `false`. */
    static validateInt32Type(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT64` type, otherwise `false`. */
    static validateInt64Type(value: unknown): value is number;
    /**
     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.SINGLE` type, otherwise `false`.
     *
     * NOTE:
     * The validation does only a rough check if the precision does not exceed 9 digits.
     * However, this might still lead to a loss in precision due to the nature of single-precision floating points.
     */
    static validateSingleType(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.STRING` type, otherwise `false`. */
    static validateStringType(value: unknown): value is string;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT8` type, otherwise `false`. */
    static validateUint8Type(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT16` type, otherwise `false`. */
    static validateUint16Type(value: unknown): value is number;
    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT32` type, otherwise `false`. */
    static validateUint32Type(value: unknown): value is number;
    /**
     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT64` type, otherwise `false`.
     *
     * WARNING:
     * Max safe integer in JavaScript is `9007199254740991`, while uint64 limit is `18446744073709551615`.
     * Thus, numbers bigger than safe integer are automatically mapped to `Number.Infinity`.
     */
    static validateUint64Type(value: unknown): value is number;
}
//# sourceMappingURL=SdtfPrimitiveTypeValidator.d.ts.map