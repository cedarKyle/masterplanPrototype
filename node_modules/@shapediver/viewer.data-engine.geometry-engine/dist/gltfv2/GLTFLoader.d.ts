import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types';
export declare enum GLTF_EXTENSIONS {
    KHR_BINARY_GLTF = "KHR_binary_glTF",
    KHR_DRACO_MESH_COMPRESSION = "KHR_draco_mesh_compression",
    KHR_LIGHTS_PUNCTUAL = "KHR_lights_punctual",
    KHR_MATERIALS_CLEARCOAT = "KHR_materials_clearcoat",
    KHR_MATERIALS_IOR = "KHR_materials_ior",
    KHR_MATERIALS_PBRSPECULARGLOSSINESS = "KHR_materials_pbrSpecularGlossiness",
    KHR_MATERIALS_SHEEN = "KHR_materials_sheen",
    KHR_MATERIALS_SPECULAR = "KHR_materials_specular",
    KHR_MATERIALS_TRANSMISSION = "KHR_materials_transmission",
    KHR_MATERIALS_UNLIT = "KHR_materials_unlit",
    KHR_MATERIALS_VARIANTS = "KHR_materials_variants",
    KHR_MATERIALS_VOLUME = "KHR_materials_volume",
    KHR_MESH_QUANTIZATION = "KHR_mesh_quantization",
    KHR_TEXTURE_TRANSFORM = "KHR_texture_transform",
    SHAPEDIVER_MATERIALS_PRESET = "SHAPEDIVER_materials_preset"
}
export declare class GLTFLoader {
    private readonly BINARY_EXTENSION_HEADER_LENGTH;
    private readonly _converter;
    private readonly _globalTransformation;
    private readonly _httpClient;
    private readonly _logger;
    private readonly _performanceEvaluator;
    private readonly _uuidGenerator;
    private _accessorLoader;
    private _baseUri;
    private _body;
    private _bufferLoader;
    private _bufferViewLoader;
    private _content;
    private _geometryLoader;
    private _materialLoader;
    private _nodes;
    private _textureLoader;
    load(content: IGLTF_v2, gltfBinary?: ArrayBuffer, gltfHeader?: {
        magic: string;
        version: number;
        length: number;
        contentLength: number;
        contentFormat: number;
    }, baseUri?: string): Promise<ITreeNode>;
    loadWithUrl(url?: string | undefined): Promise<ITreeNode>;
    /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
         * @param {number} animationIndex
         * @return {Promise<AnimationClip>}
         */
    private loadAnimation;
    private loadCamera;
    private loadLights;
    private loadNode;
    private loadScene;
    private loadSkin;
    private validateVersionAndExtensions;
}
//# sourceMappingURL=GLTFLoader.d.ts.map