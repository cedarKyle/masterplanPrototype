"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferLoader = void 0;
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
class BufferLoader {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor(_content, _body, _baseUri) {
        this._content = _content;
        this._body = _body;
        this._baseUri = _baseUri;
        // #region Properties (2)
        this._httpClient = tsyringe_1.container.resolve(viewer_shared_services_1.HttpClient);
        this._loaded = {};
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    getBuffer(bufferId) {
        if (!this._content.buffers)
            throw new Error('BufferLoader.getBuffer: Buffers not available.');
        if (!this._content.buffers[bufferId])
            throw new Error('BufferLoader.getBuffer: Buffer not available.');
        if (!this._loaded[bufferId])
            throw new Error('BufferLoader.getBuffer: Buffer not loaded.');
        return this._loaded[bufferId];
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._content.buffers)
                return;
            let promises = [];
            for (let i = 0; i < this._content.buffers.length; i++) {
                const bufferId = i;
                const buffer = this._content.buffers[bufferId];
                if (buffer.type && buffer.type !== 'arraybuffer') {
                    throw new Error(`BufferLoader.load: ${buffer.type} is not supported.`);
                }
                // If present, GLB container is required to be the first buffer.
                if (buffer.uri === undefined && bufferId === 0) {
                    if (!this._body)
                        throw new Error(`BufferLoader.load: Buffer not available.`);
                    this._loaded[bufferId] = this._body;
                    return;
                }
                const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
                const dataUriRegexResult = buffer.uri.match(dataUriRegex);
                // Safari can not handle Data URIs through XMLHttpRequest so process manually
                if (dataUriRegexResult) {
                    const isBase64 = !!dataUriRegexResult[2];
                    let data = dataUriRegexResult[3];
                    data = decodeURIComponent(data);
                    if (isBase64)
                        data = atob(data);
                    const view = new Uint8Array(data.length);
                    for (let i = 0; i < data.length; i++) {
                        view[i] = data.charCodeAt(i);
                    }
                    this._loaded[bufferId] = view.buffer;
                }
                else {
                    let httpResultPromise = this._httpClient.get(this._baseUri + '/' + buffer.uri, {
                        responseType: 'arraybuffer'
                    }).then(response => { this._loaded[bufferId] = response.data; });
                    promises.push(httpResultPromise);
                }
            }
            yield Promise.all(promises);
        });
    }
}
exports.BufferLoader = BufferLoader;
//# sourceMappingURL=BufferLoader.js.map