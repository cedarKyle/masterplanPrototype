"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferViewLoader = void 0;
class BufferViewLoader {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(_content, _bufferLoader) {
        this._content = _content;
        this._bufferLoader = _bufferLoader;
        // #region Properties (1)
        this._loaded = {};
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    getBufferView(bufferViewId) {
        if (!this._content.bufferViews)
            throw new Error('BufferViewLoader.load: BufferViews not available.');
        if (!this._content.bufferViews[bufferViewId])
            throw new Error('BufferViewLoader.load: BufferView not available.');
        if (!this._loaded[bufferViewId])
            throw new Error('BufferViewLoader.load: BufferView not loaded.');
        return this._loaded[bufferViewId];
    }
    load() {
        if (!this._content.bufferViews)
            return;
        for (let i = 0; i < this._content.bufferViews.length; i++) {
            const bufferViewId = i;
            if (!this._content.bufferViews[bufferViewId])
                throw new Error('BufferViewLoader.load: BufferView not available.');
            const bufferView = this._content.bufferViews[bufferViewId];
            const byteLength = bufferView.byteLength || 0;
            const byteOffset = bufferView.byteOffset || 0;
            if (bufferView.buffer === undefined)
                throw new Error('BufferViewLoader.load: BufferView has no buffer defined.');
            const buffer = this._bufferLoader.getBuffer(bufferView.buffer);
            const result = buffer.slice(byteOffset, byteOffset + byteLength);
            this._loaded[bufferViewId] = result;
        }
    }
}
exports.BufferViewLoader = BufferViewLoader;
//# sourceMappingURL=BufferViewLoader.js.map