import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types';
import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { MaterialVariantsData } from '@shapediver/viewer.shared.types';
import { AccessorLoader } from './AccessorLoader';
import { BufferViewLoader } from './BufferViewLoader';
import { MaterialLoader } from './MaterialLoader';
export declare class GeometryLoader {
    private readonly _content;
    private readonly _accessorLoader;
    private readonly _bufferViewLoader;
    private readonly _materialLoader;
    private readonly _dracoModule;
    private _materialVariantsData;
    constructor(_content: IGLTF_v2, _accessorLoader: AccessorLoader, _bufferViewLoader: BufferViewLoader, _materialLoader: MaterialLoader, _dracoModule: any);
    get materialVariantsData(): MaterialVariantsData;
    loadMesh(meshId: number, weights?: number[]): ITreeNode;
    private loadPrimitive;
}
//# sourceMappingURL=GeometryLoader.d.ts.map