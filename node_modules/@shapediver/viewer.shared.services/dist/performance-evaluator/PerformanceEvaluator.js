"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceEvaluator = void 0;
const tsyringe_1 = require("tsyringe");
let PerformanceEvaluator = class PerformanceEvaluator {
    /**
     * Start the evaluation with a specific id.
     *
     * @param id
     */
    start(time) {
        this._eval = {
            start: time || performance.now(),
            section: {}
        };
    }
    /**
     * Start the evaluation of a section with a specific id.
     *
     * @param id
     */
    startSection(sectionId, time) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        this._eval.section[sectionId] = {
            start: time || performance.now(),
        };
    }
    /**
     * End the performance evaluation of a section and calculate the duration.
     *
     * @param id
     */
    endSection(sectionId) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        if (!this._eval.section[sectionId])
            return;
        if (this._eval.section[sectionId].end)
            return;
        this._eval.section[sectionId].end = performance.now();
        this._eval.section[sectionId].duration = this._eval.section[sectionId].end - this._eval.section[sectionId].start;
    }
    /**
     * End the performance evaluation and calculate the duration.
     *
     * @param id
     */
    end() {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        this._eval.end = performance.now();
        this._eval.duration = this._eval.end - this._eval.start;
    }
    /**
     * Get the evaluation data for a specific id.
     *
     * @param id
     */
    getEvaluation() {
        return this._eval;
    }
    /**
     * Get the evaluation data for a specific id.
     *
     * @param id
     */
    getEvaluationToString() {
        const e = this._eval;
        return `Performance Evaluation: ${e.duration}ms\n`;
    }
};
PerformanceEvaluator = __decorate([
    (0, tsyringe_1.singleton)()
], PerformanceEvaluator);
exports.PerformanceEvaluator = PerformanceEvaluator;
//# sourceMappingURL=PerformanceEvaluator.js.map