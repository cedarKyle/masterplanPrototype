import { IDomEventListener } from './IDomEventListener';
export declare class DomEventEngine {
    private readonly _domEventListeners;
    private readonly _uuidGenerator;
    private _allowListeners;
    private _canvas;
    private _currentMousePosition;
    private _onMouseWheel;
    private _onMouseDown;
    private _onMouseMove;
    private _onKeyDownMousePositionHelper;
    private _onMouseUp;
    private _onMouseOut;
    private _onTouchStart;
    private _onTouchMove;
    private _onTouchUp;
    private _onTouchCancel;
    private _onKeyDown;
    private _onContextMenu;
    constructor(canvas: HTMLCanvasElement);
    addDomEventListener(listener: IDomEventListener): string;
    /**
     * Allow / disallow events.
     * This can be used to disable events for a specific viewer.
     *
     * Example use case: If you don't want to allow mouse wheel events for a specific viewer so that users can scroll past the viewer.
     *
     * Be aware that this might cause some issues with the the camera controls if the mouse / touch events are disabled only partially.
     *
     * @param allowedListeners
     */
    allowEventListeners(allowedListeners: {
        mousewheel?: boolean;
        mousedown?: boolean;
        mousemove?: boolean;
        mouseup?: boolean;
        mouseout?: boolean;
        touchstart?: boolean;
        touchmove?: boolean;
        touchend?: boolean;
        touchcancel?: boolean;
        keydown?: boolean;
        contextmenu?: boolean;
    }): void;
    dispose(): void;
    removeAllDomEventListener(): void;
    removeDomEventListener(id: string): boolean;
    private addEventListeners;
    private onContextMenu;
    private onKeyDown;
    private onKeyDownMousePositionHelper;
    private onMouseDown;
    private onMouseMove;
    private onMouseUp;
    private onMouseOut;
    private onMouseWheel;
    private onTouchUp;
    private onTouchCancel;
    private onTouchMove;
    private onTouchStart;
    private removeEventListeners;
}
//# sourceMappingURL=DomEventEngine.d.ts.map