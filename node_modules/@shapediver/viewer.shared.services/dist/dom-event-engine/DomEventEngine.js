"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomEventEngine = void 0;
const tsyringe_1 = require("tsyringe");
const UuidGenerator_1 = require("../uuid-generator/UuidGenerator");
class DomEventEngine {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor(canvas) {
        // #region Properties (5)
        this._domEventListeners = {};
        this._uuidGenerator = tsyringe_1.container.resolve(UuidGenerator_1.UuidGenerator);
        this._allowListeners = {
            mousewheel: true,
            mousedown: true,
            mousemove: true,
            mouseup: true,
            mouseout: true,
            touchstart: true,
            touchmove: true,
            touchend: true,
            touchcancel: true,
            keydown: true,
            contextmenu: true,
        };
        this._currentMousePosition = { x: 0, y: 0 };
        this._canvas = canvas;
        this._onMouseWheel = this.onMouseWheel.bind(this);
        this._onMouseDown = this.onMouseDown.bind(this);
        this._onMouseMove = this.onMouseMove.bind(this);
        this._onKeyDownMousePositionHelper = this.onKeyDownMousePositionHelper.bind(this);
        this._onMouseUp = this.onMouseUp.bind(this);
        this._onMouseOut = this.onMouseOut.bind(this);
        this._onTouchStart = this.onTouchStart.bind(this);
        this._onTouchMove = this.onTouchMove.bind(this);
        this._onTouchUp = this.onTouchUp.bind(this);
        this._onTouchCancel = this.onTouchCancel.bind(this);
        this._onKeyDown = this.onKeyDown.bind(this);
        this._onContextMenu = this.onContextMenu.bind(this);
        this.addEventListeners();
    }
    // #endregion Constructors (1)
    // #region Public Methods (5)
    addDomEventListener(listener) {
        const id = this._uuidGenerator.create();
        this._domEventListeners[id] = listener;
        return id;
    }
    /**
     * Allow / disallow events.
     * This can be used to disable events for a specific viewer.
     *
     * Example use case: If you don't want to allow mouse wheel events for a specific viewer so that users can scroll past the viewer.
     *
     * Be aware that this might cause some issues with the the camera controls if the mouse / touch events are disabled only partially.
     *
     * @param allowedListeners
     */
    allowEventListeners(allowedListeners) {
        if (allowedListeners.mousewheel !== undefined && this._allowListeners.mousewheel !== allowedListeners.mousewheel) {
            if (allowedListeners.mousewheel) {
                this._canvas.addEventListener("mousewheel", this._onMouseWheel);
                this._canvas.addEventListener("MozMousePixelScroll", this._onMouseWheel); // firefox
            }
            else {
                this._canvas.removeEventListener("mousewheel", this._onMouseWheel);
                this._canvas.removeEventListener("MozMousePixelScroll", this._onMouseWheel); // firefox
            }
            this._allowListeners.mousewheel = allowedListeners.mousewheel;
        }
        if (allowedListeners.mousedown !== undefined && this._allowListeners.mousedown !== allowedListeners.mousedown) {
            if (allowedListeners.mousedown) {
                this._canvas.addEventListener("mousedown", this._onMouseDown);
            }
            else {
                this._canvas.removeEventListener("mousedown", this._onMouseDown);
            }
            this._allowListeners.mousedown = allowedListeners.mousedown;
        }
        if (allowedListeners.mousemove !== undefined && this._allowListeners.mousemove !== allowedListeners.mousemove) {
            if (allowedListeners.mousemove) {
                this._canvas.addEventListener("mousemove", this._onMouseMove);
                window.addEventListener("mousemove", this._onKeyDownMousePositionHelper);
            }
            else {
                this._canvas.removeEventListener("mousemove", this._onMouseMove);
                window.removeEventListener("mousemove", this._onKeyDownMousePositionHelper);
            }
            this._allowListeners.mousemove = allowedListeners.mousemove;
        }
        if (allowedListeners.mouseup !== undefined && this._allowListeners.mouseup !== allowedListeners.mouseup) {
            if (allowedListeners.mouseup) {
                this._canvas.addEventListener("mouseup", this._onMouseUp);
            }
            else {
                this._canvas.removeEventListener("mouseup", this._onMouseUp);
            }
            this._allowListeners.mouseup = allowedListeners.mouseup;
        }
        if (allowedListeners.mouseout !== undefined && this._allowListeners.mouseout !== allowedListeners.mouseout) {
            if (allowedListeners.mouseout) {
                this._canvas.addEventListener("mouseout", this._onMouseOut);
            }
            else {
                this._canvas.removeEventListener("mouseout", this._onMouseOut);
            }
            this._allowListeners.mouseout = allowedListeners.mouseout;
        }
        if (allowedListeners.touchstart !== undefined && this._allowListeners.touchstart !== allowedListeners.touchstart) {
            if (allowedListeners.touchstart) {
                window.addEventListener("touchstart", this._onTouchStart, { passive: false });
            }
            else {
                window.removeEventListener("touchstart", this._onTouchStart);
            }
            this._allowListeners.touchstart = allowedListeners.touchstart;
        }
        if (allowedListeners.touchmove !== undefined && this._allowListeners.touchmove !== allowedListeners.touchmove) {
            if (allowedListeners.touchmove) {
                window.addEventListener("touchmove", this._onTouchMove, { passive: false });
            }
            else {
                window.removeEventListener("touchmove", this._onTouchMove);
            }
            this._allowListeners.touchmove = allowedListeners.touchmove;
        }
        if (allowedListeners.touchend !== undefined && this._allowListeners.touchend !== allowedListeners.touchend) {
            if (allowedListeners.touchend) {
                window.addEventListener("touchend", this._onTouchUp, { passive: false });
            }
            else {
                window.removeEventListener("touchend", this._onTouchUp);
            }
            this._allowListeners.touchend = allowedListeners.touchend;
        }
        if (allowedListeners.touchcancel !== undefined && this._allowListeners.touchcancel !== allowedListeners.touchcancel) {
            if (allowedListeners.touchcancel) {
                window.addEventListener("touchcancel", this._onTouchCancel, { passive: false });
            }
            else {
                window.removeEventListener("touchcancel", this._onTouchCancel);
            }
            this._allowListeners.touchcancel = allowedListeners.touchcancel;
        }
        if (allowedListeners.keydown !== undefined && this._allowListeners.keydown !== allowedListeners.keydown) {
            if (allowedListeners.keydown) {
                window.addEventListener("keydown", this._onKeyDown);
            }
            else {
                window.removeEventListener("keydown", this._onKeyDown);
            }
            this._allowListeners.keydown = allowedListeners.keydown;
        }
        if (allowedListeners.contextmenu !== undefined && this._allowListeners.contextmenu !== allowedListeners.contextmenu) {
            if (allowedListeners.contextmenu) {
                this._canvas.addEventListener("contextmenu", this._onContextMenu);
            }
            else {
                this._canvas.removeEventListener("contextmenu", this._onContextMenu);
            }
            this._allowListeners.contextmenu = allowedListeners.contextmenu;
        }
    }
    dispose() {
        this.removeEventListeners();
    }
    removeAllDomEventListener() {
        for (let id in this._domEventListeners)
            delete this._domEventListeners[id];
    }
    removeDomEventListener(id) {
        if (this._domEventListeners[id]) {
            delete this._domEventListeners[id];
            return true;
        }
        return false;
    }
    // #endregion Public Methods (5)
    // #region Private Methods (12)
    addEventListeners() {
        this._canvas.addEventListener("mousewheel", this._onMouseWheel);
        this._canvas.addEventListener("MozMousePixelScroll", this._onMouseWheel); // firefox
        this._canvas.addEventListener("mousedown", this._onMouseDown);
        this._canvas.addEventListener("mousemove", this._onMouseMove);
        this._canvas.addEventListener("mouseup", this._onMouseUp);
        this._canvas.addEventListener("mouseout", this._onMouseOut);
        window.addEventListener("touchstart", this._onTouchStart, { passive: false });
        window.addEventListener("touchmove", this._onTouchMove, { passive: false });
        window.addEventListener("touchend", this._onTouchUp, { passive: false });
        window.addEventListener("touchcancel", this._onTouchCancel, { passive: false });
        window.addEventListener("keydown", this._onKeyDown);
        window.addEventListener("mousemove", this._onKeyDownMousePositionHelper);
        // just prevent right click menu
        this._canvas.addEventListener("contextmenu", this._onContextMenu);
    }
    onContextMenu(event) {
        event.preventDefault();
    }
    onKeyDown(event) {
        if (this._canvas === document.elementFromPoint(this._currentMousePosition.x, this._currentMousePosition.y))
            Object.values(this._domEventListeners).forEach(e => e.onKeyDown(event));
    }
    onKeyDownMousePositionHelper(event) {
        this._currentMousePosition = { x: event.pageX, y: event.pageY };
    }
    onMouseDown(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseDown(event));
    }
    onMouseMove(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseMove(event));
    }
    onMouseUp(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseUp(event));
        Object.values(this._domEventListeners).forEach(e => e.onMouseEnd(event));
    }
    onMouseOut(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseOut(event));
        Object.values(this._domEventListeners).forEach(e => e.onMouseEnd(event));
    }
    onMouseWheel(event) {
        event.preventDefault();
        event.stopPropagation();
        Object.values(this._domEventListeners).forEach(e => e.onMouseWheel(event));
    }
    onTouchUp(event) {
        if (event.composedPath().includes(this._canvas.parentElement)) {
            event.stopPropagation();
            Object.values(this._domEventListeners).forEach(e => e.onTouchUp(event));
            Object.values(this._domEventListeners).forEach(e => e.onTouchEnd(event));
        }
    }
    onTouchCancel(event) {
        if (event.composedPath().includes(this._canvas.parentElement)) {
            event.stopPropagation();
            Object.values(this._domEventListeners).forEach(e => e.onTouchCancel(event));
            Object.values(this._domEventListeners).forEach(e => e.onTouchEnd(event));
        }
    }
    onTouchMove(event) {
        if (event.composedPath().includes(this._canvas.parentElement)) {
            event.stopPropagation();
            Object.values(this._domEventListeners).forEach(e => e.onTouchMove(event));
        }
    }
    onTouchStart(event) {
        if (event.composedPath().includes(this._canvas.parentElement)) {
            event.stopPropagation();
            Object.values(this._domEventListeners).forEach(e => e.onTouchStart(event));
        }
    }
    removeEventListeners() {
        this._canvas.removeEventListener("mousewheel", this._onMouseWheel);
        this._canvas.removeEventListener("MozMousePixelScroll", this._onMouseWheel); // firefox
        this._canvas.removeEventListener("mousedown", this._onMouseDown);
        this._canvas.removeEventListener("mousemove", this._onMouseMove);
        this._canvas.removeEventListener("mouseup", this._onMouseUp);
        this._canvas.removeEventListener("mouseout", this._onMouseOut);
        window.removeEventListener("touchstart", this._onTouchStart);
        window.removeEventListener("touchmove", this._onTouchMove);
        window.removeEventListener("touchend", this._onTouchUp);
        window.removeEventListener("touchcancel", this._onTouchCancel);
        window.removeEventListener("keydown", this._onKeyDown);
        window.removeEventListener("mousemove", this._onKeyDownMousePositionHelper);
        this._canvas.removeEventListener("contextmenu", this._onContextMenu);
    }
}
exports.DomEventEngine = DomEventEngine;
//# sourceMappingURL=DomEventEngine.js.map