import { MainEventTypes } from './EventTypes';
import { ICallback } from './interfaces/ICallback';
import { IEvent } from './interfaces/IEvent';
import { UuidGenerator } from '../uuid-generator/UuidGenerator';
import { Logger } from '../logger/Logger';
export declare class EventEngine {
    protected readonly _uuidGenerator: UuidGenerator;
    protected readonly _logger: Logger;
    private _eventListeners;
    constructor();
    private convertTypeToString;
    /**
     * Adds a listener that listenes to the provided type. If no valid type is specified, an error is thrown.
     *
     * @param type the type of the event
     * @param cb the callback that should be called
     * @returns an unique token to be able to remove the listener
     */
    addListener(type: string | MainEventTypes, cb: ICallback): string;
    /**
     * Emits the event to all callbacks that listen to the type.
     *
     * @param type the type of the event
     * @param event the event to emit
     */
    emitEvent(type: string | MainEventTypes, event: IEvent): void;
    /**
     * Removes a listener with the specified token.
     *
     * @param token the token of the listener
     * @returns result of the targeted operation
     */
    removeListener(token: string): boolean;
}
//# sourceMappingURL=EventEngine.d.ts.map