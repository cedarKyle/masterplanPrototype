"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const axios_1 = __importDefault(require("axios"));
const tsyringe_1 = require("tsyringe");
const ShapeDiverViewerErrors_1 = require("../logger/ShapeDiverViewerErrors");
const errorHandler = (error) => {
    var _a, _b;
    if (error.response) {
        // Request was made and server responded with 4xx or 5xx
        const resp = error.response;
        throw new ShapeDiverViewerErrors_1.ShapeDiverViewerConnectionError(error.message || resp.data.message || (resp.data.desc || ((_a = resp.data.error) !== null && _a !== void 0 ? _a : "")), resp.status, (_b = resp.data.error) !== null && _b !== void 0 ? _b : "");
    }
    else if (error.request) {
        // The request was made but no response was received
        throw new ShapeDiverViewerErrors_1.ShapeDiverViewerConnectionError("The request was made but no response was received.");
    }
    else {
        // Something happened in setting up the request that triggered an Error
        throw new ShapeDiverViewerErrors_1.ShapeDiverViewerConnectionError(error.message);
    }
};
let HttpClient = class HttpClient {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor() {
        // #region Properties (2)
        this._dataCache = {};
        this._sessionLoading = {};
        axios_1.default.interceptors.response.use(response => {
            return response;
        }, error => {
            throw errorHandler(error);
        });
        axios_1.default.interceptors.request.use(response => {
            return response;
        }, error => {
            throw errorHandler(error);
        });
    }
    // #endregion Constructors (1)
    // #region Public Methods (7)
    getSessionId(href) {
        // searching for "/session/SESSION_ID/{'output' | 'export' | 'texture'}/ASSET_DATA"
        const parts = href.split('/');
        const sessionPartIndex = parts.indexOf('session');
        // There have to be at exactly 4 parts, including the session
        if (sessionPartIndex !== -1 && parts.length === sessionPartIndex + 4) {
            const sessionId = parts[sessionPartIndex + 1];
            // no such session has been registered, should never happen
            if (!this._sessionLoading[sessionId])
                return;
            return sessionId;
        }
        return;
    }
    addDataLoading(sessionId, callbacks) {
        this._sessionLoading[sessionId] = callbacks;
    }
    get(href, config = { responseType: 'arraybuffer' }, textureLoading = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataKey = btoa(href);
            if (dataKey in this._dataCache)
                return yield this._dataCache[dataKey];
            // try to get sessionId from href
            let sessionId = this.getSessionId(href);
            // if href does not have sessionId, use the first sesison, if available
            if (!sessionId && Object.keys(this._sessionLoading).length > 0)
                sessionId = Object.keys(this._sessionLoading)[0];
            // get the session loading functions, if available
            let sessionLoading;
            if (sessionId)
                sessionLoading = this._sessionLoading[sessionId];
            // separation texture vs everything else
            if (textureLoading) {
                // if we have a sessionId and the sessionLoading functions and the image is not a blob or data, we load it via the sdk
                if (sessionLoading !== undefined && sessionId !== undefined && !href.startsWith('blob:') && !href.startsWith('data:')) {
                    // take first session to load a texture that is not session related
                    this._dataCache[dataKey] = new Promise(resolve => {
                        sessionLoading.downloadTexture(sessionId, href).then((result) => {
                            resolve({
                                data: result[0],
                                headers: {
                                    'content-type': result[1]
                                }
                            });
                        });
                    });
                }
                else {
                    // we can load blobs and data urls directly
                    // or load it directly if we don't have a session
                    this._dataCache[dataKey] = (0, axios_1.default)(href, Object.assign({ method: 'get' }, config));
                }
            }
            else {
                if (!sessionLoading) {
                    // if there is no session to load from, we use the fallback option
                    this._dataCache[dataKey] = (0, axios_1.default)(href, Object.assign({ method: 'get' }, config));
                }
                else {
                    // all data links where we could somehow find a session to load it with
                    this._dataCache[dataKey] = new Promise((resolve, reject) => {
                        sessionLoading.getAsset(href)
                            .then((result) => {
                            resolve({
                                data: result[0],
                                headers: {
                                    'content-type': result[1]
                                }
                            });
                        })
                            .catch((e) => {
                            // if this fails, we just load it directly
                            resolve((0, axios_1.default)(href, Object.assign({ method: 'get' }, config)));
                        });
                    });
                }
            }
            return this._dataCache[dataKey];
        });
    }
    loadTexture(href) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(href, undefined, true);
        });
    }
    removeDataLoading(sessionId) {
        delete this._sessionLoading[sessionId];
    }
};
HttpClient = __decorate([
    (0, tsyringe_1.singleton)(),
    __metadata("design:paramtypes", [])
], HttpClient);
exports.HttpClient = HttpClient;
//# sourceMappingURL=HttpClient.js.map