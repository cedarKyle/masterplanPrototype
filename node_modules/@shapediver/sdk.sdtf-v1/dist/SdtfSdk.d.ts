import { ISdtfParser } from "@shapediver/sdk.sdtf-core";
import { ISdtfFormatter } from "./formatter/ISdtfFormatter";
import { SdtfConfig } from "./SdtfConfig";
import { ISdtfConstructor } from "./writer/ISdtfConstructor";
/** Partial definition of the sdk's config object. */
export declare type ISdtfConfig = Partial<SdtfConfig>;
/** Returns a new instance of the ShapeDiver sdTf SDK. */
export declare function create(config?: ISdtfConfig): Promise<SdtfSdk>;
export declare class SdtfSdk {
    private readonly config;
    constructor(config?: ISdtfConfig);
    /**
     * Instantiates and returns a new sdTF parser object.
     * The parser reads sdTF data from various sources and returns an asset object, that represents the hierarchy of
     * the sdTF file and provides easy access functionality for embedded values and binary data.
     */
    createParser(): ISdtfParser;
    /**
     * Instantiates and returns a new sdTF constructor object.
     * The constructor provides functionality to create new sdTF assets.
     */
    createConstructor(): ISdtfConstructor;
    /** Instantiates and returns a new formatter to convert sdTF components into prettified JSON data. */
    createFormatter(): ISdtfFormatter;
    /** Initializes all specified sdTF integrations. */
    init(): Promise<void>;
}
//# sourceMappingURL=SdtfSdk.d.ts.map