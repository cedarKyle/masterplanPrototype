"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfComponentValidator = void 0;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
class SdtfComponentValidator {
    constructor(componentList) {
        this.componentList = componentList;
    }
    validateAccessor(accessor) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isUint)(accessor.bufferView))
            throw new sdk_sdtf_core_1.SdtfError("Invalid accessor: Required property 'bufferView' must be an unsigned integer.");
        // Validate component references
        if (accessor.bufferView >= this.componentList.bufferViews.length)
            throw new sdk_sdtf_core_1.SdtfError("Invalid accessor: Buffer view index is out of range.");
    }
    validateAsset(asset) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isUint)(asset.fileInfo))
            throw new sdk_sdtf_core_1.SdtfError("Invalid asset: Required property 'fileInfo' must be an unsigned integer.");
        // Validate component references
        if (asset.fileInfo !== 0) // There can only be one file info object
            throw new sdk_sdtf_core_1.SdtfError("Invalid asset: Type hint index is out of range.");
    }
    validateAttributes(attributes) {
        if (!attributes.entries)
            throw new sdk_sdtf_core_1.SdtfError("Invalid attributes: Required property 'entries' must be a string-keyed object.");
        Object.values(attributes.entries)
            .forEach((attribute) => {
            // Validate optional properties
            if (attribute.accessor && !(0, sdk_sdtf_core_1.isUint)(attribute.accessor)) {
                throw new sdk_sdtf_core_1.SdtfError("Invalid attribute: Optional property 'accessor' must be an unsigned integer.");
            }
            if (attribute.typeHint && !(0, sdk_sdtf_core_1.isUint)(attribute.typeHint))
                throw new sdk_sdtf_core_1.SdtfError("Invalid attribute: Optional property 'typeHint' must be an unsigned integer.");
            // Validate component references
            if (attribute.accessor && attribute.accessor >= this.componentList.accessors.length)
                throw new sdk_sdtf_core_1.SdtfError("Invalid attribute: Accessor index is out of range.");
            if (attribute.typeHint && attribute.typeHint >= this.componentList.typeHints.length)
                throw new sdk_sdtf_core_1.SdtfError("Invalid attribute: Type hint index is out of range.");
        });
    }
    validateBuffer(buffer) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isUint)(buffer.byteLength))
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer: Required property 'byteLength' must be an unsigned integer.");
    }
    validateBufferView(bufferView) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isUint)(bufferView.buffer))
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer view: Required property 'buffer' must be an unsigned integer.");
        if (!(0, sdk_sdtf_core_1.isUint)(bufferView.byteLength))
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer view: Required property 'byteLength' must be an unsigned integer.");
        if (!(0, sdk_sdtf_core_1.isUint)(bufferView.byteOffset))
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer view: Required property 'byteOffset' must be an unsigned integer.");
        if (!(0, sdk_sdtf_core_1.isNonEmptyString)(bufferView.contentType))
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer view: Required property 'contentType' must be a non-empty string.");
        // Validate component references
        if (bufferView.buffer >= this.componentList.buffers.length)
            throw new sdk_sdtf_core_1.SdtfError("Invalid buffer view: Buffer index is out of range.");
    }
    validateChunk(chunk) {
        try {
            this.validateChunkOrNode(chunk);
        }
        catch (e) {
            throw new sdk_sdtf_core_1.SdtfError(`Invalid chunk: ${e.message}`);
        }
        // Validate required properties
        if (typeof chunk.name !== "string")
            throw new sdk_sdtf_core_1.SdtfError("Invalid chunk: Required property 'name' must be a string.");
    }
    validateDataItem(dataItem) {
        // Validate optional properties
        if (dataItem.accessor && !(0, sdk_sdtf_core_1.isUint)(dataItem.accessor))
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Optional property 'accessor' must be an unsigned integer.");
        if (dataItem.attributes && !(0, sdk_sdtf_core_1.isUint)(dataItem.attributes))
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Optional property 'attributes' must be an unsigned integer.");
        if (dataItem.typeHint && !(0, sdk_sdtf_core_1.isUint)(dataItem.typeHint))
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Optional property 'typeHint' must be an unsigned integer.");
        // Validate component references
        if (dataItem.accessor && dataItem.accessor >= this.componentList.accessors.length)
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Accessor index is out of range.");
        if (dataItem.attributes && dataItem.attributes >= this.componentList.attributes.length)
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Attributes index is out of range.");
        if (dataItem.typeHint && dataItem.typeHint >= this.componentList.typeHints.length)
            throw new sdk_sdtf_core_1.SdtfError("Invalid item: Type hint index is out of range.");
    }
    validateFileInfo(fileInfo) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isNonEmptyString)(fileInfo.version))
            throw new sdk_sdtf_core_1.SdtfError("Invalid file info: Required property 'version' must be a non-empty string.");
    }
    validateNode(node) {
        try {
            this.validateChunkOrNode(node);
        }
        catch (e) {
            throw new sdk_sdtf_core_1.SdtfError(`Invalid node: ${e.message}`);
        }
    }
    validateTypeHint(typeHint) {
        // Validate required properties
        if (!(0, sdk_sdtf_core_1.isNonEmptyString)(typeHint.name))
            throw new sdk_sdtf_core_1.SdtfError("Invalid type hint: Required property 'name' must be a non-empty string.");
    }
    /**
     * Validates sdTF node objects.
     * Thrown error messages have no prefix text to make them usable for chunk and nodes validation.
     * @private
     * @throws {@link SdtfError} when the component is invalid.
     */
    validateChunkOrNode(chunkOrNode) {
        // Validate optional properties
        if (chunkOrNode.attributes && !(0, sdk_sdtf_core_1.isUint)(chunkOrNode.attributes))
            throw new sdk_sdtf_core_1.SdtfError("Optional property 'attributes' must be an unsigned integer.");
        if (!(0, sdk_sdtf_core_1.isUintArray)(chunkOrNode.items))
            throw new sdk_sdtf_core_1.SdtfError("Required property 'items' must be an array of unsigned integers.");
        if (!(0, sdk_sdtf_core_1.isUintArray)(chunkOrNode.nodes))
            throw new sdk_sdtf_core_1.SdtfError("Required property 'nodes' must be an array of unsigned integers.");
        if (chunkOrNode.typeHint && !(0, sdk_sdtf_core_1.isUint)(chunkOrNode.typeHint))
            throw new sdk_sdtf_core_1.SdtfError("Optional property 'typeHint' must be an unsigned integer.");
        // Validate component references
        if (chunkOrNode.attributes && chunkOrNode.attributes >= this.componentList.attributes.length)
            throw new sdk_sdtf_core_1.SdtfError("Attributes index is out of range.");
        chunkOrNode.items.forEach(itemIndex => {
            if (itemIndex >= this.componentList.items.length)
                throw new sdk_sdtf_core_1.SdtfError(`Node index '${itemIndex}' is out of range.`);
        });
        chunkOrNode.nodes.forEach(nodeIndex => {
            if (nodeIndex >= this.componentList.nodes.length)
                throw new sdk_sdtf_core_1.SdtfError(`Node index '${nodeIndex}' is out of range.`);
        });
        if (chunkOrNode.typeHint && chunkOrNode.typeHint >= this.componentList.typeHints.length)
            throw new sdk_sdtf_core_1.SdtfError("Type hint index is out of range.");
        // Prevent self-referencing nodes
        if (!chunkOrNode.nodes.every(nodePos => this.componentList.nodes[nodePos].componentId !== chunkOrNode.componentId))
            throw new sdk_sdtf_core_1.SdtfError("Node is referencing itself in the 'nodes' property.");
    }
}
exports.SdtfComponentValidator = SdtfComponentValidator;
//# sourceMappingURL=SdtfComponentValidator.js.map