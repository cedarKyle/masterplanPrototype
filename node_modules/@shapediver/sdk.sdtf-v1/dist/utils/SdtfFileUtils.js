"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfFileUtils = void 0;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
const path = require("path");
const fs = require("fs");
class SdtfFileUtils {
    /**
     * Resolves the given relative path.
     * @throws {@link SdtfError} when the path could not be resolved.
     */
    toAbsolutePath(relativePath) {
        try {
            return path.resolve(relativePath);
        }
        catch (e) {
            throw new sdk_sdtf_core_1.SdtfError(`Could not resolve path '${relativePath}': ${e.message}`);
        }
    }
    /**
     * Reads the file asynchronously at the given path.
     * @throws {@link SdtfError} when the file does not exist.
     */
    readFile(absolutePath) {
        if (!fs.existsSync(absolutePath)) {
            throw new sdk_sdtf_core_1.SdtfError(`Cannot find file at location '${absolutePath}'.`);
        }
        return new Promise((resolve, reject) => {
            fs.readFile(absolutePath, (error, buffer) => {
                if (error)
                    reject(error);
                // The size of the buffer property is arbitrary.
                // Thus, byte offset and length must be taken into account.
                const data = buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
                resolve(data);
            });
        });
    }
}
exports.SdtfFileUtils = SdtfFileUtils;
//# sourceMappingURL=SdtfFileUtils.js.map