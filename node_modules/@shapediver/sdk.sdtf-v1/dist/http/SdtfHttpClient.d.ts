import { ISdtfHttpClient } from "./ISdtfHttpClient";
/** HTTP client of a single sdTF asset. */
export declare class SdtfHttpClient implements ISdtfHttpClient {
    private readonly binarySdtfParser;
    /** The URL of the sdTF JSON content. */
    readonly jsonContentUrl: string;
    /** the minimum headers object that should be used for all HTTP calls.. */
    private readonly basicHttpHeader;
    constructor(jsonContentUrl: string, authToken?: string);
    /**
     * Constructs the URL of this sdTF asset for the given URI.
     * The URIs of all sdTF buffers of this sdTF asset are relative to the path of the JSON content file.
     * When no URI is specified, the URL of the JSON content is returned.
     * @private
     */
    calcUrl(uri: string | undefined): string;
    getJsonContent(): Promise<[DataView, DataView | undefined]>;
    getBinaryBuffer(uri: string | undefined, offset: number, length: number): Promise<[DataView, ArrayBuffer | undefined]>;
    /**
     * Checks if the server supports HTTP range requests by sending a HEAD request and analyzing the response header.
     * When the server supports range requests, only the requested part is fetched.
     * Otherwise, the entire sdTF file is fetched.
     * @private
     * @param url
     * @param offset - Zero-based byte index at which to begin (inclusive).
     * @param length - Length of the buffer.
     * @throws {@link SdtfError} when the request was not successful.
     */
    fetch(url: string, offset: number, length: number): Promise<{
        data: ArrayBuffer;
        partial: boolean;
    }>;
    /**
     * Sends an HTTP range request to fetch only the requested part.
     * Assumes, that the server supports HTTP range requests and that the response is NOT compressed.
     * Otherwise, Axios throws an `ERR_CONTENT_DECODING_FAILED` error in the browser.
     * @private
     * @param url
     * @param offset - Zero-based byte index at which to begin (inclusive).
     * @param length - Length of the buffer.
     * @throws {@link SdtfError} when the request was not successful.
     */
    fetchPartially(url: string, offset: number, length: number): Promise<any>;
    /**
     * Fetches the entire sdTF file (either a binary sdTF or just binary data).
     * Fallback when HTTP range requests are not supported by the server.
     * @private
     * @param url
     * @throws {@link SdtfError} when the request was not successful.
     */
    fetchFully(url: string): Promise<any>;
}
//# sourceMappingURL=SdtfHttpClient.d.ts.map