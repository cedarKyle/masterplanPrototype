"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfDataParser = void 0;
class SdtfDataParser {
    constructor(integrations) {
        this.integrations = integrations;
    }
    parseContent(component) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the first integration that is supporting the given type hint
            const integration = this.integrations.find(i => { var _a, _b; return i.isTypeHintSupported((_b = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : ""); });
            // When an integration was found, all further steps are done by this integration (validation, mapping, etc)
            if (integration) {
                return integration.getReader().readComponent(component);
            }
            // Fallback behaviour, when no integration was found - return content.
            // According to the sdTF specification, value precedes accessor!
            if (component.value === undefined && !!component.accessor) {
                return component.accessor.getContent();
            }
            else {
                return component.value;
            }
        });
    }
}
exports.SdtfDataParser = SdtfDataParser;
//# sourceMappingURL=SdtfDataParser.js.map