import { ISdtfWriteableAccessor, ISdtfWriteableAsset, ISdtfWriteableAttribute, ISdtfWriteableAttributes, ISdtfWriteableBuffer, ISdtfWriteableBufferView, ISdtfWriteableChunk, ISdtfWriteableComponentFactory, ISdtfWriteableDataItem, ISdtfWriteableNode, ISdtfWriteableTypeHint, SdtfTypeHintName } from "@shapediver/sdk.sdtf-core";
export declare class SdtfWriteableComponentFactory implements ISdtfWriteableComponentFactory {
    readonly ASSET_VERSION = "1.0";
    readonly ASSET_GENERATOR = "ShapeDiverSdtfWriter";
    createAccessor(content?: {
        data: ArrayBuffer;
        contentType: string;
    }): ISdtfWriteableAccessor;
    createAsset(): ISdtfWriteableAsset;
    createAttribute<T>(content?: Exclude<T, ArrayBuffer> | {
        data: ArrayBuffer;
        contentType: string;
    }, typeHint?: string): ISdtfWriteableAttribute;
    createAttributes<T>(content?: Record<string, [value: Exclude<T, ArrayBuffer> | {
        data: ArrayBuffer;
        contentType: string;
    }, typeHint?: string]>): ISdtfWriteableAttributes;
    createBuffer(data?: ArrayBuffer): ISdtfWriteableBuffer;
    createBufferView(content?: {
        data: ArrayBuffer;
        contentType: string;
    }): ISdtfWriteableBufferView;
    createChunk(name?: string): ISdtfWriteableChunk;
    createDataItem<T>(content?: Exclude<T, ArrayBuffer> | {
        data: ArrayBuffer;
        contentType: string;
    }, typeHint?: string): ISdtfWriteableDataItem;
    createNode(): ISdtfWriteableNode;
    createTypeHint(name?: SdtfTypeHintName | string): ISdtfWriteableTypeHint;
    /**
     * Type guard for buffer content data.
     * @private
     */
    isBufferContent(content: unknown): content is {
        data: ArrayBuffer;
        contentType: string;
    };
}
//# sourceMappingURL=SdtfWriteableComponentFactory.d.ts.map