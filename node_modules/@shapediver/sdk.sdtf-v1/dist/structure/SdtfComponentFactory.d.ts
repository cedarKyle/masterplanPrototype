import { ISdtfAccessor, ISdtfAsset, ISdtfAttributes, ISdtfBuffer, ISdtfBufferView, ISdtfChunk, ISdtfDataItem, ISdtfFileInfo, ISdtfNode, ISdtfTypeHint } from "@shapediver/sdk.sdtf-core";
import { ISdtfComponentFactory } from "./ISdtfComponentFactory";
export declare class SdtfComponentFactory implements ISdtfComponentFactory {
    readonly propertyNameAccessors = "accessors";
    readonly propertyNameAttributes = "attributes";
    readonly propertyNameBufferViews = "bufferViews";
    readonly propertyNameBuffers = "buffers";
    readonly propertyNameChunks = "chunks";
    readonly propertyNameDataItems = "items";
    readonly propertyNameFileInfo = "asset";
    readonly propertyNameFileInfoAlternative = "fileInfo";
    readonly propertyNameNodes = "nodes";
    readonly propertyNameTypeHints = "typeHints";
    createAccessor(accessorData: Record<string, unknown>): Partial<ISdtfAccessor>;
    createAsset(assetData: Record<string, unknown>): Partial<ISdtfAsset>;
    createAttributes(attributesData: Record<string, unknown>): Partial<ISdtfAttributes>;
    createBuffer(bufferData: Record<string, unknown>): Partial<ISdtfBuffer>;
    createBufferView(bufferViewData: Record<string, unknown>): Partial<ISdtfBufferView>;
    createChunk(chunkData: Record<string, unknown>): Partial<ISdtfChunk>;
    createDataItem(dataItemData: Record<string, unknown>): Partial<ISdtfDataItem>;
    createFileInfo(fileInfoData: Record<string, unknown>): Partial<ISdtfFileInfo>;
    createNode(nodeData: Record<string, unknown>): Partial<ISdtfNode>;
    createTypeHint(typeHintData: Record<string, unknown>): Partial<ISdtfTypeHint>;
}
//# sourceMappingURL=SdtfComponentFactory.d.ts.map