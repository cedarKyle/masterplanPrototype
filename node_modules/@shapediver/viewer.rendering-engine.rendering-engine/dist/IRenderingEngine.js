"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPINNER_POSITIONING = exports.FLAG_TYPE = exports.SESSION_SETTINGS_MODE = exports.BUSY_MODE_DISPLAY = exports.TONE_MAPPING = exports.TEXTURE_ENCODING = exports.VISIBILITY_MODE = exports.RENDERER_TYPE = void 0;
var RENDERER_TYPE;
(function (RENDERER_TYPE) {
    /** The standard rendering engine */
    RENDERER_TYPE["STANDARD"] = "standard";
    /** A basic version of the rendering engine */
    RENDERER_TYPE["ATTRIBUTES"] = "attributes";
})(RENDERER_TYPE = exports.RENDERER_TYPE || (exports.RENDERER_TYPE = {}));
var VISIBILITY_MODE;
(function (VISIBILITY_MODE) {
    /** The viewer shows the scene instantly */
    VISIBILITY_MODE["INSTANT"] = "instant";
    /** The viewer shows the scene after the first session loading */
    VISIBILITY_MODE["SESSION"] = "session";
    /** The viewer is shown once the 'show' property is set to true */
    VISIBILITY_MODE["MANUAL"] = "manual";
})(VISIBILITY_MODE = exports.VISIBILITY_MODE || (exports.VISIBILITY_MODE = {}));
var TEXTURE_ENCODING;
(function (TEXTURE_ENCODING) {
    TEXTURE_ENCODING["LINEAR"] = "linear";
    TEXTURE_ENCODING["SRGB"] = "srgb";
    TEXTURE_ENCODING["RGBE"] = "rgbe";
    TEXTURE_ENCODING["RGBM7"] = "rgbm7";
    TEXTURE_ENCODING["RGBM16"] = "rgbm16";
    TEXTURE_ENCODING["RGBD"] = "rgbd";
    TEXTURE_ENCODING["GAMMA"] = "gamma";
})(TEXTURE_ENCODING = exports.TEXTURE_ENCODING || (exports.TEXTURE_ENCODING = {}));
var TONE_MAPPING;
(function (TONE_MAPPING) {
    TONE_MAPPING["NONE"] = "none";
    TONE_MAPPING["LINEAR"] = "linear";
    TONE_MAPPING["REINHARD"] = "reinhard";
    TONE_MAPPING["CINEON"] = "cineon";
    TONE_MAPPING["ACES_FILMIC"] = "aces_filmic";
})(TONE_MAPPING = exports.TONE_MAPPING || (exports.TONE_MAPPING = {}));
/**
 * Modes used to indicate that a viewport is busy.
 */
var BUSY_MODE_DISPLAY;
(function (BUSY_MODE_DISPLAY) {
    /** The viewport will be blurred when a session is busy. */
    BUSY_MODE_DISPLAY["BLUR"] = "blur";
    /** A spinner will be shown when a session is busy. */
    BUSY_MODE_DISPLAY["SPINNER"] = "spinner";
    /** Nothing happens when a session is busy. */
    BUSY_MODE_DISPLAY["NONE"] = "none";
})(BUSY_MODE_DISPLAY = exports.BUSY_MODE_DISPLAY || (exports.BUSY_MODE_DISPLAY = {}));
;
/**
 * Session settings to be used by a viewport.
 *
 * The {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend}
 * allows to persist settings of the viewer, individually for each model that it hosts. Persisting the settings
 * of the viewer requires permissions which are typically only granted to the owner of the model. Editing
 * of the settings typically happens on the model edit page of the ShapeDiver Platform.
 *
 * Whenever an instance of the viewer creates a session with a model, the settings are made available to the viewer.
 * It is possible to use multiple sessions with different models from a single instance of the viewer.
 * Therefore the viewer offers a choice on which settings to use.
 */
var SESSION_SETTINGS_MODE;
(function (SESSION_SETTINGS_MODE) {
    /** No settings of a session will be used for the viewport. */
    SESSION_SETTINGS_MODE["NONE"] = "none";
    /**
     * The settings of the very first session created will be used for the viewport.
     */
    SESSION_SETTINGS_MODE["FIRST"] = "first";
    /**
     * Use this mode in case you want to assign a specific session identifier
     * to the viewport, whose settings will be used.
     */
    SESSION_SETTINGS_MODE["MANUAL"] = "manual";
})(SESSION_SETTINGS_MODE = exports.SESSION_SETTINGS_MODE || (exports.SESSION_SETTINGS_MODE = {}));
;
/**
 * Types of flags used to influence the render loop.
 */
var FLAG_TYPE;
(function (FLAG_TYPE) {
    /** The flag for the busy mode. */
    FLAG_TYPE["BUSY_MODE"] = "busy_mode";
    /** The flag to freeze the camera. */
    FLAG_TYPE["CAMERA_FREEZE"] = "camera_freeze";
    /** The flag to continuously render the scene. */
    FLAG_TYPE["CONTINUOUS_RENDERING"] = "continuous_rendering";
    /** The flag to continuously update the shadow map. */
    FLAG_TYPE["CONTINUOUS_SHADOW_MAP_UPDATE"] = "continuous_shadow_map_update";
})(FLAG_TYPE = exports.FLAG_TYPE || (exports.FLAG_TYPE = {}));
var SPINNER_POSITIONING;
(function (SPINNER_POSITIONING) {
    SPINNER_POSITIONING["CENTER"] = "center";
    SPINNER_POSITIONING["TOP_LEFT"] = "top_left";
    SPINNER_POSITIONING["TOP_RIGHT"] = "top_right";
    SPINNER_POSITIONING["BOTTOM_LEFT"] = "bottom_left";
    SPINNER_POSITIONING["BOTTOM_RIGHT"] = "bottom_right";
})(SPINNER_POSITIONING = exports.SPINNER_POSITIONING || (exports.SPINNER_POSITIONING = {}));
//# sourceMappingURL=IRenderingEngine.js.map