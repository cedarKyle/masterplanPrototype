import * as THREE from 'three';
import { vec2, vec3 } from 'gl-matrix';
import { CameraEngine } from '@shapediver/viewer.rendering-engine.camera-engine';
import { CanvasEngine } from '@shapediver/viewer.rendering-engine.canvas-engine';
import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { LightEngine } from '@shapediver/viewer.rendering-engine.light-engine';
import { BUSY_MODE_DISPLAY, FLAG_TYPE, SPINNER_POSITIONING, RENDERER_TYPE, SESSION_SETTINGS_MODE, TEXTURE_ENCODING, TONE_MAPPING, VISIBILITY_MODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { DomEventEngine, EventEngine, SettingsEngine, StateEngine } from '@shapediver/viewer.shared.services';
import { AnimationData, ISDTFAttributeVisualizationData, ISDTFOverview, ISDTFItemData, IAnimationData, IGeometryData } from '@shapediver/viewer.shared.types';
import { SceneTreeManager } from './managers/SceneTreeManager';
import { RenderingManager } from './managers/RenderingManager';
import { MaterialLoader } from './loaders/MaterialLoader';
import { EnvironmentMapLoader } from './loaders/EnvironmentMapLoader';
import { GeometryLoader } from './loaders/GeometryLoader';
import { LightLoader } from './loaders/LightLoader';
import { HTMLElementAnchorLoader } from './loaders/HTMLElementAnchorLoader';
import { BeautyRenderingManager } from './managers/BeautyRenderingManager';
import { SceneTracingManager } from './managers/SceneTracingManager';
import { CameraManager } from './managers/CameraManager';
import { IRenderingEngineThreeJS } from './interfaces/IRenderingEngine';
import { AnimationManager } from './managers/AnimationManager';
export declare class RenderingEngine implements IRenderingEngineThreeJS {
    #private;
    private readonly _animationManager;
    private readonly _beautyRenderingManager;
    private readonly _cameraEngine;
    private readonly _cameraManager;
    private readonly _canvas;
    private readonly _canvasEngine;
    private readonly _converter;
    private readonly _domEventEngine;
    private readonly _environmentGeometryManager;
    private readonly _systemInfo;
    private readonly _environmentMapLoader;
    private readonly _eventEngine;
    private readonly _geometryLoader;
    private readonly _htmlElementAnchorLoader;
    private readonly _branding;
    private readonly _id;
    private readonly _lightEngine;
    private readonly _lightLoader;
    private readonly _logger;
    private readonly _materialLoader;
    private readonly _renderingManager;
    private readonly _sceneTracingManager;
    private readonly _sceneTreeManager;
    private readonly _stateEngine;
    private readonly _tree;
    private readonly _uuidGenerator;
    private readonly _visibility;
    private _ambientOcclusion;
    private _ambientOcclusionIntensity;
    private _arRotation;
    private _arScale;
    private _arTranslation;
    private _automaticResizing;
    private _beautyRenderBlendingDuration;
    private _beautyRenderDelay;
    private _busy;
    private _busyModeDisplay;
    private _clearAlpha;
    private _clearColor;
    private _closed;
    private _enableAR;
    private _environmentMap;
    private _environmentMapAsBackground;
    private _environmentMapResolution;
    private _gridVisibility;
    private _groundPlaneVisibility;
    private _groundPlaneShadowVisibility;
    private _lights;
    private _logoDivElement;
    private _pointSize;
    private _renderer;
    private _sessionSettingsId?;
    private _sessionSettingsMode;
    private _settingsEngine?;
    private _shadows;
    private _show;
    private _showStatistics;
    private _spinnerDivElement;
    private _type;
    private _visualizeAttributes;
    constructor(properties?: {
        canvas?: HTMLCanvasElement;
        id?: string;
        branding?: {
            logo?: string | null;
            backgroundColor?: string;
            busyModeSpinner?: string;
            busyModeDisplay?: BUSY_MODE_DISPLAY;
            spinnerPositioning?: SPINNER_POSITIONING;
        };
        sessionSettingsId?: string;
        sessionSettingsMode?: SESSION_SETTINGS_MODE;
        visibility?: VISIBILITY_MODE;
    });
    get ambientOcclusion(): boolean;
    set ambientOcclusion(value: boolean);
    get ambientOcclusionIntensity(): number;
    set ambientOcclusionIntensity(value: number);
    get animationManager(): AnimationManager;
    get animations(): {
        [key: string]: IAnimationData;
    };
    get arRotation(): vec3;
    set arRotation(value: vec3);
    get arScale(): vec3;
    set arScale(value: vec3);
    get arTranslation(): vec3;
    set arTranslation(value: vec3);
    get automaticResizing(): boolean;
    set automaticResizing(value: boolean);
    get beautyRenderBlendingDuration(): number;
    set beautyRenderBlendingDuration(value: number);
    get beautyRenderDelay(): number;
    set beautyRenderDelay(value: number);
    get beautyRenderingManager(): BeautyRenderingManager;
    get busy(): boolean;
    set busy(value: boolean);
    get busyModeDisplay(): BUSY_MODE_DISPLAY;
    set busyModeDisplay(value: BUSY_MODE_DISPLAY);
    get branding(): {
        logo: string | null;
        backgroundColor: string;
        busyModeSpinner: string;
        busyModeDisplay: BUSY_MODE_DISPLAY;
        spinnerPositioning: SPINNER_POSITIONING;
    };
    get cameraEngine(): CameraEngine;
    get cameraManager(): CameraManager;
    get canvas(): HTMLCanvasElement;
    get canvasEngine(): CanvasEngine;
    get clearAlpha(): number;
    set clearAlpha(value: number);
    get clearColor(): string;
    set clearColor(value: string);
    get closed(): boolean;
    get continuousRendering(): boolean;
    set continuousRendering(value: boolean);
    get continuousShadowMapUpdate(): boolean;
    set continuousShadowMapUpdate(value: boolean);
    get domEventEngine(): DomEventEngine;
    get enableAR(): boolean;
    set enableAR(value: boolean);
    get environmentMap(): string | string[];
    set environmentMap(value: string | string[]);
    get environmentMapAsBackground(): boolean;
    set environmentMapAsBackground(value: boolean);
    get environmentMapLoader(): EnvironmentMapLoader;
    get environmentMapResolution(): string;
    set environmentMapResolution(value: string);
    get eventEngine(): EventEngine;
    get geometryLoader(): GeometryLoader;
    get gridColor(): string;
    set gridColor(value: string);
    get gridVisibility(): boolean;
    set gridVisibility(value: boolean);
    get groundPlaneColor(): string;
    set groundPlaneColor(value: string);
    get groundPlaneVisibility(): boolean;
    set groundPlaneVisibility(value: boolean);
    get groundPlaneShadowColor(): string;
    set groundPlaneShadowColor(value: string);
    get groundPlaneShadowVisibility(): boolean;
    set groundPlaneShadowVisibility(value: boolean);
    get htmlElementAnchorLoader(): HTMLElementAnchorLoader;
    get id(): string;
    get lightEngine(): LightEngine;
    get lightLoader(): LightLoader;
    get lights(): boolean;
    set lights(value: boolean);
    get lightScene(): string;
    get lightSceneId(): string;
    get logoDivElement(): HTMLDivElement;
    get materialLoader(): MaterialLoader;
    get minimalRendering(): boolean;
    get outputEncoding(): TEXTURE_ENCODING;
    set outputEncoding(value: TEXTURE_ENCODING);
    get physicallyCorrectLights(): boolean;
    set physicallyCorrectLights(value: boolean);
    get pointSize(): number;
    set pointSize(value: number);
    get renderer(): THREE.WebGLRenderer;
    get renderingManager(): RenderingManager;
    get scene(): THREE.Scene;
    get sceneTracingManager(): SceneTracingManager;
    get sceneTreeManager(): SceneTreeManager;
    get sessionSettingsId(): string | undefined;
    set sessionSettingsId(value: string | undefined);
    get sessionSettingsMode(): SESSION_SETTINGS_MODE;
    set sessionSettingsMode(value: SESSION_SETTINGS_MODE);
    get settingsEngine(): SettingsEngine | undefined;
    set settingsEngine(value: SettingsEngine | undefined);
    get shadows(): boolean;
    set shadows(value: boolean);
    get show(): boolean;
    set show(value: boolean);
    get showStatistics(): boolean;
    set showStatistics(value: boolean);
    get spinnerDivElement(): HTMLDivElement;
    get stateEngine(): StateEngine;
    get textureEncoding(): TEXTURE_ENCODING;
    set textureEncoding(value: TEXTURE_ENCODING);
    get toneMapping(): TONE_MAPPING;
    set toneMapping(value: TONE_MAPPING);
    get toneMappingExposure(): number;
    set toneMappingExposure(value: number);
    get type(): RENDERER_TYPE;
    set type(value: RENDERER_TYPE);
    get usingSwiftShader(): boolean;
    get visibility(): VISIBILITY_MODE;
    get visualizeAttributes(): ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined;
    set visualizeAttributes(value: ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined);
    addFlag(flag: FLAG_TYPE): string;
    applySettings(sections?: {
        ar?: boolean;
        scene?: boolean;
        camera?: boolean;
        light?: boolean;
        environment?: boolean;
        general?: boolean;
    }, settingsEngine?: SettingsEngine): void;
    convert3Dto2D(p: vec3): {
        container: vec2;
        client: vec2;
        page: vec2;
        hidden: boolean;
    };
    close(): Promise<void>;
    createSDTFOverview(node: ITreeNode): ISDTFOverview;
    displayErrorMessage(message: string): void;
    evaluateFlagState(): void;
    gatherAnimations(node?: ITreeNode): AnimationData[];
    getEnvironmentMapImageUrl(): string;
    getScreenshot(type?: string, encoderOptions?: number): string;
    mouseEventToRay(event: MouseEvent): {
        origin: vec3;
        direction: vec3;
    };
    raytraceScene(origin: vec3, direction: vec3, root?: ITreeNode): {
        distance: number;
        node: ITreeNode;
        data: IGeometryData;
    }[];
    removeFlag(token: string): boolean;
    reset(): void;
    resize(width: number, height: number): void;
    saveSettings(settingsEngine?: SettingsEngine): void;
    startGatherAnimations(node?: ITreeNode): void;
    touchToRay(event: Touch): {
        origin: vec3;
        direction: vec3;
    };
    touchEventToRay(event: TouchEvent): {
        origin: vec3;
        direction: vec3;
    };
    update(id: string): void;
    updateEnvironmentGeometry(): void;
    viewInAR(file: string, options?: {
        arScale?: 'auto' | 'fixed';
        arPlacement?: 'floor' | 'wall';
        xrEnvironment?: boolean;
    }): Promise<void>;
    viewableInAR(): boolean;
    private applySyncSettings;
}
//# sourceMappingURL=RenderingEngine.d.ts.map