"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentGeometryManager = void 0;
const THREE = __importStar(require("three"));
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const SDData_1 = require("../objects/SDData");
const SDObject_1 = require("../objects/SDObject");
class EnvironmentGeometryManager {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        // #region Properties (5)
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._groundPlaneColor = '#d3d3d3ff';
        this._groundPlaneShadowColor = '#000000ff';
        this._gridColor = '#44444426';
        this._initialized = false;
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, (e) => {
            this.updateEnvironmentGeometryPosition();
        });
    }
    // #endregion Constructors (1)
    // #region Public Accessors (2)
    get gridColor() {
        return this._gridColor;
    }
    set gridColor(value) {
        this._gridColor = value;
        this._grid.material.opacity = this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);
        this._grid.material.transparent = this._grid.material.opacity !== 1;
        this._grid.material.color = new THREE.Color(this._converter.toThreeJsColorInput(this._gridColor));
        this._grid.material.needsUpdate = true;
    }
    get groundPlaneColor() {
        return this._groundPlaneColor;
    }
    set groundPlaneColor(value) {
        this._groundPlaneColor = value;
        this.assignGroundPlaneColor(value);
    }
    get groundPlaneShadowColor() {
        return this._groundPlaneShadowColor;
    }
    set groundPlaneShadowColor(value) {
        this._groundPlaneShadowColor = value;
        this.assignGroundPlaneShadowColor(value);
    }
    get grid() {
        return this._grid;
    }
    get groundPlane() {
        return this._groundPlane;
    }
    get groundPlaneShadow() {
        return this._groundPlaneShadow;
    }
    // #endregion Public Accessors (2)
    // #region Public Methods (2)
    assignGroundPlaneColor(color) {
        this._groundPlane.material.opacity = this._converter.toAlpha(color);
        this._groundPlane.material.transparent = this._groundPlane.material.opacity !== 1;
        this._groundPlane.material.depthWrite = !this._groundPlane.material.transparent;
        this._groundPlane.material.color = new THREE.Color(this._converter.toThreeJsColorInput(color));
        this._groundPlane.material.needsUpdate = true;
    }
    assignGroundPlaneShadowColor(color) {
        this._groundPlaneShadow.material.opacity = this._converter.toAlpha(color);
        this._groundPlaneShadow.material.color = new THREE.Color(this._converter.toThreeJsColorInput(color));
        this._groundPlaneShadow.material.needsUpdate = true;
    }
    changeSceneExtents(bb) {
        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())
            return;
        this._initialized = true;
        let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);
        /**
         * https://shapediver.atlassian.net/browse/SS-2961 evaluate this magic
         *
         * magic begin
         */
        let divisions = 0.1;
        let gridExtents = 1.0;
        if (sceneExtents > 1) {
            let tmp = Math.floor(sceneExtents).toString();
            let temp = Math.pow(10, tmp.length - 1);
            gridExtents = Math.max(Math.ceil(sceneExtents / temp) * temp, 1);
            temp = temp / 10;
            divisions = gridExtents / temp;
        }
        else if (sceneExtents !== 0) {
            let zeros = 1 - Math.floor(Math.log(sceneExtents) / Math.log(10)) - 2;
            let r = sceneExtents.toFixed(zeros + 1);
            let firstDigit = parseInt(r.substr(r.length - 1)) + 1;
            let gridExtentsS = '0.';
            for (let i = 0; i < zeros; ++i)
                gridExtentsS = gridExtentsS + '0';
            gridExtents = parseFloat(gridExtentsS + firstDigit);
            divisions = firstDigit * 10;
        }
        /**
         * magic end
         */
        this._gridObject.remove(this._grid);
        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);
        this._grid.material.opacity = this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);
        this._grid.material.transparent = this._grid.material.opacity !== 1;
        this._grid.material.color = new THREE.Color(this._converter.toThreeJsColorInput(this._gridColor));
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = this._renderingEngine.gridVisibility;
        this._gridObject.add(this._grid);
        this._groundPlane.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);
        this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);
        let eps = 0.005;
        let bs = bb.boundingSphere;
        this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
        this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
        this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
    }
    init() {
        this._environmentGeometryObject = new SDObject_1.SDObject('environmentGeometry', '');
        this._renderingEngine.sceneTreeManager.scene.add(this._environmentGeometryObject);
        this._gridObject = new SDData_1.SDData('grid', '');
        this._grid = new THREE.GridHelper();
        this._grid.material.opacity = this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);
        this._grid.material.transparent = this._grid.material.opacity !== 1;
        this._grid.material.color = new THREE.Color(this._converter.toThreeJsColorInput(this._gridColor));
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = this._renderingEngine.gridVisibility;
        this._gridObject.add(this._grid);
        this._gridObject.userData.ambientOcclusion = false;
        this._environmentGeometryObject.add(this._gridObject);
        this._groundPlaneObject = new SDData_1.SDData('groundPlane', '');
        let mat = new viewer_shared_types_1.MaterialStandardData();
        mat.color = this._groundPlaneColor;
        mat.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;
        mat.opacity = this._converter.toAlpha(this._groundPlaneColor);
        mat.roughness = 1;
        mat.metalness = 0;
        this._groundPlane = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(mat));
        this._groundPlane.receiveShadow = true;
        this._groundPlane.visible = this._renderingEngine.groundPlaneVisibility;
        this._groundPlaneObject.add(this._groundPlane);
        this._groundPlaneObject.userData.ambientOcclusion = false;
        this._environmentGeometryObject.add(this._groundPlaneObject);
        this._groundPlaneShadowObject = new SDData_1.SDData('groundPlaneShadow', '');
        let matShadow = new viewer_shared_types_1.MaterialShadowData();
        matShadow.color = this._groundPlaneShadowColor;
        matShadow.opacity = this._converter.toAlpha(this._groundPlaneShadowColor);
        this._groundPlaneShadow = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(matShadow));
        this._groundPlaneShadow.receiveShadow = true;
        this._groundPlaneShadow.visible = this._renderingEngine.groundPlaneShadowVisibility;
        this._groundPlaneShadowObject.add(this._groundPlaneShadow);
        this._groundPlaneShadowObject.userData.ambientOcclusion = false;
        this._environmentGeometryObject.add(this._groundPlaneShadowObject);
        let eps = 0.005;
        this._grid.position.set(0, 0, -eps);
        this._groundPlane.position.set(0, 0, -eps);
        this._groundPlaneShadow.position.set(0, 0, -eps);
    }
    updateEnvironmentGeometryPosition() {
        const bb = new viewer_shared_math_1.Box(this._renderingEngine.sceneTreeManager.boundingBox.min, this._renderingEngine.sceneTreeManager.boundingBox.max);
        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())
            return;
        if (!this._initialized) {
            this.changeSceneExtents(bb);
        }
        else {
            let eps = 0.005;
            let bs = bb.boundingSphere;
            if (this._grid)
                this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
            if (this._groundPlane)
                this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
            if (this._groundPlaneShadow)
                this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
        }
    }
}
exports.EnvironmentGeometryManager = EnvironmentGeometryManager;
//# sourceMappingURL=EnvironmentGeometryManager.js.map