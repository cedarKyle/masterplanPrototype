import * as THREE from 'three';
import { ITreeNode, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
import { IBox } from '@shapediver/viewer.shared.math';
import { LightEngine } from '@shapediver/viewer.rendering-engine.light-engine';
import { RenderingEngine } from '../RenderingEngine';
import { IManager } from '../interfaces/IManager';
import { SDObject } from '../objects/SDObject';
export declare class SceneTreeManager implements IManager {
    private readonly _renderingEngine;
    private readonly _converter;
    private readonly _eventEngine;
    private readonly _inputValidator;
    private readonly _logger;
    private readonly _scene;
    private readonly _stateEngine;
    private readonly _tree;
    private _boundingBox;
    private _boundingBoxSensitiveData;
    private _currentSDTFOverview;
    private _mainNode;
    constructor(_renderingEngine: RenderingEngine);
    get boundingBox(): IBox;
    get scene(): THREE.Scene;
    init(): void;
    isEmpty(): boolean;
    private getBone;
    /**
     * Convert the data of the scene graph node into the format of the implementation.
     *
     * @param data the data element
     * @param obj the corresponding type node
     */
    updateData(node: ITreeNode, obj: SDObject, data: ITreeNodeData): void;
    updateNodeTransformations(node?: ITreeNode, obj?: SDObject): void;
    updateMorphWeights(node?: ITreeNode, obj?: SDObject): void;
    /**
     * Update the current node via the scene graph node.
     * Convert the data if needed.
     *
     * @param node the scene graph node
     * @param obj the current type object
     */
    updateNode(node: ITreeNode, obj: THREE.Object3D): void;
    updateSceneTree(root: ITreeNode, lightEngine: LightEngine): void;
    private collectSDTFItemData;
    private createSDTFOverview;
    private injectAttributeData;
    private removeData;
}
//# sourceMappingURL=SceneTreeManager.d.ts.map