import { vec2, vec3 } from 'gl-matrix';
import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { GeometryData } from '@shapediver/viewer.shared.types';
import { IManager } from '../interfaces/IManager';
import { RenderingEngine } from '../RenderingEngine';
export declare class SceneTracingManager implements IManager {
    private readonly _renderingEngine;
    private readonly _logger;
    private readonly _tree;
    constructor(_renderingEngine: RenderingEngine);
    convert3Dto2D(p: vec3): {
        container: vec2;
        client: vec2;
        page: vec2;
        hidden: boolean;
    };
    init(): void;
    trace(origin: vec3, direction: vec3, root?: ITreeNode): {
        distance: number;
        node: ITreeNode;
        data: GeometryData;
    }[];
    /**
     * Calculate the ray that is created by the mouse event and the camera.
     *
     * @param event
     * @returns
     */
    mouseEventToRay(event: MouseEvent): {
        origin: vec3;
        direction: vec3;
    };
    /**
     * Create the ray that is created by the touch event and the camera.
     *
     * @param event
     * @returns
     */
    touchEventToRay(event: TouchEvent): {
        origin: vec3;
        direction: vec3;
    };
    /**
     * Create the ray that is created by the touch event and the camera.
     *
     * @param event
     * @returns
     */
    touchToRay(event: Touch): {
        origin: vec3;
        direction: vec3;
    };
}
//# sourceMappingURL=SceneTracingManager.d.ts.map