"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _RenderingEngine_defaultLogo, _RenderingEngine_defaultLogoStatic, _RenderingEngine_defaultSpinner, _RenderingEngine_animations, _RenderingEngine_flags;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingEngine = void 0;
const THREE = __importStar(require("three"));
const gl_matrix_1 = require("gl-matrix");
const tsyringe_1 = require("tsyringe");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
const viewer_rendering_engine_canvas_engine_1 = require("@shapediver/viewer.rendering-engine.canvas-engine");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const SceneTreeManager_1 = require("./managers/SceneTreeManager");
const RenderingManager_1 = require("./managers/RenderingManager");
const MaterialLoader_1 = require("./loaders/MaterialLoader");
const EnvironmentMapLoader_1 = require("./loaders/EnvironmentMapLoader");
const GeometryLoader_1 = require("./loaders/GeometryLoader");
const LightLoader_1 = require("./loaders/LightLoader");
const HTMLElementAnchorLoader_1 = require("./loaders/HTMLElementAnchorLoader");
const BeautyRenderingManager_1 = require("./managers/BeautyRenderingManager");
const EnvironmentGeometryManager_1 = require("./managers/EnvironmentGeometryManager");
const SceneTracingManager_1 = require("./managers/SceneTracingManager");
const CameraManager_1 = require("./managers/CameraManager");
const AnimationManager_1 = require("./managers/AnimationManager");
class RenderingEngine {
    // #endregion Properties (61)
    // #region Constructors (1)
    constructor(properties) {
        this._canvasEngine = tsyringe_1.container.resolve(viewer_rendering_engine_canvas_engine_1.CanvasEngine);
        // utils
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._systemInfo = tsyringe_1.container.resolve(viewer_shared_services_1.SystemInfo);
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._tree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this._uuidGenerator = tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator);
        // settings
        this._ambientOcclusion = true;
        this._ambientOcclusionIntensity = 0.1;
        this._arRotation = gl_matrix_1.vec3.create();
        this._arScale = gl_matrix_1.vec3.fromValues(1, 1, 1);
        this._arTranslation = gl_matrix_1.vec3.create();
        this._automaticResizing = true;
        this._beautyRenderBlendingDuration = 1500;
        this._beautyRenderDelay = 50;
        this._busy = false;
        this._busyModeDisplay = viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER;
        this._clearAlpha = 1.0;
        this._clearColor = '#ffffff';
        // viewer global vars
        this._closed = false;
        this._enableAR = true;
        this._environmentMap = 'none';
        this._environmentMapAsBackground = false;
        this._environmentMapResolution = '1024';
        this._gridVisibility = true;
        this._groundPlaneVisibility = true;
        this._groundPlaneShadowVisibility = false;
        this._lights = true;
        this._pointSize = 1.0;
        this._shadows = true;
        this._show = false;
        this._showStatistics = false;
        this._type = viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD;
        _RenderingEngine_defaultLogo.set(this, 'https://viewer.shapediver.com/v3/graphics/logo_animated_breath.svg');
        _RenderingEngine_defaultLogoStatic.set(this, 'https://viewer.shapediver.com/v3/graphics/logo.png');
        _RenderingEngine_defaultSpinner.set(this, 'https://viewer.shapediver.com/v3/graphics/spinner_ripple.svg');
        _RenderingEngine_animations.set(this, {});
        _RenderingEngine_flags.set(this, {
            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE]: [],
            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING]: [],
            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE]: [],
        });
        // THREE object has default Y, we change that (although it doesn't work everywhere)
        THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);
        const prop = Object.assign({}, properties);
        const branding = Object.assign({}, prop.branding);
        // setting some of the provided properties
        this._id = prop.id || tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
        this._visibility = prop.visibility || viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION;
        this._sessionSettingsMode = prop.sessionSettingsMode || viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST;
        this._sessionSettingsId = prop.sessionSettingsId;
        this._branding = {
            logo: branding.logo === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultLogo, "f") : branding.logo,
            backgroundColor: branding.backgroundColor || '#393a45FF',
            busyModeSpinner: branding.busyModeSpinner === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultSpinner, "f") : branding.busyModeSpinner,
            busyModeDisplay: branding.busyModeDisplay || viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER,
            spinnerPositioning: branding.spinnerPositioning || viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT
        };
        // creation of viewer essentials
        this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(prop.canvas));
        this._canvas.canvasElement.addEventListener('webglcontextlost', (event) => {
            event.preventDefault();
            // prevent three.js event
            event.stopImmediatePropagation();
            this.displayErrorMessage(`An error occurred, please reload the page. If this happens again, please let us know.`);
            this.show = false;
        }, false);
        this._canvas.canvasElement.addEventListener('webglcontextrestored', (event) => {
            event.preventDefault();
            // prevent three.js event
            event.stopImmediatePropagation();
        }, false);
        // creation of the engines (all singleton engines were created already)
        this._domEventEngine = new viewer_shared_services_1.DomEventEngine(this._canvas.canvasElement);
        this._cameraEngine = new viewer_rendering_engine_camera_engine_1.CameraEngine(this, this._canvas.canvasElement);
        this._lightEngine = new viewer_rendering_engine_light_engine_1.LightEngine(this);
        // creation of the managers (all singleton engines were created already)
        this._animationManager = new AnimationManager_1.AnimationManager(this);
        this._beautyRenderingManager = new BeautyRenderingManager_1.BeautyRenderingManager(this);
        this._cameraManager = new CameraManager_1.CameraManager(this);
        this._environmentGeometryManager = new EnvironmentGeometryManager_1.EnvironmentGeometryManager(this);
        this._sceneTracingManager = new SceneTracingManager_1.SceneTracingManager(this);
        this._sceneTreeManager = new SceneTreeManager_1.SceneTreeManager(this);
        this._renderingManager = new RenderingManager_1.RenderingManager(this);
        // loaders
        this._environmentMapLoader = new EnvironmentMapLoader_1.EnvironmentMapLoader(this);
        this._materialLoader = new MaterialLoader_1.MaterialLoader(this);
        this._geometryLoader = new GeometryLoader_1.GeometryLoader(this);
        this._htmlElementAnchorLoader = new HTMLElementAnchorLoader_1.HTMLElementAnchorLoader(this);
        this._lightLoader = new LightLoader_1.LightLoader(this);
        // start the creation and initialization process 
        this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);
        this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._branding);
        this._spinnerDivElement = this.renderingManager.addSpinner(this._canvas.canvasElement, this._branding);
        // creation of the managers (all singleton engines were created already)
        this._beautyRenderingManager.init();
        this._cameraManager.init();
        this._environmentGeometryManager.init();
        this._sceneTracingManager.init();
        this._sceneTreeManager.init();
        this._renderingManager.init();
        // loaders
        this._environmentMapLoader.init();
        this._materialLoader.init();
        this._geometryLoader.init();
        this._htmlElementAnchorLoader.init();
        this._lightLoader.init();
        this._renderingManager.start();
        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {
            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);
        });
        if (this._sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.NONE) {
            this.environmentMap = 'photo_studio';
            this.ambientOcclusion = false;
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (103)
    get ambientOcclusion() {
        return this._ambientOcclusion;
    }
    set ambientOcclusion(value) {
        this._ambientOcclusion = value;
    }
    get ambientOcclusionIntensity() {
        return this._ambientOcclusionIntensity;
    }
    set ambientOcclusionIntensity(value) {
        this._ambientOcclusionIntensity = value;
    }
    get animationManager() {
        return this._animationManager;
    }
    get animations() {
        return __classPrivateFieldGet(this, _RenderingEngine_animations, "f");
    }
    get arRotation() {
        return this._arRotation;
    }
    set arRotation(value) {
        this._arRotation = value;
    }
    get arScale() {
        return this._arScale;
    }
    set arScale(value) {
        this._arScale = value;
    }
    get arTranslation() {
        return this._arTranslation;
    }
    set arTranslation(value) {
        this._arTranslation = value;
    }
    get automaticResizing() {
        return this._automaticResizing;
    }
    set automaticResizing(value) {
        this._automaticResizing = value;
    }
    get beautyRenderBlendingDuration() {
        return this._beautyRenderBlendingDuration;
    }
    set beautyRenderBlendingDuration(value) {
        this._beautyRenderBlendingDuration = value;
    }
    get beautyRenderDelay() {
        return this._beautyRenderDelay;
    }
    set beautyRenderDelay(value) {
        this._beautyRenderDelay = value;
    }
    get beautyRenderingManager() {
        return this._beautyRenderingManager;
    }
    get busy() {
        return this._busy;
    }
    set busy(value) {
        this._busy = value;
    }
    get busyModeDisplay() {
        return this._busyModeDisplay;
    }
    set busyModeDisplay(value) {
        this._busyModeDisplay = value;
    }
    get branding() {
        return this._branding;
    }
    get cameraEngine() {
        return this._cameraEngine;
    }
    get cameraManager() {
        return this._cameraManager;
    }
    get canvas() {
        return this._canvas.canvasElement;
    }
    get canvasEngine() {
        return this._canvasEngine;
    }
    get clearAlpha() {
        return this._clearAlpha;
    }
    set clearAlpha(value) {
        this._clearAlpha = value;
    }
    get clearColor() {
        return this._clearColor;
    }
    set clearColor(value) {
        this._clearColor = value;
    }
    get closed() {
        return this._closed;
    }
    get continuousRendering() {
        return this._renderingManager.continuousRendering;
    }
    set continuousRendering(value) {
        this._renderingManager.continuousRendering = value;
    }
    get continuousShadowMapUpdate() {
        return this._renderingManager.continuousShadowMapUpdate;
    }
    set continuousShadowMapUpdate(value) {
        this._renderingManager.continuousShadowMapUpdate = value;
    }
    get domEventEngine() {
        return this._domEventEngine;
    }
    get enableAR() {
        return this._enableAR;
    }
    set enableAR(value) {
        this._enableAR = value;
    }
    get environmentMap() {
        return this._environmentMap;
    }
    set environmentMap(value) {
        this._environmentMap = value;
        this._environmentMapLoader.load(this.environmentMap);
    }
    get environmentMapAsBackground() {
        return this._environmentMapAsBackground;
    }
    set environmentMapAsBackground(value) {
        this._environmentMapAsBackground = value;
    }
    get environmentMapLoader() {
        return this._environmentMapLoader;
    }
    get environmentMapResolution() {
        return this._environmentMapResolution;
    }
    set environmentMapResolution(value) {
        this._environmentMapResolution = value;
        this._environmentMapLoader.load(this.environmentMap);
    }
    get eventEngine() {
        return this._eventEngine;
    }
    get geometryLoader() {
        return this._geometryLoader;
    }
    get gridColor() {
        return this._environmentGeometryManager.gridColor;
    }
    set gridColor(value) {
        this._environmentGeometryManager.gridColor = value;
    }
    get gridVisibility() {
        return this._gridVisibility;
    }
    set gridVisibility(value) {
        if (this._environmentGeometryManager.grid)
            this._environmentGeometryManager.grid.visible = value;
        this._gridVisibility = value;
    }
    get groundPlaneColor() {
        return this._environmentGeometryManager.groundPlaneColor;
    }
    set groundPlaneColor(value) {
        this._environmentGeometryManager.groundPlaneColor = value;
    }
    get groundPlaneVisibility() {
        return this._groundPlaneVisibility;
    }
    set groundPlaneVisibility(value) {
        if (this._environmentGeometryManager.groundPlane)
            this._environmentGeometryManager.groundPlane.visible = value;
        this._groundPlaneVisibility = value;
    }
    get groundPlaneShadowColor() {
        return this._environmentGeometryManager.groundPlaneShadowColor;
    }
    set groundPlaneShadowColor(value) {
        this._environmentGeometryManager.groundPlaneShadowColor = value;
    }
    get groundPlaneShadowVisibility() {
        return this._groundPlaneShadowVisibility;
    }
    set groundPlaneShadowVisibility(value) {
        if (this._environmentGeometryManager.groundPlaneShadow)
            this._environmentGeometryManager.groundPlaneShadow.visible = value;
        this._groundPlaneShadowVisibility = value;
    }
    get htmlElementAnchorLoader() {
        return this._htmlElementAnchorLoader;
    }
    get id() {
        return this._id;
    }
    get lightEngine() {
        return this._lightEngine;
    }
    get lightLoader() {
        return this._lightLoader;
    }
    get lights() {
        return this._lights;
    }
    set lights(value) {
        this._lights = value;
    }
    get lightScene() {
        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';
    }
    get lightSceneId() {
        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';
    }
    get logoDivElement() {
        return this._logoDivElement;
    }
    get materialLoader() {
        return this._materialLoader;
    }
    get minimalRendering() {
        return this.renderingManager.minimalRendering;
    }
    get outputEncoding() {
        switch (this._renderer.outputEncoding) {
            case (THREE.sRGBEncoding):
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;
            case (THREE.LinearEncoding):
            default:
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;
        }
    }
    set outputEncoding(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):
                this._renderer.outputEncoding = THREE.sRGBEncoding;
                this._beautyRenderingManager.assignOutputEncoding(THREE.sRGBEncoding);
                break;
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):
            default:
                this._renderer.outputEncoding = THREE.LinearEncoding;
                this._beautyRenderingManager.assignOutputEncoding(THREE.LinearEncoding);
                break;
        }
    }
    get physicallyCorrectLights() {
        return this._renderer.physicallyCorrectLights;
    }
    set physicallyCorrectLights(value) {
        this._renderer.physicallyCorrectLights = value;
    }
    get pointSize() {
        return this._pointSize;
    }
    set pointSize(value) {
        this._pointSize = value;
        this.materialLoader.assignPointSize(value);
    }
    get renderer() {
        return this._renderer;
    }
    get renderingManager() {
        return this._renderingManager;
    }
    get scene() {
        return this._sceneTreeManager.scene;
    }
    get sceneTracingManager() {
        return this._sceneTracingManager;
    }
    get sceneTreeManager() {
        return this._sceneTreeManager;
    }
    get sessionSettingsId() {
        return this._sessionSettingsId;
    }
    set sessionSettingsId(value) {
        this._sessionSettingsId = value;
    }
    get sessionSettingsMode() {
        return this._sessionSettingsMode;
    }
    set sessionSettingsMode(value) {
        this._sessionSettingsMode = value;
    }
    get settingsEngine() {
        return this._settingsEngine;
    }
    set settingsEngine(value) {
        this._settingsEngine = value;
    }
    get shadows() {
        return this._shadows;
    }
    set shadows(value) {
        this._shadows = value;
    }
    get show() {
        return this._show;
    }
    set show(value) {
        this._show = value;
    }
    get showStatistics() {
        return this._showStatistics;
    }
    set showStatistics(value) {
        this._showStatistics = value;
    }
    get spinnerDivElement() {
        return this._spinnerDivElement;
    }
    get stateEngine() {
        return this._stateEngine;
    }
    get textureEncoding() {
        switch (this.materialLoader.textureEncoding) {
            case (THREE.sRGBEncoding):
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;
            case (THREE.LinearEncoding):
            default:
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;
        }
    }
    set textureEncoding(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):
                this.environmentMapLoader.textureEncoding = THREE.sRGBEncoding;
                this.materialLoader.textureEncoding = THREE.sRGBEncoding;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):
            default:
                this.environmentMapLoader.textureEncoding = THREE.LinearEncoding;
                this.materialLoader.textureEncoding = THREE.LinearEncoding;
        }
    }
    get toneMapping() {
        switch (this._renderer.toneMapping) {
            case (THREE.LinearToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR;
            case (THREE.ReinhardToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD;
            case (THREE.CineonToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON;
            case (THREE.ACESFilmicToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC;
            case (THREE.NoToneMapping):
            default:
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE;
        }
    }
    set toneMapping(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR):
                this._renderer.toneMapping = THREE.LinearToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD):
                this._renderer.toneMapping = THREE.ReinhardToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON):
                this._renderer.toneMapping = THREE.CineonToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC):
                this._renderer.toneMapping = THREE.ACESFilmicToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE):
            default:
                this._renderer.toneMapping = THREE.NoToneMapping;
        }
        this.materialLoader.updateMaterials();
    }
    get toneMappingExposure() {
        return this._renderer.toneMappingExposure;
    }
    set toneMappingExposure(value) {
        this._renderer.toneMappingExposure = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
        this.update('RenderingEngine.type');
    }
    get usingSwiftShader() {
        return this.renderingManager.usingSwiftShader;
    }
    get visibility() {
        return this._visibility;
    }
    get visualizeAttributes() {
        return this._visualizeAttributes;
    }
    set visualizeAttributes(value) {
        this._visualizeAttributes = value;
    }
    // #endregion Public Accessors (103)
    // #region Public Methods (16)
    addFlag(flag) {
        const token = this._uuidGenerator.create();
        if (flag === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {
            this.stateEngine.renderingEngines[this.id].busy.push(token);
        }
        else {
            __classPrivateFieldGet(this, _RenderingEngine_flags, "f")[flag].push(token);
        }
        this.evaluateFlagState();
        return token;
    }
    applySettings(sections = {
        ar: true,
        scene: true,
        camera: true,
        light: true,
        environment: true,
        general: true
    }, settingsEngine) {
        settingsEngine = settingsEngine || this._settingsEngine;
        if (!settingsEngine)
            return;
        if (sections.environment) {
            // as the environment map is the only thing that needs time to load, load it first
            this._stateEngine.renderingEngines[this.id].environmentMapLoaded.then(() => {
                if (!settingsEngine)
                    return;
                this.environmentMapAsBackground = settingsEngine.environment.mapAsBackground;
                this.clearAlpha = settingsEngine.environment.clearAlpha;
                this.clearColor = this._converter.toColor(settingsEngine.environment.clearColor);
                this.applySyncSettings(sections);
            });
            // set it like this to not trigger the loading
            this.environmentMap = settingsEngine.environment.map;
        }
        else {
            this.applySyncSettings(sections);
        }
    }
    convert3Dto2D(p) {
        return this.sceneTracingManager.convert3Dto2D(p);
    }
    close() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this._closed = true;
            this._lightEngine.close();
            this._renderer.clear(true, true, true);
            this._renderer.dispose();
            this._domEventEngine.removeAllDomEventListener();
            this._domEventEngine.dispose();
            (_a = this._canvas.canvasElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._logoDivElement);
            (_b = this._canvas.canvasElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this._spinnerDivElement);
            (_c = this._canvas.canvasElement.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(this._htmlElementAnchorLoader.parentDiv);
            this._canvas.reset();
        });
    }
    createSDTFOverview(node) {
        const out = new viewer_shared_types_1.SDTFOverviewData({});
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.SDTFOverviewData)
                out.merge(node.data[i]);
        for (let i = 0, len = node.children.length; i < len; i++)
            out.merge(new viewer_shared_types_1.SDTFOverviewData(this.createSDTFOverview(node.children[i])));
        return out.overview;
    }
    displayErrorMessage(message) {
        for (let i = 0; i < this.logoDivElement.children.length; i++)
            this.logoDivElement.children[i].style.visibility = 'hidden';
        const d = document.createElement('div');
        d.style.position = 'absolute';
        d.style.top = '50%';
        d.style.left = '50%';
        d.style.transform = 'translateX(-50%) translateY(-50%)';
        d.style.textAlign = 'center';
        this.logoDivElement.appendChild(d);
        const p = document.createElement('p');
        p.textContent = message;
        p.style.fontFamily = '"CircularXXWeb-Book",sans-serif';
        p.style.fontSize = 'x-large';
        p.style.color = this.logoDivElement.style.backgroundColor;
        p.style['filter'] = 'invert(100%)';
        d.appendChild(p);
    }
    evaluateFlagState() {
        // busy
        {
            const currentBusyState = this.busy;
            if (this.stateEngine.renderingEngines[this.id] && this.stateEngine.renderingEngines[this.id].busy.length > 0) {
                if (!currentBusyState) {
                    this.busy = true;
                    this._renderingManager.render();
                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_ON, { viewportId: this.id });
                }
            }
            else {
                if (currentBusyState) {
                    this.busy = false;
                    this._renderingManager.render();
                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_OFF, { viewportId: this.id });
                }
            }
        }
        // camera freeze
        {
            if (__classPrivateFieldGet(this, _RenderingEngine_flags, "f")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE].length > 0) {
                this.cameraEngine.deactivateCameraEvents();
            }
            else {
                this.cameraEngine.activateCameraEvents();
            }
        }
        // continuous rendering
        {
            const currentContinuousRenderingState = this.continuousRendering;
            if (__classPrivateFieldGet(this, _RenderingEngine_flags, "f")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING].length > 0) {
                if (!currentContinuousRenderingState) {
                    this.continuousRendering = true;
                    this._renderingManager.render();
                }
            }
            else {
                if (currentContinuousRenderingState) {
                    this.continuousRendering = false;
                }
            }
        }
        // continuous shadow map update
        {
            const currentShadowMapUpdateState = this.continuousShadowMapUpdate;
            if (__classPrivateFieldGet(this, _RenderingEngine_flags, "f")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE].length > 0) {
                if (!currentShadowMapUpdateState) {
                    this.continuousShadowMapUpdate = true;
                    this._renderingManager.render();
                }
            }
            else {
                if (currentShadowMapUpdateState) {
                    this.continuousShadowMapUpdate = false;
                }
            }
        }
    }
    gatherAnimations(node = this._tree.root) {
        let out = [];
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.AnimationData)
                out.push(node.data[i]);
        for (let i = 0, len = node.children.length; i < len; i++)
            out = out.concat(this.gatherAnimations(node.children[i]));
        return out;
    }
    getEnvironmentMapImageUrl() {
        return this._environmentMapLoader.getEnvironmentMapImageUrl(this.environmentMap);
    }
    getScreenshot(type, encoderOptions) {
        return this._renderingManager.getScreenshot(type, encoderOptions);
    }
    mouseEventToRay(event) {
        return this._sceneTracingManager.mouseEventToRay(event);
    }
    raytraceScene(origin, direction, root) {
        return this.sceneTracingManager.trace(origin, direction, root);
    }
    removeFlag(token) {
        let success = false;
        const Flags = Object.values(viewer_rendering_engine_rendering_engine_1.FLAG_TYPE);
        for (let f of Flags) {
            if (f === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {
                if (this.stateEngine.renderingEngines[this.id].busy.includes(token)) {
                    this.stateEngine.renderingEngines[this.id].busy.splice(this.stateEngine.renderingEngines[this.id].busy.indexOf(token), 1);
                    success = true;
                    break;
                }
            }
            else {
                if (__classPrivateFieldGet(this, _RenderingEngine_flags, "f")[f].includes(token)) {
                    __classPrivateFieldGet(this, _RenderingEngine_flags, "f")[f].splice(__classPrivateFieldGet(this, _RenderingEngine_flags, "f")[f].indexOf(token), 1);
                    success = true;
                    break;
                }
            }
        }
        this.evaluateFlagState();
        return success;
    }
    reset() {
        this._stateEngine.renderingEngines[this.id].settingsAssigned.reset();
        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.reset();
        this._stateEngine.renderingEngines[this.id].environmentMapLoaded.reset();
        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {
            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);
        });
    }
    resize(width, height) {
        this._renderingManager.resize(width, height);
        this._renderingManager.render();
    }
    saveSettings(settingsEngine) {
        settingsEngine = settingsEngine || this._settingsEngine;
        if (!settingsEngine)
            return;
        this.lightEngine.saveSettings(settingsEngine);
        this.cameraEngine.saveSettings(settingsEngine);
        settingsEngine.ar.enable = this.enableAR;
        settingsEngine.environment.mapResolution = this.environmentMapResolution;
        settingsEngine.environment.map = Array.isArray(this.environmentMap) ? JSON.stringify(this.environmentMap) : this.environmentMap;
        settingsEngine.environment.mapAsBackground = this.environmentMapAsBackground;
        settingsEngine.environment.clearAlpha = this.clearAlpha;
        settingsEngine.environment.clearColor = this.clearColor;
        settingsEngine.environmentGeometry.gridVisibility = this.gridVisibility;
        settingsEngine.environmentGeometry.groundPlaneVisibility = this.groundPlaneVisibility;
        //settingsEngine.environmentGeometry.groundPlaneShadowVisibility = this.groundPlaneShadowVisibility;
        settingsEngine.environmentGeometry.gridColor = this.gridColor;
        settingsEngine.environmentGeometry.groundPlaneColor = this.groundPlaneColor;
        //settingsEngine.environmentGeometry.groundPlaneShadowColor = this.groundPlaneShadowColor;
        settingsEngine.general.pointSize = this.pointSize;
        settingsEngine.general.transformation.rotation = { x: this.arRotation[0], y: this.arRotation[1], z: this.arRotation[2] };
        settingsEngine.general.transformation.translation = { x: this.arTranslation[0], y: this.arTranslation[1], z: this.arTranslation[2] };
        settingsEngine.general.transformation.scale = { x: this.arScale[0], y: this.arScale[1], z: this.arScale[2] };
        settingsEngine.rendering.ambientOcclusion = this.ambientOcclusion;
        settingsEngine.rendering.ambientOcclusionIntensity = this.ambientOcclusionIntensity;
        settingsEngine.rendering.outputEncoding = this.outputEncoding;
        settingsEngine.rendering.physicallyCorrectLights = this.physicallyCorrectLights;
        settingsEngine.rendering.textureEncoding = this.textureEncoding;
        settingsEngine.rendering.toneMapping = this.toneMapping;
        settingsEngine.rendering.toneMappingExposure = this.toneMappingExposure;
        settingsEngine.rendering.beautyRenderBlendingDuration = this.beautyRenderBlendingDuration;
        settingsEngine.rendering.beautyRenderDelay = this.beautyRenderDelay;
        settingsEngine.rendering.shadows = this.shadows;
    }
    startGatherAnimations(node = this._tree.root) {
        __classPrivateFieldSet(this, _RenderingEngine_animations, {}, "f");
        const animationArray = this.gatherAnimations();
        const names = animationArray.map(a => a.name);
        const animationDictionary = {};
        for (let i = 0; i < animationArray.length; i++) {
            const animationName = animationArray[i].name;
            const nameIndices = [];
            for (let j = 0; j < names.length; j++)
                if (animationName === names[j])
                    nameIndices.push(j);
            let animationNameAdjusted = animationName;
            // name adjustement if the name occurs multiple times
            if (nameIndices.length > 1) {
                animationNameAdjusted = animationName + '_' + nameIndices.indexOf(i);
                // even further name adjustement if the name is even then the same after adjustements (probably will never happen)
                while (names.includes(animationNameAdjusted))
                    animationNameAdjusted += "_0";
            }
            __classPrivateFieldGet(this, _RenderingEngine_animations, "f")[animationNameAdjusted] = animationArray[i];
        }
    }
    touchToRay(event) {
        return this._sceneTracingManager.touchToRay(event);
    }
    touchEventToRay(event) {
        return this._sceneTracingManager.touchEventToRay(event);
    }
    update(id) {
        if (this.closed)
            return;
        this._sceneTreeManager.updateSceneTree(this._tree.root, this._lightEngine);
        this._renderingManager.updateShadowMap();
        this.startGatherAnimations();
        this._renderingManager.render();
        this._renderingManager.lastRootVersion = this._tree.root.version;
    }
    updateEnvironmentGeometry() {
        this._environmentGeometryManager.updateEnvironmentGeometryPosition();
    }
    viewInAR(file, options = { arScale: 'auto', arPlacement: 'floor', xrEnvironment: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = this._uuidGenerator.create();
            const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 0, status: 'Loading AR scene' };
            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);
            // if this is not a supported device, throw an error
            if (this.viewableInAR() === false) {
                const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };
                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);
                const error = new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: The device or browser is not supported for this functionality, please call "viewableInAR" for more information.');
                throw this._logger.handleError(viewer_shared_services_1.LOGGING_TOPIC.AR, 'Api.viewInAR', error, false);
            }
            const arScale = options.arScale !== 'auto' ? 'fixed' : 'auto';
            const arPlacement = options.arPlacement !== 'wall' ? 'floor' : 'wall';
            const xrEnvironment = options.xrEnvironment !== true ? false : true;
            let arEnvironment = '';
            const envMapUrl = this.getEnvironmentMapImageUrl();
            if (envMapUrl !== '') {
                if (envMapUrl.endsWith('.hdr')) {
                    arEnvironment = 'skybox-image=' + envMapUrl;
                }
                else {
                    arEnvironment = 'environment-image=' + envMapUrl;
                }
            }
            if (this._systemInfo.isIOS) {
                // create the link and click it
                const a = document.createElement('a');
                a.href = file + (arScale === 'fixed' ? '.usdz_allowsContentScaling=0' : '.usdz');
                a.rel = 'ar';
                const img = document.createElement('img');
                img.src = __classPrivateFieldGet(this, _RenderingEngine_defaultLogoStatic, "f");
                a.appendChild(img);
                a.click();
            }
            else {
                const a = document.createElement('a');
                a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${arScale === 'fixed' ? 'false' : 'true'}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;end;`;
                a.click();
            }
            const event2 = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Done loading AR scene, launching AR' };
            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event2);
        });
    }
    viewableInAR() {
        // has to be a mobile device (duh)
        if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)
            return false;
        // no Firefox on Android
        if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)
            return false;
        // no Firefox on iOS
        if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)
            return false;
        return true;
    }
    // #endregion Public Methods (16)
    // #region Private Methods (1)
    applySyncSettings(sections = {
        ar: true,
        scene: true,
        camera: true,
        light: true,
        environment: true,
        general: true
    }) {
        if (!this._settingsEngine)
            return;
        if (sections.ar) {
            this.enableAR = this._settingsEngine.ar.enable;
            this.arScale = [this._settingsEngine.general.transformation.scale.x, this._settingsEngine.general.transformation.scale.y, this._settingsEngine.general.transformation.scale.z];
            this.arTranslation = [this._settingsEngine.general.transformation.translation.x, this._settingsEngine.general.transformation.translation.y, this._settingsEngine.general.transformation.translation.z];
            this.arRotation = [this._settingsEngine.general.transformation.rotation.x, this._settingsEngine.general.transformation.rotation.y, this._settingsEngine.general.transformation.rotation.z];
        }
        if (sections.scene) {
            this.gridColor = this._settingsEngine.environmentGeometry.gridColor;
            this.gridVisibility = this._settingsEngine.environmentGeometry.gridVisibility;
            this.groundPlaneColor = this._settingsEngine.environmentGeometry.groundPlaneColor;
            this.groundPlaneVisibility = this._settingsEngine.environmentGeometry.groundPlaneVisibility;
            // this.groundPlaneShadowColor = this._settingsEngine.environmentGeometry.groundPlaneShadowColor;
            // this.groundPlaneShadowVisibility = this._settingsEngine.environmentGeometry.groundPlaneShadowVisibility;
            this.shadows = this._settingsEngine.rendering.shadows;
            this.ambientOcclusion = this._settingsEngine.rendering.ambientOcclusion;
            this.textureEncoding = this._settingsEngine.rendering.textureEncoding;
            this.outputEncoding = this._settingsEngine.rendering.outputEncoding;
            this.physicallyCorrectLights = this._settingsEngine.rendering.physicallyCorrectLights;
            this.toneMapping = this._settingsEngine.rendering.toneMapping;
            this.toneMappingExposure = this._settingsEngine.rendering.toneMappingExposure;
        }
        if (sections.general) {
            this.pointSize = this._settingsEngine.general.pointSize;
        }
        if (sections.light)
            this.lightEngine.applySettings(this._settingsEngine);
        if (sections.camera)
            this.cameraEngine.applySettings(this._settingsEngine);
        this._stateEngine.renderingEngines[this.id].settingsAssigned.resolve(true);
        this.update('RenderingEngine.applySyncSettings');
    }
}
exports.RenderingEngine = RenderingEngine;
_RenderingEngine_defaultLogo = new WeakMap(), _RenderingEngine_defaultLogoStatic = new WeakMap(), _RenderingEngine_defaultSpinner = new WeakMap(), _RenderingEngine_animations = new WeakMap(), _RenderingEngine_flags = new WeakMap();
//# sourceMappingURL=RenderingEngine.js.map