import * as THREE from 'three';
import { PRIMITIVE_MODE, IMaterialAbstractData, MaterialUnlitData, MaterialSpecularGlossinessData, MaterialGemData, MaterialStandardData, MaterialShadowData, GeometryData } from '@shapediver/viewer.shared.types';
import { RenderingEngine } from '../RenderingEngine';
import { SpecularGlossinessMaterialParameters } from '../materials/SpecularGlossinessMaterial';
import { ILoader } from '../interfaces/ILoader';
import { MeshUnlitMaterialParameters } from '../materials/MeshUnlitMaterialParameters';
import { ENVIRONMENT_MAP_TYPE } from './EnvironmentMapLoader';
import { GemMaterialParameters } from '../materials/GemMaterial';
export declare enum MATERIAL_TYPE {
    POINT = "point",
    LINE = "line",
    MESH = "mesh"
}
export declare type MaterialSettings = {
    mode: PRIMITIVE_MODE;
    useVertexTangents: boolean;
    useVertexColors: boolean;
    useFlatShading: boolean;
    useMorphTargets: boolean;
    useMorphNormals: boolean;
};
export declare class MaterialLoader implements ILoader {
    private readonly _renderingEngine;
    private readonly _converter;
    private readonly _defaultColor;
    private readonly _logger;
    private _materialCache;
    private _blending;
    private _envMap;
    private _height;
    private _lightSizeUV;
    private _pointSize;
    private _textureEncoding;
    private _maxMapCount;
    private _envMapType;
    constructor(_renderingEngine: RenderingEngine);
    assignEnvironmentMap(e: THREE.CubeTexture | THREE.Texture | null, type: ENVIRONMENT_MAP_TYPE): void;
    assignPointSize(p: number): void;
    private assignTextureEncoding;
    emptyMaterialCache(): void;
    removeFromMaterialCache(id: string): void;
    init(): void;
    getMaterialProperties(materialData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | MaterialShadowData | null, type: MATERIAL_TYPE, materialSettings?: MaterialSettings): {
        properties: THREE.PointsMaterialParameters | THREE.LineBasicMaterialParameters | MeshUnlitMaterialParameters | THREE.MeshPhysicalMaterialParameters | SpecularGlossinessMaterialParameters | GemMaterialParameters | THREE.ShadowMaterialParameters;
        mapCount: number;
    };
    /**
     * Create a material object with the provided material data.
     *
     * @param material the material data
     * @returns the material object
     */
    load(incomingData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | GeometryData, materialSettings?: MaterialSettings): THREE.Material;
    updateMaterials(): void;
    updateSoftShadow(lightSizeUV: number, blending: number): void;
    private createTexture;
    get maxMapCount(): number;
    set maxMapCount(value: number);
    get textureEncoding(): THREE.TextureEncoding;
    set textureEncoding(value: THREE.TextureEncoding);
}
//# sourceMappingURL=MaterialLoader.d.ts.map