import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { ShapeDiverResponseOutputContent } from '@shapediver/sdk.geometry-api-sdk-v2';
export declare class SDTFEngine {
    private readonly _logger;
    private _parsedFile;
    constructor();
    /**
     * Load the sdtf content into a scene graph node.
     *
     * @param content the geometry content
     * @returns the scene graph node
     */
    loadContent(content: ShapeDiverResponseOutputContent, jwtToken?: string): Promise<ITreeNode>;
    /**
     * Create an overview of the SDTF file.
     * This overview is used for the data visualization.
     * It is structured as a dictionary with the name as the key and an array of Objects as the value.
     * The array of objects contains the different types that can be found in the SDTF file under the same name.
     *
     * Example:
     * {
     *     "color": [
     *         {
     *             typeHint: 'string',
     *             count: 2,
     *             values: ["red", "blue"]
     *         },
     *         {
     *             typeHint: 'numberArray',
     *             count: 2,
     *             values: [[1,0,0,1], [0,0,1,1]]
     *         },
     *     ]
     * }
     *
     * The overview contains the following information:
     * - name of the attribute + type of the attribute
     * - the count
     * - for numerical attributes, the min and max values
     * - for string attributes, the unique values
     *
     * @returns
     */
    private createSDTFOverview;
    /**
     * Load the attributes into a SDTFAttributesData data item.
     *
     * @param attributes
     * @returns
     */
    private loadAttributes;
    /**
     * Load the chunk into a scene graph node.
     *
     * @param chunk
     * @param chunkId
     * @returns
     */
    private loadChunk;
    /**
     * Load the item into a scene graph node.
     *
     * @param item
     * @param itemId
     * @returns
     */
    private loadItem;
    /**
     * Load the node into a scene graph node.
     *
     * @param node
     * @param nodeId
     * @returns
     */
    private loadNode;
}
//# sourceMappingURL=SDTFEngine.d.ts.map