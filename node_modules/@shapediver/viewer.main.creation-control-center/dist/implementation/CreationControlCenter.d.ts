import { BUSY_MODE_DISPLAY, SESSION_SETTINGS_MODE, SPINNER_POSITIONING, VISIBILITY_MODE } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { RenderingEngine, RenderingEngine as RenderingEngineThreeJs } from "@shapediver/viewer.rendering-engine-threejs.standard";
import { ISettingsSections, SessionEngine } from "@shapediver/viewer.session-engine.session-engine";
import { ICreationControlCenter } from "../interfaces/ICreationControlCenter";
import { ShapeDiverResponseDto } from "@shapediver/api.geometry-api-dto-v2";
import { ISettingsV3_1 } from "@shapediver/viewer.settings";
export declare class CreationControlCenter implements ICreationControlCenter {
    #private;
    readonly renderingEngines: {
        [key: string]: RenderingEngineThreeJs;
    };
    readonly sessionEngines: {
        [key: string]: SessionEngine;
    };
    update?: (sessionEngines: {
        [key: string]: SessionEngine;
    }, renderingEngines: {
        [key: string]: RenderingEngine;
    }) => void;
    applySettings(sessionId: string, response: ShapeDiverResponseDto, sections?: ISettingsSections): Promise<void>;
    getViewportSettings(viewportId: string): ISettingsV3_1;
    applyViewportSettings(viewportId: string, settings: ISettingsV3_1, sections?: {
        ar?: boolean | undefined;
        scene?: boolean | undefined;
        camera?: boolean | undefined;
        light?: boolean | undefined;
        environment?: boolean | undefined;
        general?: boolean | undefined;
    }): Promise<void>;
    closeRenderingEngine(id: string): Promise<void>;
    closeSessionEngine(id: string): Promise<void>;
    createRenderingEngineThreeJs(properties: {
        canvas?: HTMLCanvasElement;
        id?: string;
        branding?: {
            logo?: string | null;
            backgroundColor?: string;
            busyModeSpinner?: string;
            busyModeDisplay?: BUSY_MODE_DISPLAY;
            spinnerPositioning?: SPINNER_POSITIONING;
        };
        sessionSettingsId?: string;
        sessionSettingsMode?: SESSION_SETTINGS_MODE;
        visibility?: VISIBILITY_MODE;
    }): Promise<RenderingEngineThreeJs>;
    createSessionEngine(properties: {
        ticket: string;
        modelViewUrl: string;
        jwtToken?: string;
        id?: string;
        waitForOutputs?: boolean;
        loadOutputs?: boolean;
        excludeViewports?: string[];
        initialParameterValues?: {
            [key: string]: string;
        };
    }): Promise<SessionEngine>;
    getARSessionEngine(): SessionEngine | undefined;
    createSettingsObject(sessionId: string, viewportId?: string): any;
    resetSettings(sessionId: string, sections?: ISettingsSections): Promise<void>;
    saveSettings(sessionId: string, viewportId?: string): Promise<boolean>;
    private assignSettings;
}
//# sourceMappingURL=CreationControlCenter.d.ts.map