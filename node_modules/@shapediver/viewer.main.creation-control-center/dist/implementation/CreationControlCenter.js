"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _CreationControlCenter_eventEngine, _CreationControlCenter_logger, _CreationControlCenter_sceneTree, _CreationControlCenter_stateEngine, _CreationControlCenter_uuidGenerator, _CreationControlCenter_firstSessionEngine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreationControlCenter = void 0;
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_rendering_engine_threejs_standard_1 = require("@shapediver/viewer.rendering-engine-threejs.standard");
const viewer_session_engine_session_engine_1 = require("@shapediver/viewer.session-engine.session-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const tsyringe_1 = require("tsyringe");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
let CreationControlCenter = class CreationControlCenter {
    constructor() {
        // #region Properties (10)
        _CreationControlCenter_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _CreationControlCenter_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _CreationControlCenter_sceneTree.set(this, tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree));
        _CreationControlCenter_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _CreationControlCenter_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        this.renderingEngines = {};
        this.sessionEngines = {};
        _CreationControlCenter_firstSessionEngine.set(this, void 0);
        // #endregion Private Methods (1)
    }
    // #endregion Properties (10)
    // #region Public Methods (6)
    applySettings(sessionId, response, sections) {
        sections = sections || {};
        this.sessionEngines[sessionId].applySettings(response, sections);
        const promises = [];
        if (sections.session && sections.session.parameter && sections.session.parameter.value)
            promises.push(this.sessionEngines[sessionId].customize());
        for (let r in this.renderingEngines) {
            if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f").id) ||
                (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.reset();
                promises.push(new Promise(resolve => {
                    __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.then(() => {
                        resolve();
                    });
                }));
                this.renderingEngines[r].applySettings(sections.viewport);
            }
        }
        return new Promise(resolve => Promise.all(promises).then(() => resolve()));
    }
    getViewportSettings(viewportId) {
        let renderingEngine = this.renderingEngines[viewportId];
        if (!renderingEngine)
            throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").error(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, new Error('Viewport with id ' + viewportId + ' could not be found.'), undefined, true, false);
        const settingsEngine = new viewer_shared_services_1.SettingsEngine();
        renderingEngine.saveSettings(settingsEngine);
        return settingsEngine.convertToTargetVersion();
    }
    applyViewportSettings(viewportId, settings, sections = { ar: false, scene: false, camera: false, light: false, environment: false, general: false }) {
        sections = sections || {};
        const settingsEngine = new viewer_shared_services_1.SettingsEngine();
        settingsEngine.loadSettings(settings);
        const promises = [];
        __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[viewportId].settingsAssigned.reset();
        promises.push(new Promise(resolve => {
            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[viewportId].settingsAssigned.then(() => {
                resolve();
            });
        }));
        this.renderingEngines[viewportId].applySettings(sections, settingsEngine);
        return new Promise(resolve => Promise.all(promises).then(() => resolve()));
    }
    closeRenderingEngine(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.renderingEngines[id])
                    return;
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debugLow(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `CreationControlCenter.closeRenderingEngine: Closing viewport ${id}.`);
                if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id].initialized.resolved === false)
                    yield new Promise(resolve => { __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id].initialized.then(() => resolve()); });
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id].settingsAssigned.reset();
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id].environmentMapLoaded.reset();
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id].initialized.reset();
                yield this.renderingEngines[id].close();
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CLOSED, { viewportId: id });
                this.renderingEngines[id] = undefined;
                delete this.renderingEngines[id];
                delete __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[id];
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `CreationControlCenter.closeRenderingEngine: Viewport closed.`);
                if (this.update)
                    this.update(this.sessionEngines, this.renderingEngines);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.GENERAL, 'CreationControlCenter.closeRenderingEngine', e);
            }
        });
    }
    closeSessionEngine(id) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.sessionEngines[id])
                    return;
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debugLow(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `CreationControlCenter.closeSession: Closing session ${id}.`);
                if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[id].initialized.resolved === false)
                    yield new Promise(resolve => { __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[id].initialized.then(() => resolve()); });
                yield this.sessionEngines[id].close();
                // remove from rendering engines (also directly assigned)
                for (let r in this.renderingEngines) {
                    if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === id) ||
                        (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f") === this.sessionEngines[id])) {
                        this.renderingEngines[r].reset();
                    }
                }
                if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f") === this.sessionEngines[id]) {
                    const engines = Object.values(this.sessionEngines).filter(s => s.id !== id);
                    __classPrivateFieldSet(this, _CreationControlCenter_firstSessionEngine, engines.length === 0 ? undefined : engines[0], "f");
                    if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f")) {
                        let promises = [];
                        for (let r in this.renderingEngines) {
                            if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.resolved === false) {
                                if (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST) {
                                    promises.push(__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned);
                                    this.assignSettings(this.renderingEngines[r], (_a = __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f")) === null || _a === void 0 ? void 0 : _a.id);
                                }
                            }
                        }
                        yield Promise.all(promises);
                        if (this.update)
                            this.update(this.sessionEngines, this.renderingEngines);
                    }
                }
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CLOSED, { sessionId: id });
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[id].settingsRegistered.reset();
                this.sessionEngines[id] = undefined;
                delete this.sessionEngines[id];
                delete __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[id];
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `CreationControlCenter.closeSessionEngine: Session closed.`);
                for (let r in this.renderingEngines)
                    this.renderingEngines[r].update('CreationControlCenter.closeSessionEngine');
                if (this.update)
                    this.update(this.sessionEngines, this.renderingEngines);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.GENERAL, 'CreationControlCenter.closeSession', e);
            }
        });
    }
    createRenderingEngineThreeJs(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, "f").create();
            let renderingEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, "f").create();
            properties.id = renderingEngineId;
            try {
                const eventStart = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0, status: 'Creating viewport' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                // check if the given id is valid
                if (this.renderingEngines[renderingEngineId]) {
                    const eventClose = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.1, status: 'Closing viewport with same id' };
                    __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").warn(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `CreationControlCenter.createViewport: Viewer with this id (${renderingEngineId}) already exists. Closing initial instance.`);
                    yield this.closeRenderingEngine(renderingEngineId);
                }
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId] = {
                    id: renderingEngineId,
                    initialized: new viewer_shared_services_1.StatePromise(),
                    environmentMapLoaded: new viewer_shared_services_1.StatePromise(),
                    settingsAssigned: new viewer_shared_services_1.StatePromise(),
                    boundingBoxCreated: new viewer_shared_services_1.StatePromise(),
                    busy: []
                };
                const renderingEngine = new viewer_rendering_engine_threejs_standard_1.RenderingEngine(properties);
                tsyringe_1.container.registerInstance('renderingEngine', renderingEngine);
                this.renderingEngines[renderingEngineId] = renderingEngine;
                renderingEngine.cameraEngine.createDefaultCameras();
                if (properties.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL) {
                    if (!properties.sessionSettingsId)
                        throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").error(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, new Error('Session with sessionSettingsMode MANUAL needs to have a sessionSettingsId.'), undefined, true, true);
                    const sessionSettingsId = properties.sessionSettingsId;
                    if (this.sessionEngines[sessionSettingsId]) {
                        this.assignSettings(renderingEngine, sessionSettingsId);
                    }
                    else {
                        // in createSession
                    }
                }
                else if (properties.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST) {
                    if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f")) {
                        this.assignSettings(renderingEngine, __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f").id);
                    }
                    else {
                        // in createSession
                    }
                }
                if (renderingEngine.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.NONE &&
                    renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION) {
                    renderingEngine.show = true;
                }
                else if (renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.INSTANT) {
                    renderingEngine.show = true;
                }
                else if (renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION) {
                    // wait for settings to load before showing the scene
                    if (__classPrivateFieldGet(this, _CreationControlCenter_sceneTree, "f").root.boundingBox.isEmpty()) {
                        __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {
                            const event = e;
                            if (event.viewportId === renderingEngine.id) {
                                const boundingBox = new viewer_shared_math_1.Box(event.boundingBox.min, event.boundingBox.max);
                                if (boundingBox.isEmpty()) {
                                    renderingEngine.show = false;
                                }
                                else {
                                    if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId].settingsAssigned.resolved) {
                                        renderingEngine.show = true;
                                    }
                                    else {
                                        __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId].settingsAssigned.then(() => {
                                            renderingEngine.show = true;
                                        });
                                    }
                                }
                            }
                        });
                    }
                    else {
                        if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId].settingsAssigned.resolved) {
                            renderingEngine.show = true;
                        }
                        else {
                            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId].settingsAssigned.then(() => {
                                renderingEngine.show = true;
                            });
                        }
                    }
                }
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CREATED, { viewportId: renderingEngineId });
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[renderingEngineId].initialized.resolve(true);
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.VIEWPORT, `CreationControlCenter.createViewport: Viewport(${renderingEngineId}) created.`);
                const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                if (this.update)
                    this.update(this.sessionEngines, this.renderingEngines);
                return this.renderingEngines[renderingEngineId];
            }
            catch (e) {
                const eventCancel1 = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.9, status: 'Viewport created failed, closing viewport' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                try {
                    yield this.closeRenderingEngine(renderingEngineId);
                }
                catch (_a) { }
                const eventCancel2 = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created failed, exiting' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.GENERAL, 'CreationControlCenter.createViewport', e);
            }
        });
    }
    createSessionEngine(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, "f").create();
            let sessionEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, "f").create();
            properties.id = sessionEngineId;
            try {
                const eventStart = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0, status: 'Creating session' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                // check if the given id is valid
                if (this.sessionEngines[sessionEngineId]) {
                    const eventClose = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.1, status: 'Closing session with same id' };
                    __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").warn(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `CreationControlCenter.createSession: Session with this id (${sessionEngineId}) already exists. Closing initial instance.`);
                    yield this.closeSessionEngine(sessionEngineId);
                }
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[sessionEngineId] = {
                    id: sessionEngineId,
                    initialized: new viewer_shared_services_1.StatePromise(),
                    settingsRegistered: new viewer_shared_services_1.StatePromise()
                };
                // create the actual session 
                const sessionEngine = new viewer_session_engine_session_engine_1.SessionEngine({
                    id: sessionEngineId,
                    ticket: properties.ticket,
                    modelViewUrl: properties.modelViewUrl,
                    excludeViewports: properties.excludeViewports,
                    buildVersion: viewer_shared_build_data_1.build_data.build_version,
                    buildDate: viewer_shared_build_data_1.build_data.build_date,
                    bearerToken: properties.jwtToken
                });
                const eventInit = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.25, status: 'Initializing session' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventInit);
                yield sessionEngine.init(properties.initialParameterValues);
                if (properties.loadOutputs !== false) {
                    if (properties.waitForOutputs !== false) {
                        yield sessionEngine.updateOutputs();
                        __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });
                        const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 1, status: 'Initial outputs loaded' };
                        __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                        for (let r in this.renderingEngines)
                            this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=true');
                    }
                    else {
                        sessionEngine.updateOutputs().then(() => {
                            __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });
                            const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 1, status: 'Initial outputs loaded' };
                            __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                            for (let r in this.renderingEngines)
                                this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=false');
                        });
                    }
                }
                // save the session
                this.sessionEngines[sessionEngineId] = sessionEngine;
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CREATED, { sessionEngineId });
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[sessionEngineId].initialized.resolve(true);
                __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `CreationControlCenter.createSession: Session(${sessionEngine.id}) created.`);
                const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                if (!__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f"))
                    __classPrivateFieldSet(this, _CreationControlCenter_firstSessionEngine, sessionEngine, "f");
                let promises = [];
                for (let r in this.renderingEngines) {
                    if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.resolved === false) {
                        if (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST || (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === sessionEngineId)) {
                            promises.push(__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned);
                            this.assignSettings(this.renderingEngines[r], sessionEngineId);
                        }
                    }
                }
                yield Promise.all(promises);
                for (let r in this.renderingEngines)
                    this.renderingEngines[r].update('CreationControlCenter.createSessionEngine');
                if (this.update)
                    this.update(this.sessionEngines, this.renderingEngines);
                return sessionEngine;
            }
            catch (e) {
                // special behavior, if this was the only session, display the error on the logo screen
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError) {
                    if ((this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 1) || (!this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 0)) {
                        for (let v in this.renderingEngines)
                            this.renderingEngines[v].displayErrorMessage(e.message);
                    }
                }
                const eventCancel1 = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.9, status: 'Session created failed, closing session' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                yield this.closeSessionEngine(sessionEngineId);
                const eventCancel2 = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created failed' };
                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.GENERAL, 'CreationControlCenter.createSession', e);
            }
        });
    }
    getARSessionEngine() {
        for (let s in this.sessionEngines) {
            if (this.sessionEngines[s].canUploadGLTF) {
                return this.sessionEngines[s];
            }
        }
    }
    createSettingsObject(sessionId, viewportId) {
        try {
            const session = this.sessionEngines[sessionId];
            session.settingsEngine.settings.build_version = viewer_shared_build_data_1.build_data.build_version;
            session.settingsEngine.settings.build_date = viewer_shared_build_data_1.build_data.build_date;
            session.settingsEngine.settings.settings_version = '3.1';
            let renderingEngine;
            if (viewportId && this.renderingEngines[viewportId]) {
                renderingEngine = this.renderingEngines[viewportId];
            }
            else {
                for (let r in this.renderingEngines) {
                    if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f").id) ||
                        (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {
                        renderingEngine = this.renderingEngines[r];
                        continue;
                    }
                }
            }
            if (renderingEngine)
                renderingEngine.saveSettings();
            return session.settingsEngine.convertToTargetVersion();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `Session(${sessionId}).saveSettings`, e);
        }
    }
    resetSettings(sessionId, sections) {
        sections = sections || {};
        this.sessionEngines[sessionId].resetSettings(sections);
        const promises = [];
        if (sections.session && sections.session.parameter && sections.session.parameter.value)
            promises.push(this.sessionEngines[sessionId].customize());
        for (let r in this.renderingEngines) {
            if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, "f").id) ||
                (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {
                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.reset();
                promises.push(new Promise(resolve => {
                    __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").renderingEngines[r].settingsAssigned.then(() => {
                        resolve();
                    });
                }));
                this.renderingEngines[r].applySettings(sections.viewport);
            }
        }
        return new Promise(resolve => Promise.all(promises).then(() => resolve()));
    }
    saveSettings(sessionId, viewportId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const session = this.sessionEngines[sessionId];
                yield session.saveUiProperties(false);
                const settingsObject = this.createSettingsObject(sessionId, viewportId);
                const response = yield session.saveSettings(settingsObject);
                if (response) {
                    __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").debug(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `Session(${sessionId}).saveSettings: Saved settings.`);
                }
                else {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${sessionId}).saveSettings: Could not save settings.`);
                    throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `Session(${sessionId}).saveSettings`, error);
                }
                return response;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _CreationControlCenter_logger, "f").handleError(viewer_shared_services_1.LOGGING_TOPIC.SESSION, `Session(${sessionId}).saveSettings`, e);
            }
        });
    }
    // #endregion Public Methods (6)
    // #region Private Methods (1)
    assignSettings(renderingEngine, sessionId) {
        if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[sessionId].initialized.resolved === true) {
            // immediate
            renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;
            renderingEngine.applySettings();
        }
        else {
            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, "f").sessionEngines[sessionId].initialized.then(() => {
                renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;
                renderingEngine.applySettings();
            });
        }
    }
};
_CreationControlCenter_eventEngine = new WeakMap(), _CreationControlCenter_logger = new WeakMap(), _CreationControlCenter_sceneTree = new WeakMap(), _CreationControlCenter_stateEngine = new WeakMap(), _CreationControlCenter_uuidGenerator = new WeakMap(), _CreationControlCenter_firstSessionEngine = new WeakMap();
CreationControlCenter = __decorate([
    (0, tsyringe_1.singleton)()
], CreationControlCenter);
exports.CreationControlCenter = CreationControlCenter;
//# sourceMappingURL=CreationControlCenter.js.map