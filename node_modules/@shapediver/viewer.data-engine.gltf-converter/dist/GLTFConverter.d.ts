import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
export declare enum GLTF_EXTENSIONS {
    KHR_BINARY_GLTF = "KHR_binary_glTF",
    KHR_MATERIALS_PBRSPECULARGLOSSINESS = "KHR_materials_pbrSpecularGlossiness",
    KHR_MATERIALS_UNLIT = "KHR_materials_unlit"
}
export declare class GLTFConverter {
    private readonly _converter;
    private readonly _globalTransformationInverse;
    private readonly _uuidGenerator;
    private _animations;
    private _buffers;
    private _byteOffset;
    private _content;
    private _convertForAR;
    private _extensionsRequired;
    private _extensionsUsed;
    private _imageCache;
    private _nodes;
    private _promises;
    private _viewport?;
    constructor();
    convert(node: ITreeNode, convertForAR?: boolean, viewport?: string): Promise<ArrayBuffer>;
    private convertAccessor;
    private convertAnimations;
    private convertBuffer;
    private convertBufferView;
    private convertBufferViewImage;
    private convertImage;
    private convertMaterial;
    private convertMesh;
    private convertNode;
    private convertPrimitive;
    private convertTexture;
    private getComponentType;
    private getMinMax;
    private getPaddedArrayBuffer;
    private getType;
    private reset;
    private stringToArrayBuffer;
}
//# sourceMappingURL=GLTFConverter.d.ts.map