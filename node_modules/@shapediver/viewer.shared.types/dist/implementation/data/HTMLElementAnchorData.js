"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTMLElementAnchorData_viewerHtmlElement, _HTMLElementAnchorData_data, _HTMLElementAnchorData_format, _HTMLElementAnchorData_hideable, _HTMLElementAnchorData_intersectionTarget, _HTMLElementAnchorData_location, _HTMLElementAnchorData_viewports, _HTMLElementAnchorCustomData_create, _HTMLElementAnchorCustomData_update;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTMLElementAnchorCustomData = exports.HTMLElementAnchorImageData = exports.HTMLElementAnchorTextData = exports.HTMLElementAnchorData = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
class HTMLElementAnchorData extends viewer_shared_node_tree_1.AbstractTreeNodeData {
    // #endregion Properties (9)
    // #region Constructors (1)
    /**
     * Creates a custom data node.
     *
     * @param _data the data as key- value pairs
     * @param id the id
     */
    constructor(properties) {
        super(properties.id);
        _HTMLElementAnchorData_viewerHtmlElement.set(this, {});
        _HTMLElementAnchorData_data.set(this, void 0);
        _HTMLElementAnchorData_format.set(this, void 0);
        _HTMLElementAnchorData_hideable.set(this, true);
        _HTMLElementAnchorData_intersectionTarget.set(this, void 0);
        _HTMLElementAnchorData_location.set(this, void 0);
        _HTMLElementAnchorData_viewports.set(this, []);
        __classPrivateFieldSet(this, _HTMLElementAnchorData_location, properties.location, "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorData_data, properties.data, "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorData_format, properties.format, "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorData_hideable, properties.hideable === undefined ? true : properties.hideable, "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorData_viewports, properties.viewports || [], "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorData_intersectionTarget, properties.intersectionTarget, "f");
        this.internalHtmlElement = document.createElement('div');
        this.internalHtmlElement.style.position = 'absolute';
        this.internalHtmlElement.style.whiteSpace = 'nowrap';
        this.internalHtmlElement.style.textOverflow = 'clip';
        this.internalHtmlElement.style.fontFamily = '"Helvetica Neue", Helvetica, Arial, sans-serif';
    }
    // #endregion Constructors (1)
    // #region Public Accessors (12)
    get data() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_data, "f");
    }
    set data(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_data, value, "f");
    }
    get format() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_format, "f");
    }
    set format(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_format, value, "f");
    }
    get hideable() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_hideable, "f");
    }
    set hideable(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_hideable, value, "f");
    }
    get intersectionTarget() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_intersectionTarget, "f");
    }
    set intersectionTarget(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_intersectionTarget, value, "f");
    }
    get location() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_location, "f");
    }
    set location(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_location, value, "f");
    }
    get viewports() {
        return __classPrivateFieldGet(this, _HTMLElementAnchorData_viewports, "f");
    }
    set viewports(value) {
        __classPrivateFieldSet(this, _HTMLElementAnchorData_viewports, value, "f");
    }
    // #endregion Public Accessors (12)
    // #region Public Methods (3)
    createViewerHtmlElement(viewer) {
        if (__classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer])
            return __classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer];
        if (this.viewports.includes(viewer) || this.viewports.length === 0) {
            __classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer] = this.internalHtmlElement.cloneNode(true);
            this.create({ anchor: this, parent: __classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer] });
            return __classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer];
        }
        return null;
    }
    getViewerHtmlElement(viewer) {
        if (__classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer])
            return __classPrivateFieldGet(this, _HTMLElementAnchorData_viewerHtmlElement, "f")[viewer];
        return null;
    }
    update(properties) {
        properties.htmlElement.style.display = '';
        if ((this.hideable && properties.hidden) || properties.visible === false)
            properties.htmlElement.style.display = 'none';
        let x, y;
        if (this.data.position && this.data.position.horizontal === 'right') {
            x = properties.container[0] - properties.htmlElement.offsetWidth;
        }
        else if (this.data.position && this.data.position.horizontal === 'left') {
            x = properties.container[0];
        }
        else {
            x = properties.container[0] - properties.htmlElement.offsetWidth / 2;
        }
        if (this.data.position && this.data.position.vertical === 'bottom') {
            y = properties.container[1] - properties.htmlElement.offsetHeight;
        }
        else if (this.data.position && this.data.position.vertical === 'top') {
            y = properties.container[1];
        }
        else {
            y = properties.container[1] - properties.htmlElement.offsetHeight / 2;
        }
        x = x / properties.scale[0];
        y = y / properties.scale[1];
        properties.htmlElement.style.left = x + 'px';
        properties.htmlElement.style.top = y + 'px';
    }
}
exports.HTMLElementAnchorData = HTMLElementAnchorData;
_HTMLElementAnchorData_viewerHtmlElement = new WeakMap(), _HTMLElementAnchorData_data = new WeakMap(), _HTMLElementAnchorData_format = new WeakMap(), _HTMLElementAnchorData_hideable = new WeakMap(), _HTMLElementAnchorData_intersectionTarget = new WeakMap(), _HTMLElementAnchorData_location = new WeakMap(), _HTMLElementAnchorData_viewports = new WeakMap();
class HTMLElementAnchorTextData extends HTMLElementAnchorData {
    // #region Constructors (1)
    constructor(properties) {
        super({
            location: properties.location,
            data: properties.data,
            format: 'text',
            hideable: properties.hideable,
            viewports: properties.viewports,
            intersectionTarget: properties.intersectionTarget,
            id: properties.id,
        });
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    clone() {
        return new HTMLElementAnchorTextData({
            location: this.location,
            data: this.data,
            hideable: this.hideable,
            viewports: this.viewports,
            intersectionTarget: this.intersectionTarget,
            id: this.id,
        });
    }
    // #endregion Public Methods (1)
    // #region Private Methods (1)
    create(properties) {
        var _a;
        const span = document.createElement('span');
        span.style.display = 'none';
        span.style.userSelect = 'none';
        span.style.cursor = 'default';
        span.style.pointerEvents = 'none';
        span.style.color = (_a = properties.anchor.data.color) === null || _a === void 0 ? void 0 : _a.toString();
        span.innerHTML = properties.anchor.data.text;
        span.style.display = 'block';
        span.style.textOverflow = 'clip';
        span.style.overflow = 'hidden';
        properties.parent.appendChild(span);
        if (properties.anchor.data.textAlign && (properties.anchor.data.textAlign === 'right' || properties.anchor.data.textAlign === 'center')) {
            span.style.textAlign = properties.anchor.data.textAlign;
        }
        else {
            span.style.textAlign = 'left';
        }
    }
}
exports.HTMLElementAnchorTextData = HTMLElementAnchorTextData;
class HTMLElementAnchorImageData extends HTMLElementAnchorData {
    // #region Constructors (1)
    constructor(properties) {
        super({
            location: properties.location,
            data: properties.data,
            format: 'image',
            hideable: properties.hideable,
            viewports: properties.viewports,
            intersectionTarget: properties.intersectionTarget,
            id: properties.id,
        });
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    clone() {
        return new HTMLElementAnchorImageData({
            location: this.location,
            data: this.data,
            hideable: this.hideable,
            viewports: this.viewports,
            intersectionTarget: this.intersectionTarget,
            id: this.id,
        });
    }
    // #endregion Public Methods (1)
    // #region Private Methods (1)
    create(properties) {
        const img = document.createElement('img');
        img.style.userSelect = 'none';
        img.style.cursor = 'default';
        img.style.pointerEvents = 'none';
        properties.parent.appendChild(img);
        img.src = properties.anchor.data.src;
        if (properties.anchor.data.height)
            img.height = properties.anchor.data.height;
        if (properties.anchor.data.width)
            img.width = properties.anchor.data.width;
        if (properties.anchor.data.alt)
            img.alt = properties.anchor.data.alt;
    }
}
exports.HTMLElementAnchorImageData = HTMLElementAnchorImageData;
class HTMLElementAnchorCustomData extends HTMLElementAnchorData {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(properties) {
        super({
            location: properties.location,
            data: properties.data,
            format: 'custom',
            hideable: properties.hideable,
            viewports: properties.viewports,
            intersectionTarget: properties.intersectionTarget,
            id: properties.id,
        });
        // #region Properties (1)
        _HTMLElementAnchorCustomData_create.set(this, void 0);
        _HTMLElementAnchorCustomData_update.set(this, void 0);
        __classPrivateFieldSet(this, _HTMLElementAnchorCustomData_create, properties.create, "f");
        __classPrivateFieldSet(this, _HTMLElementAnchorCustomData_update, properties.update, "f");
    }
    // #endregion Constructors (1)
    create(properties) {
        __classPrivateFieldGet(this, _HTMLElementAnchorCustomData_create, "f").call(this, properties);
    }
    update(properties) {
        __classPrivateFieldGet(this, _HTMLElementAnchorCustomData_update, "f").call(this, properties);
    }
    // #region Public Methods (1)
    clone() {
        return new HTMLElementAnchorCustomData({
            location: this.location,
            data: this.data,
            hideable: this.hideable,
            viewports: this.viewports,
            intersectionTarget: this.intersectionTarget,
            id: this.id,
            create: __classPrivateFieldGet(this, _HTMLElementAnchorCustomData_create, "f"),
            update: __classPrivateFieldGet(this, _HTMLElementAnchorCustomData_update, "f"),
        });
    }
}
exports.HTMLElementAnchorCustomData = HTMLElementAnchorCustomData;
_HTMLElementAnchorCustomData_create = new WeakMap(), _HTMLElementAnchorCustomData_update = new WeakMap();
//# sourceMappingURL=HTMLElementAnchorData.js.map