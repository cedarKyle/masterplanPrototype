"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MaterialGemData_refractionIndex, _MaterialGemData_impurityMap, _MaterialGemData_impurityScale, _MaterialGemData_colorTransferBegin, _MaterialGemData_colorTransferEnd, _MaterialGemData_center, _MaterialGemData_radius, _MaterialGemData_sphericalNormalMap, _MaterialGemData_gamma, _MaterialGemData_contrast, _MaterialGemData_brightness, _MaterialGemData_dispersion, _MaterialGemData_tracingDepth, _MaterialGemData_tracingOpacity, _MaterialGemData_inverseModelMatrix, _MaterialGemData_inverseTransposeModelMatrix, _MaterialGemData_envMap;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialGemData = void 0;
const AbstractMaterialData_1 = require("./AbstractMaterialData");
const IMaterialAbstractData_1 = require("../../interfaces/data/material/IMaterialAbstractData");
const gl_matrix_1 = require("gl-matrix");
class MaterialGemData extends AbstractMaterialData_1.AbstractMaterialData {
    // #endregion Properties (5)
    // #region Constructors (1)
    /**
     * Creates a material data object.
     *
     * @param _attributes the attributes of the material
     * @param id the id
     */
    constructor(properties, id) {
        super(properties, id);
        // #region Properties (5)
        _MaterialGemData_refractionIndex.set(this, 2.4);
        _MaterialGemData_impurityMap.set(this, void 0);
        _MaterialGemData_impurityScale.set(this, 1.0);
        _MaterialGemData_colorTransferBegin.set(this, '#ffffff');
        _MaterialGemData_colorTransferEnd.set(this, '#ffffff');
        _MaterialGemData_center.set(this, gl_matrix_1.vec3.create());
        _MaterialGemData_radius.set(this, 1);
        _MaterialGemData_sphericalNormalMap.set(this, void 0);
        _MaterialGemData_gamma.set(this, 1);
        _MaterialGemData_contrast.set(this, 1);
        _MaterialGemData_brightness.set(this, 0);
        _MaterialGemData_dispersion.set(this, 0);
        _MaterialGemData_tracingDepth.set(this, 5);
        _MaterialGemData_tracingOpacity.set(this, 0);
        _MaterialGemData_inverseModelMatrix.set(this, gl_matrix_1.mat4.create());
        _MaterialGemData_inverseTransposeModelMatrix.set(this, gl_matrix_1.mat3.create());
        _MaterialGemData_envMap.set(this, void 0);
        if (!properties)
            return;
        if (properties.refractionIndex !== undefined)
            this.refractionIndex = properties.refractionIndex;
        if (properties.impurityMap !== undefined)
            this.impurityMap = properties.impurityMap;
        if (properties.impurityScale !== undefined)
            this.impurityScale = properties.impurityScale;
        if (properties.colorTransferBegin !== undefined)
            this.colorTransferBegin = properties.colorTransferBegin;
        if (properties.colorTransferEnd !== undefined)
            this.colorTransferEnd = properties.colorTransferEnd;
        if (properties.center !== undefined)
            this.center = properties.center;
        if (properties.tracingDepth !== undefined)
            this.tracingDepth = properties.tracingDepth;
        if (properties.radius !== undefined)
            this.radius = properties.radius;
        if (properties.sphericalNormalMap !== undefined)
            this.sphericalNormalMap = properties.sphericalNormalMap;
        if (properties.gamma !== undefined)
            this.gamma = properties.gamma;
        if (properties.contrast !== undefined)
            this.contrast = properties.contrast;
        if (properties.brightness !== undefined)
            this.brightness = properties.brightness;
        if (properties.dispersion !== undefined)
            this.dispersion = properties.dispersion;
        if (properties.tracingOpacity !== undefined)
            this.tracingOpacity = properties.tracingOpacity;
        if (properties.inverseModelMatrix !== undefined)
            this.inverseModelMatrix = properties.inverseModelMatrix;
        if (properties.inverseTransposeModelMatrix !== undefined)
            this.inverseTransposeModelMatrix = properties.inverseTransposeModelMatrix;
        if (properties.envMap !== undefined)
            this.envMap = properties.envMap;
    }
    // #endregion Constructors (1)
    // #region Public Accessors (10)
    get refractionIndex() {
        return __classPrivateFieldGet(this, _MaterialGemData_refractionIndex, "f");
    }
    set refractionIndex(value) {
        __classPrivateFieldSet(this, _MaterialGemData_refractionIndex, value, "f");
    }
    get impurityMap() {
        return __classPrivateFieldGet(this, _MaterialGemData_impurityMap, "f");
    }
    set impurityMap(value) {
        __classPrivateFieldSet(this, _MaterialGemData_impurityMap, value, "f");
    }
    get impurityScale() {
        return __classPrivateFieldGet(this, _MaterialGemData_impurityScale, "f");
    }
    set impurityScale(value) {
        __classPrivateFieldSet(this, _MaterialGemData_impurityScale, value, "f");
    }
    get colorTransferBegin() {
        return __classPrivateFieldGet(this, _MaterialGemData_colorTransferBegin, "f");
    }
    set colorTransferBegin(value) {
        __classPrivateFieldSet(this, _MaterialGemData_colorTransferBegin, value, "f");
    }
    get colorTransferEnd() {
        return __classPrivateFieldGet(this, _MaterialGemData_colorTransferEnd, "f");
    }
    set colorTransferEnd(value) {
        __classPrivateFieldSet(this, _MaterialGemData_colorTransferEnd, value, "f");
    }
    get center() {
        return __classPrivateFieldGet(this, _MaterialGemData_center, "f");
    }
    set center(value) {
        __classPrivateFieldSet(this, _MaterialGemData_center, value, "f");
    }
    get tracingDepth() {
        return __classPrivateFieldGet(this, _MaterialGemData_tracingDepth, "f");
    }
    set tracingDepth(value) {
        __classPrivateFieldSet(this, _MaterialGemData_tracingDepth, value, "f");
    }
    get radius() {
        return __classPrivateFieldGet(this, _MaterialGemData_radius, "f");
    }
    set radius(value) {
        __classPrivateFieldSet(this, _MaterialGemData_radius, value, "f");
    }
    get sphericalNormalMap() {
        return __classPrivateFieldGet(this, _MaterialGemData_sphericalNormalMap, "f");
    }
    set sphericalNormalMap(value) {
        __classPrivateFieldSet(this, _MaterialGemData_sphericalNormalMap, value, "f");
    }
    get gamma() {
        return __classPrivateFieldGet(this, _MaterialGemData_gamma, "f");
    }
    set gamma(value) {
        __classPrivateFieldSet(this, _MaterialGemData_gamma, value, "f");
    }
    get contrast() {
        return __classPrivateFieldGet(this, _MaterialGemData_contrast, "f");
    }
    set contrast(value) {
        __classPrivateFieldSet(this, _MaterialGemData_contrast, value, "f");
    }
    get brightness() {
        return __classPrivateFieldGet(this, _MaterialGemData_brightness, "f");
    }
    set brightness(value) {
        __classPrivateFieldSet(this, _MaterialGemData_brightness, value, "f");
    }
    get dispersion() {
        return __classPrivateFieldGet(this, _MaterialGemData_dispersion, "f");
    }
    set dispersion(value) {
        __classPrivateFieldSet(this, _MaterialGemData_dispersion, value, "f");
    }
    get tracingOpacity() {
        return __classPrivateFieldGet(this, _MaterialGemData_tracingOpacity, "f");
    }
    set tracingOpacity(value) {
        __classPrivateFieldSet(this, _MaterialGemData_tracingOpacity, value, "f");
    }
    get inverseModelMatrix() {
        return __classPrivateFieldGet(this, _MaterialGemData_inverseModelMatrix, "f");
    }
    set inverseModelMatrix(value) {
        __classPrivateFieldSet(this, _MaterialGemData_inverseModelMatrix, value, "f");
    }
    get inverseTransposeModelMatrix() {
        return __classPrivateFieldGet(this, _MaterialGemData_inverseTransposeModelMatrix, "f");
    }
    set inverseTransposeModelMatrix(value) {
        __classPrivateFieldSet(this, _MaterialGemData_inverseTransposeModelMatrix, value, "f");
    }
    get envMap() {
        return __classPrivateFieldGet(this, _MaterialGemData_envMap, "f");
    }
    set envMap(value) {
        __classPrivateFieldSet(this, _MaterialGemData_envMap, value, "f");
    }
    // #endregion Public Accessors (10)
    // #region Public Methods (3)
    clone() {
        return new MaterialGemData({
            alphaMap: this.alphaMap,
            alphaCutoff: this.alphaCutoff,
            alphaMode: this.alphaMode,
            aoMap: this.aoMap,
            aoMapIntensity: this.aoMapIntensity,
            bumpMap: this.bumpMap,
            bumpScale: this.bumpScale,
            color: this.color,
            emissiveMap: this.emissiveMap,
            emissiveness: this.emissiveness,
            shading: this.shading,
            map: this.map,
            name: this.name,
            normalMap: this.normalMap,
            normalScale: this.normalScale,
            opacity: this.opacity,
            side: this.side,
            refractionIndex: this.refractionIndex,
            impurityMap: this.impurityMap,
            impurityScale: this.impurityScale,
            colorTransferBegin: this.colorTransferBegin,
            colorTransferEnd: this.colorTransferEnd,
            center: this.center,
            tracingDepth: this.tracingDepth,
            radius: this.radius,
            sphericalNormalMap: this.sphericalNormalMap,
            gamma: this.gamma,
            contrast: this.contrast,
            brightness: this.brightness,
            dispersion: this.dispersion,
            tracingOpacity: this.tracingOpacity,
            inverseModelMatrix: this.inverseModelMatrix,
            inverseTransposeModelMatrix: this.inverseTransposeModelMatrix,
            envMap: this.envMap,
        }, this.id);
    }
    copy(source) {
        this.alphaCutoff = source.alphaCutoff;
        this.alphaMap = source.alphaMap;
        this.alphaMode = source.alphaMode;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.color = source.color;
        this.emissiveMap = source.emissiveMap;
        this.emissiveness = source.emissiveness;
        this.materialOutput = source.materialOutput;
        this.map = source.map;
        this.normalMap = source.normalMap;
        this.normalScale = source.normalScale;
        this.opacity = source.opacity;
        this.shading = source.shading;
        this.side = source.side;
        this.refractionIndex = this.refractionIndex;
        this.impurityMap = this.impurityMap;
        this.impurityScale = this.impurityScale;
        this.colorTransferBegin = this.colorTransferBegin;
        this.colorTransferEnd = this.colorTransferEnd;
        this.center = this.center;
        this.tracingDepth = this.tracingDepth;
        this.radius = this.radius;
        this.sphericalNormalMap = this.sphericalNormalMap;
        this.gamma = this.gamma;
        this.contrast = this.contrast;
        this.brightness = this.brightness;
        this.dispersion = this.dispersion;
        this.tracingOpacity = this.tracingOpacity;
        this.inverseModelMatrix = this.inverseModelMatrix;
        this.inverseTransposeModelMatrix = this.inverseTransposeModelMatrix;
        this.envMap = source.envMap;
    }
    reset() {
        this.alphaCutoff = 0;
        this.alphaMap = undefined;
        this.alphaMode = IMaterialAbstractData_1.MATERIAL_ALPHA.OPAQUE;
        this.aoMap = undefined;
        this.aoMapIntensity = 1.0;
        this.bumpMap = undefined;
        this.bumpScale = 1.0;
        this.color = '#ffffff';
        this.emissiveMap = undefined;
        this.emissiveness = '#000000';
        this.materialOutput = false;
        this.map = undefined;
        this.normalMap = undefined;
        this.normalScale = 1.0;
        this.opacity = 1.0;
        this.shading = IMaterialAbstractData_1.MATERIAL_SHADING.SMOOTH;
        this.side = IMaterialAbstractData_1.MATERIAL_SIDE.DOUBLE;
        this.refractionIndex = 2.4;
        this.impurityMap = undefined;
        this.impurityScale = 1.0;
        this.colorTransferBegin = '#ffffff';
        this.colorTransferEnd = '#ffffff';
        this.center = gl_matrix_1.vec3.create();
        this.radius = 1;
        this.sphericalNormalMap = undefined;
        this.gamma = 1;
        this.contrast = 1;
        this.brightness = 0;
        this.dispersion = 0;
        this.tracingDepth = 5;
        this.tracingOpacity = 0;
        this.inverseModelMatrix = gl_matrix_1.mat4.create();
        this.inverseTransposeModelMatrix = gl_matrix_1.mat3.create();
        this.envMap = undefined;
    }
}
exports.MaterialGemData = MaterialGemData;
_MaterialGemData_refractionIndex = new WeakMap(), _MaterialGemData_impurityMap = new WeakMap(), _MaterialGemData_impurityScale = new WeakMap(), _MaterialGemData_colorTransferBegin = new WeakMap(), _MaterialGemData_colorTransferEnd = new WeakMap(), _MaterialGemData_center = new WeakMap(), _MaterialGemData_radius = new WeakMap(), _MaterialGemData_sphericalNormalMap = new WeakMap(), _MaterialGemData_gamma = new WeakMap(), _MaterialGemData_contrast = new WeakMap(), _MaterialGemData_brightness = new WeakMap(), _MaterialGemData_dispersion = new WeakMap(), _MaterialGemData_tracingDepth = new WeakMap(), _MaterialGemData_tracingOpacity = new WeakMap(), _MaterialGemData_inverseModelMatrix = new WeakMap(), _MaterialGemData_inverseTransposeModelMatrix = new WeakMap(), _MaterialGemData_envMap = new WeakMap();
//# sourceMappingURL=MaterialGemData.js.map