import { AbstractTreeNodeData } from '@shapediver/viewer.shared.node-tree';
import { IMapData } from '../../interfaces/data/material/IMapData';
import { IMaterialAbstractData, IMaterialAbstractDataProperties, MATERIAL_ALPHA, MATERIAL_SHADING, MATERIAL_SIDE } from '../../interfaces/data/material/IMaterialAbstractData';
export declare abstract class AbstractMaterialData extends AbstractTreeNodeData implements IMaterialAbstractData {
    #private;
    /**
     * Creates a material data object.
     *
     * @param _attributes the attributes of the material
     * @param id the id
     */
    constructor(properties?: IMaterialAbstractDataProperties, id?: string);
    get alphaCutoff(): number;
    set alphaCutoff(value: number);
    get alphaMap(): IMapData | undefined;
    set alphaMap(value: IMapData | undefined);
    get alphaMode(): MATERIAL_ALPHA;
    set alphaMode(value: MATERIAL_ALPHA);
    get aoMap(): IMapData | undefined;
    set aoMap(value: IMapData | undefined);
    get aoMapIntensity(): number;
    set aoMapIntensity(value: number);
    get bumpMap(): IMapData | undefined;
    set bumpMap(value: IMapData | undefined);
    get bumpScale(): number;
    set bumpScale(value: number);
    get color(): string;
    set color(value: string);
    get emissiveMap(): IMapData | undefined;
    set emissiveMap(value: IMapData | undefined);
    get emissiveness(): string;
    set emissiveness(value: string);
    get map(): IMapData | undefined;
    set map(value: IMapData | undefined);
    get materialOutput(): boolean;
    set materialOutput(value: boolean);
    get name(): string | undefined;
    set name(value: string | undefined);
    get normalMap(): IMapData | undefined;
    set normalMap(value: IMapData | undefined);
    get normalScale(): number;
    set normalScale(value: number);
    get opacity(): number;
    set opacity(value: number);
    get shading(): MATERIAL_SHADING;
    set shading(value: MATERIAL_SHADING);
    get side(): MATERIAL_SIDE;
    set side(value: MATERIAL_SIDE);
    get threeJsObject(): {
        [key: string]: THREE.Material;
    };
    /**
     * Reset the material data.
     */
    abstract reset(): void;
    /**
     * Clones the scene graph data.
     */
    abstract clone(): IMaterialAbstractData;
    /**
     * Copy all properties of another material data object.
     *
     * @param source
     */
    abstract copy(source: IMaterialAbstractData): void;
}
//# sourceMappingURL=AbstractMaterialData.d.ts.map