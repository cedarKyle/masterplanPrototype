import { IInteractionEngine } from "../interfaces/IInteractionEngine";
import { IInteractionManager } from "../interfaces/IInteractionManager";
import { IViewportApi } from "@shapediver/viewer";
export declare class InteractionEngine implements IInteractionEngine {
    #private;
    constructor(viewport: IViewportApi);
    get intersectionOpacity(): number;
    set intersectionOpacity(value: number);
    get managers(): {
        [key: string]: IInteractionManager;
    };
    close(): void;
    addInteractionManager(manager: IInteractionManager): string;
    onKeyDown(event: KeyboardEvent): void;
    onMouseDown(event: MouseEvent): void;
    onMouseEnd(event: MouseEvent): void;
    onMouseMove(event: MouseEvent): void;
    onMouseOut(event: WheelEvent): void;
    onMouseUp(event: WheelEvent): void;
    onMouseWheel(event: WheelEvent): void;
    onTouchCancel(event: TouchEvent): void;
    onTouchEnd(event: TouchEvent): void;
    onTouchMove(event: TouchEvent): void;
    onTouchStart(event: TouchEvent): void;
    onTouchUp(event: TouchEvent): void;
    removeInteractionManager(token: string): boolean;
    /**
     * Apply all filters for the intersection of the scene.
     * Call all according interaction managers with the results.
     *
     * @param ray
     */
    private onDown;
    /**
     * Apply all filters for the intersection of the scene.
     * Call all according interaction managers with the results.
     *
     * @param ray
     */
    private onEnd;
    /**
     * Apply all filters for the intersection of the scene.
     * Call all according interaction managers with the results.
     *
     * @param ray
     */
    private onMove;
}
//# sourceMappingURL=InteractionEngine.d.ts.map