import { IDragConstraint } from "../../interfaces/utils/IDragConstraint";
import { IRay, IIntersection } from "@shapediver/viewer.rendering-engine.intersection-engine";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { mat4, vec3 } from "gl-matrix";
import { IViewportApi } from "@shapediver/viewer";
/**
 * The plane constraint is used for dragging and allows to specify a plane on which an object can be dragged.
 * The transformation and optional rotation of this constraint get applied to the node if it is the constraint with the closest distance to the ray that was used for the drag event.
 * As this is a difficult topic, please visit our [help desk section on interactions](https://help.shapediver.com/doc/interactions-part-1) where we go through the process of setting everything up with examples.
 */
export declare class PlaneConstraint implements IDragConstraint {
    #private;
    /**
     * @param _normal the normal vector of the plane
     * @param _coplanarPoint a coplanar point on the plane
     * @param _rotation the rotation in [axis-angle representation](https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation) that is applied to the node if the drag contraint becomes active
     */
    constructor(_normal: vec3, _coplanarPoint?: vec3, _rotation?: {
        axis: vec3;
        angle: number;
    });
    intersect(viewport: IViewportApi, node: ITreeNode, ray: IRay): {
        distance: number;
        transformation: mat4;
    } | undefined;
    setup(viewport: IViewportApi, node: ITreeNode, ray: IRay, intersection: IIntersection, previousDragMatrix: mat4): {
        distance: number;
        transformation: mat4;
    } | undefined;
}
//# sourceMappingURL=PlaneConstraint.d.ts.map