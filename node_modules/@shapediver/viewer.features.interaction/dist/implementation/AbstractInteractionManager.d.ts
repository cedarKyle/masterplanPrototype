import { IIntersection, IRay } from '@shapediver/viewer.rendering-engine.intersection-engine';
import { IViewportApi, IMaterialAbstractData } from '@shapediver/viewer';
import { IInteractionFilterOptions, IInteractionManager } from '../interfaces/IInteractionManager';
import { IDragConstraintUtils } from '../interfaces/utils/IDragConstraintUtils';
import { IInteractionEffectUtils } from '../interfaces/utils/IInteractionEffectUtils';
import { INTERACTION_STATE } from '../interfaces/IInteractionEngine';
export declare abstract class AbstractInteractionManager implements IInteractionManager {
    #private;
    abstract filter: IInteractionFilterOptions;
    get dragConstraintUtils(): IDragConstraintUtils;
    set dragConstraintUtils(value: IDragConstraintUtils);
    get effectMaterial(): IMaterialAbstractData | undefined;
    set effectMaterial(value: IMaterialAbstractData | undefined);
    get interactionEffectUtils(): IInteractionEffectUtils;
    set interactionEffectUtils(value: IInteractionEffectUtils);
    get viewport(): IViewportApi | undefined;
    set viewport(value: IViewportApi | undefined);
    abstract add(viewport: IViewportApi): void;
    abstract remove(): void;
    abstract onDown(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
    abstract onEnd(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[], endState: INTERACTION_STATE): void;
    abstract onMove(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
}
//# sourceMappingURL=AbstractInteractionManager.d.ts.map