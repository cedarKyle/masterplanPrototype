"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragConstraintUtils = void 0;
const tsyringe_1 = require("tsyringe");
const gl_matrix_1 = require("gl-matrix");
let DragConstraintUtils = class DragConstraintUtils {
    // #region Public Methods (2)
    /**
     * Intersect the drag constraints with the provided ray.
     * Returns a transformation matrix with the closest drag constraint.
     *
     * @param dragConstraints
     * @param viewport
     * @param node
     * @param ray
     * @returns
     */
    intersect(dragConstraints, viewport, node, ray) {
        const dragConstraintResults = [];
        for (let d in dragConstraints) {
            const res = dragConstraints[d].intersect(viewport, node, ray);
            if (res)
                dragConstraintResults.push(Object.assign({ dragConstraint: dragConstraints[d] }, res));
        }
        if (dragConstraintResults.length > 0) {
            dragConstraintResults.sort((a, b) => a.distance - b.distance);
            return { dragConstraint: dragConstraintResults[0].dragConstraint, matrix: dragConstraintResults[0].transformation };
        }
        else {
            return { matrix: gl_matrix_1.mat4.create() };
        }
    }
    /**
     * Setup the drag constraints. This function is called whenever a drag event starts.
     * Returns a transformation matrix with the closest drag constraint.
     *
     * @param dragConstraints
     * @param viewport
     * @param node
     * @param ray
     * @param intersection
     * @returns
     */
    setup(dragConstraints, viewport, node, ray, intersection, previousDragMatrix) {
        const dragConstraintResults = [];
        for (let d in dragConstraints) {
            const res = dragConstraints[d].setup(viewport, node, ray, intersection, previousDragMatrix);
            if (res)
                dragConstraintResults.push(Object.assign({ dragConstraint: dragConstraints[d] }, res));
        }
        if (dragConstraintResults.length > 0) {
            dragConstraintResults.sort((a, b) => a.distance - b.distance);
            return { dragConstraint: dragConstraintResults[0].dragConstraint, matrix: dragConstraintResults[0].transformation };
        }
        else {
            return { matrix: gl_matrix_1.mat4.create() };
        }
    }
};
DragConstraintUtils = __decorate([
    (0, tsyringe_1.singleton)()
], DragConstraintUtils);
exports.DragConstraintUtils = DragConstraintUtils;
//# sourceMappingURL=DragConstraintUtils.js.map