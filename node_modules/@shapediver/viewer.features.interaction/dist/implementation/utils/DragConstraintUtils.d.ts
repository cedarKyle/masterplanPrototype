import { IRay, IIntersection } from "@shapediver/viewer.rendering-engine.intersection-engine";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { mat4 } from "gl-matrix";
import { IViewportApi } from "@shapediver/viewer";
import { IDragConstraint } from "../../interfaces/utils/IDragConstraint";
import { IDragConstraintUtils } from "../../interfaces/utils/IDragConstraintUtils";
export declare class DragConstraintUtils implements IDragConstraintUtils {
    /**
     * Intersect the drag constraints with the provided ray.
     * Returns a transformation matrix with the closest drag constraint.
     *
     * @param dragConstraints
     * @param viewport
     * @param node
     * @param ray
     * @returns
     */
    intersect(dragConstraints: {
        [key: string]: IDragConstraint;
    }, viewport: IViewportApi, node: ITreeNode, ray: IRay): {
        dragConstraint?: IDragConstraint;
        matrix: mat4;
    };
    /**
     * Setup the drag constraints. This function is called whenever a drag event starts.
     * Returns a transformation matrix with the closest drag constraint.
     *
     * @param dragConstraints
     * @param viewport
     * @param node
     * @param ray
     * @param intersection
     * @returns
     */
    setup(dragConstraints: {
        [key: string]: IDragConstraint;
    }, viewport: IViewportApi, node: ITreeNode, ray: IRay, intersection: IIntersection, previousDragMatrix: mat4): {
        dragConstraint?: IDragConstraint;
        matrix: mat4;
    };
}
//# sourceMappingURL=DragConstraintUtils.d.ts.map