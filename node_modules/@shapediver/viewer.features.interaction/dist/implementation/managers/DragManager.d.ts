import { IIntersection, IRay } from '@shapediver/viewer.rendering-engine.intersection-engine';
import { ITreeNode } from '@shapediver/viewer.shared.node-tree';
import { vec3 } from 'gl-matrix';
import { IViewportApi } from '@shapediver/viewer';
import { IDragConstraint } from '../../interfaces/utils/IDragConstraint';
import { INTERACTION_STATE } from '../../interfaces/IInteractionEngine';
import { IInteractionFilterOptions } from '../../interfaces/IInteractionManager';
import { AbstractInteractionManager } from '../AbstractInteractionManager';
export declare class DragManager extends AbstractInteractionManager {
    #private;
    get filter(): IInteractionFilterOptions;
    add(viewport: IViewportApi): void;
    remove(): void;
    /**
     * Add a new drag constraint.
     * Returns a token that is used for removing the drag constraint via {@link removeDragConstraint}.
     *
     * @param constraint
     * @returns
     */
    addDragConstraint(constraint: IDragConstraint): string;
    onDown(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
    onEnd(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[], endState: INTERACTION_STATE): void;
    onMove(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
    /**
     * Remove the drag constraint that was added via {@link removeDragConstraint}.
     *
     * @param token
     * @returns
     */
    removeDragConstraint(token: string): boolean;
    /**
     * Remove the node as the currently used drag node.
     *
     * @returns
     */
    removeNode(event?: MouseEvent | TouchEvent): void;
    /**
     * Set the current dragged node.
     * This will serve as the start of the drag event.
     * This function is also called internally at onDown events.
     *
     * @param node
     * @param distance
     * @param intersectionPoint
     * @param ray
     */
    setNode(node: ITreeNode, distance?: number, intersectionPoint?: vec3, event?: MouseEvent | TouchEvent, ray?: IRay): void;
    /**
     * Utility function to make the node the current active node.
     * Set the according values, apply the effect and emit the event.
     *
     * @param intersection
     */
    private activateNode;
    /**
     * Utility function to apply the transformation to the current node.
     *
     * @param node
     * @param matrix
     */
    private applyTransformation;
    /**
     * Utility function to make the node inactive.
     * Set the according values, remove the effect and emit the event.
     *
     * @param intersection
     */
    private deactivateNode;
    private removeTransformation;
}
//# sourceMappingURL=DragManager.d.ts.map