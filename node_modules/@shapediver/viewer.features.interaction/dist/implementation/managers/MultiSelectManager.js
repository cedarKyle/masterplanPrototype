"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MultiSelectManager_eventEngine, _MultiSelectManager_effectMaterialTokens, _MultiSelectManager_filter, _MultiSelectManager_nodes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectManager = void 0;
const IInteractionEngine_1 = require("../../interfaces/IInteractionEngine");
const AbstractInteractionManager_1 = require("../AbstractInteractionManager");
const InteractionData_1 = require("../InteractionData");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
class MultiSelectManager extends AbstractInteractionManager_1.AbstractInteractionManager {
    constructor() {
        // #region Properties (6)
        super(...arguments);
        _MultiSelectManager_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _MultiSelectManager_effectMaterialTokens.set(this, []);
        _MultiSelectManager_filter.set(this, (interactionState) => {
            if (interactionState === IInteractionEngine_1.INTERACTION_STATE.DOWN) {
                return (node) => {
                    for (let i = 0; i < node.data.length; i++) {
                        if (node.data[i] instanceof InteractionData_1.InteractionData) {
                            if (node.data[i].interactionTypes.select)
                                return true;
                        }
                    }
                    return false;
                };
            }
            return (node) => false;
        });
        _MultiSelectManager_nodes.set(this, []);
        // #endregion Private Methods (2)
    }
    // #endregion Properties (6)
    // #region Public Accessors (3)
    get filter() {
        return __classPrivateFieldGet(this, _MultiSelectManager_filter, "f");
    }
    // #endregion Public Accessors (3)
    // #region Public Methods (3)
    add(viewport) {
        this.viewport = viewport;
    }
    remove() {
        for (let i = 0; i < __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").length; i++)
            this.deactivateNode(__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f")[i]);
        this.viewport = undefined;
    }
    /**
     * Select a node.
     * The point and distance of the intersection can be freely chosen and are provided in the event callbacks.
     *
     * @param intersection
     */
    select(intersection) {
        if (__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").includes(intersection.node))
            this.deactivateNode(intersection.node);
        this.activateNode(intersection);
    }
    /**
     * Deselect a specific node.
     *
     * @param node
     */
    deselect(node) {
        if (__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").includes(node))
            this.deactivateNode(node);
    }
    /**
     * Deselect all nodes.
     */
    deselectAll() {
        for (let i = 0; i < __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").length; i++)
            this.deactivateNode(__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f")[i]);
    }
    onDown(event, ray, intersection) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        const intersections = intersection.filter(i => this.filter(IInteractionEngine_1.INTERACTION_STATE.DOWN)(i.node));
        if (__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").length > 0) {
            if (intersections.length > 0 && !__classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").includes(intersections[0].node)) {
                // case other node was clicked, deselect then select
                this.activateNode(intersections[0], event, ray);
            }
            else if (intersections.length > 0 && __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").includes(intersections[0].node)) {
                // case same node was clicked, only deselect
                this.deactivateNode(intersections[0].node, event);
            }
        }
        else if (intersections.length > 0) {
            // easy case, no node select, just select this one
            this.activateNode(intersections[0], event, ray);
        }
    }
    onEnd(event, ray, intersection, endState) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
    }
    onMove(event, ray, intersection) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
    }
    // #endregion Public Methods (3)
    // #region Private Methods (2)
    /**
     * Utility function to make the node the current active node.
     * Set the according values, apply the effect and emit the event.
     *
     * @param intersection
     * @param event
     * @param ray
     */
    activateNode(intersection, event, ray) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").push(intersection.node);
        const data = intersection.node.data.find(d => d instanceof InteractionData_1.InteractionData);
        if (data)
            data.interactionStates.select = true;
        if (this.effectMaterial) {
            __classPrivateFieldGet(this, _MultiSelectManager_effectMaterialTokens, "f").push(this.interactionEffectUtils.applyEffectMaterial(intersection.node, this.effectMaterial));
        }
        else {
            __classPrivateFieldGet(this, _MultiSelectManager_effectMaterialTokens, "f").push(undefined);
        }
        this.viewport.updateNode(intersection.node);
        this.viewport.render();
        __classPrivateFieldGet(this, _MultiSelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_ON, {
            viewportId: this.viewport.id,
            nodes: __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f"),
            node: intersection.node,
            intersectionPoint: intersection.point,
            ray,
            event,
            manager: this
        });
    }
    /**
     * Utility function to make the node inactive.
     * Set the according values, remove the effect and emit the event.
     *
     * @param event
     */
    deactivateNode(node, event) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        const index = __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").indexOf(node);
        if (index === -1)
            return;
        const effectMaterialToken = __classPrivateFieldGet(this, _MultiSelectManager_effectMaterialTokens, "f")[index];
        __classPrivateFieldGet(this, _MultiSelectManager_effectMaterialTokens, "f").splice(index, 1);
        if (effectMaterialToken)
            this.interactionEffectUtils.removeEffectMaterial(node, effectMaterialToken);
        this.viewport.updateNode(node);
        this.viewport.render();
        const data = node.data.find(d => d instanceof InteractionData_1.InteractionData);
        if (data)
            data.interactionStates.select = false;
        __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f").splice(index, 1);
        __classPrivateFieldGet(this, _MultiSelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_OFF, {
            viewportId: this.viewport.id,
            nodes: __classPrivateFieldGet(this, _MultiSelectManager_nodes, "f"),
            node: node,
            event,
            manager: this
        });
    }
}
exports.MultiSelectManager = MultiSelectManager;
_MultiSelectManager_eventEngine = new WeakMap(), _MultiSelectManager_effectMaterialTokens = new WeakMap(), _MultiSelectManager_filter = new WeakMap(), _MultiSelectManager_nodes = new WeakMap();
//# sourceMappingURL=MultiSelectManager.js.map