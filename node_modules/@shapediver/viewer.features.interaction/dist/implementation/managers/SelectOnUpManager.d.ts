import { IRay, IIntersection } from "@shapediver/viewer.rendering-engine.intersection-engine";
import { INTERACTION_STATE } from "../../interfaces/IInteractionEngine";
import { IInteractionFilterOptions } from "../../interfaces/IInteractionManager";
import { AbstractInteractionManager } from "../AbstractInteractionManager";
import { IViewportApi } from "@shapediver/viewer";
export declare class SelectOnUpManager extends AbstractInteractionManager {
    #private;
    /**
     * Deselect the selected node when clicking on an empty space in the Viewport.
     */
    get deselectOnEmpty(): boolean;
    /**
     * Deselect the selected node when clicking on an empty space in the Viewport.
     */
    set deselectOnEmpty(value: boolean);
    get filter(): IInteractionFilterOptions;
    add(viewport: IViewportApi): void;
    remove(): void;
    /**
     * Select a node.
     * The point and distance of the intersection can be freely chosen and are provided in the event callbacks.
     *
     * @param intersection
     */
    select(intersection: IIntersection): void;
    /**
     * Deselect the current node.
     */
    deselect(): void;
    onDown(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
    onEnd(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[], endState: INTERACTION_STATE): void;
    onMove(event: MouseEvent | TouchEvent, ray: IRay, intersection: IIntersection[]): void;
    /**
     * Utility function to make the node the current active node.
     * Set the according values, apply the effect and emit the event.
     *
     * @param intersection
     * @param event
     * @param ray
     */
    private activateNode;
    /**
     * Utility function to make the node inactive.
     * Set the according values, remove the effect and emit the event.
     *
     * @param event
     */
    private deactivateNode;
}
//# sourceMappingURL=SelectOnUpManager.d.ts.map