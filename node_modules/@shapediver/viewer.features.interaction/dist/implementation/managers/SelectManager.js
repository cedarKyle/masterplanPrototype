"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _SelectManager_eventEngine, _SelectManager_deselectOnEmpty, _SelectManager_effectMaterialToken, _SelectManager_filter, _SelectManager_intersection, _SelectManager_node;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectManager = void 0;
const IInteractionEngine_1 = require("../../interfaces/IInteractionEngine");
const AbstractInteractionManager_1 = require("../AbstractInteractionManager");
const InteractionData_1 = require("../InteractionData");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
class SelectManager extends AbstractInteractionManager_1.AbstractInteractionManager {
    constructor() {
        // #region Properties (6)
        super(...arguments);
        _SelectManager_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _SelectManager_deselectOnEmpty.set(this, true);
        _SelectManager_effectMaterialToken.set(this, void 0);
        _SelectManager_filter.set(this, (interactionState) => {
            if (interactionState === IInteractionEngine_1.INTERACTION_STATE.DOWN) {
                return (node) => {
                    for (let i = 0; i < node.data.length; i++) {
                        if (node.data[i] instanceof InteractionData_1.InteractionData) {
                            if (node.data[i].interactionTypes.select)
                                return true;
                        }
                    }
                    return false;
                };
            }
            return (node) => false;
        });
        _SelectManager_intersection.set(this, null);
        _SelectManager_node.set(this, null);
        // #endregion Private Methods (2)
    }
    // #endregion Properties (6)
    // #region Public Accessors (3)
    /**
     * Deselect the selected node when clicking on an empty space in the Viewport.
     */
    get deselectOnEmpty() {
        return __classPrivateFieldGet(this, _SelectManager_deselectOnEmpty, "f");
    }
    /**
     * Deselect the selected node when clicking on an empty space in the Viewport.
     */
    set deselectOnEmpty(value) {
        __classPrivateFieldSet(this, _SelectManager_deselectOnEmpty, value, "f");
    }
    get filter() {
        return __classPrivateFieldGet(this, _SelectManager_filter, "f");
    }
    // #endregion Public Accessors (3)
    // #region Public Methods (3)
    add(viewport) {
        this.viewport = viewport;
    }
    remove() {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode();
        this.viewport = undefined;
    }
    /**
     * Select a node.
     * The point and distance of the intersection can be freely chosen and are provided in the event callbacks.
     *
     * @param intersection
     */
    select(intersection) {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode();
        this.activateNode(intersection);
    }
    /**
     * Deselect the current node.
     */
    deselect() {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode();
    }
    onDown(event, ray, intersection) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        const intersections = intersection.filter(i => this.filter(IInteractionEngine_1.INTERACTION_STATE.DOWN)(i.node));
        if (__classPrivateFieldGet(this, _SelectManager_node, "f")) {
            if (intersections.length > 0 && intersection[0].node !== __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                // case other node was clicked, deselect then select
                this.deactivateNode(event);
                this.activateNode(intersections[0], event, ray);
            }
            else if (intersections.length > 0 && intersection[0].node === __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                // case same node was clicked, only deselect
                this.deactivateNode(event);
            }
            else if (intersections.length === 0 && __classPrivateFieldGet(this, _SelectManager_deselectOnEmpty, "f")) {
                // case no node was clicked, only deselect when option is on
                this.deactivateNode(event);
            }
        }
        else if (intersections.length > 0) {
            // easy case, no node select, just select this one
            this.activateNode(intersections[0], event, ray);
        }
    }
    onEnd(event, ray, intersection, endState) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
    }
    onMove(event, ray, intersection) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
    }
    // #endregion Public Methods (3)
    // #region Private Methods (2)
    /**
     * Utility function to make the node the current active node.
     * Set the according values, apply the effect and emit the event.
     *
     * @param intersection
     * @param event
     * @param ray
     */
    activateNode(intersection, event, ray) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        __classPrivateFieldSet(this, _SelectManager_intersection, intersection, "f");
        __classPrivateFieldSet(this, _SelectManager_node, __classPrivateFieldGet(this, _SelectManager_intersection, "f").node, "f");
        const data = __classPrivateFieldGet(this, _SelectManager_node, "f").data.find((d) => d instanceof InteractionData_1.InteractionData);
        if (data)
            data.interactionStates.select = true;
        if (this.effectMaterial) {
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, this.interactionEffectUtils.applyEffectMaterial(__classPrivateFieldGet(this, _SelectManager_node, "f"), this.effectMaterial), "f");
        }
        else {
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, undefined, "f");
        }
        this.viewport.updateNode(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        this.viewport.render();
        __classPrivateFieldGet(this, _SelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_ON, {
            viewportId: this.viewport.id,
            node: __classPrivateFieldGet(this, _SelectManager_node, "f"),
            intersectionPoint: __classPrivateFieldGet(this, _SelectManager_intersection, "f").point,
            ray,
            event,
            manager: this
        });
    }
    /**
     * Utility function to make the node inactive.
     * Set the according values, remove the effect and emit the event.
     *
     * @param event
     */
    deactivateNode(event) {
        if (!this.viewport)
            throw new viewer_shared_services_1.ShapeDiverViewerInteractionError('The interaction manager does not belong to an interaction engine. Please add it to one first.');
        if (__classPrivateFieldGet(this, _SelectManager_effectMaterialToken, "f")) {
            this.interactionEffectUtils.removeEffectMaterial(__classPrivateFieldGet(this, _SelectManager_node, "f"), __classPrivateFieldGet(this, _SelectManager_effectMaterialToken, "f"));
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, undefined, "f");
        }
        this.viewport.updateNode(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        this.viewport.render();
        const data = __classPrivateFieldGet(this, _SelectManager_node, "f").data.find((d) => d instanceof InteractionData_1.InteractionData);
        if (data)
            data.interactionStates.select = false;
        const node = __classPrivateFieldGet(this, _SelectManager_node, "f");
        __classPrivateFieldSet(this, _SelectManager_intersection, null, "f");
        __classPrivateFieldSet(this, _SelectManager_node, null, "f");
        __classPrivateFieldGet(this, _SelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_OFF, {
            viewportId: this.viewport.id,
            node,
            event,
            manager: this
        });
    }
}
exports.SelectManager = SelectManager;
_SelectManager_eventEngine = new WeakMap(), _SelectManager_deselectOnEmpty = new WeakMap(), _SelectManager_effectMaterialToken = new WeakMap(), _SelectManager_filter = new WeakMap(), _SelectManager_intersection = new WeakMap(), _SelectManager_node = new WeakMap();
//# sourceMappingURL=SelectManager.js.map