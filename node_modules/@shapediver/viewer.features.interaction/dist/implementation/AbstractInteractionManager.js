"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _AbstractInteractionManager_dragConstraintUtils, _AbstractInteractionManager_effectMaterial, _AbstractInteractionManager_interactionEffectUtils, _AbstractInteractionManager_viewport;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractInteractionManager = void 0;
const tsyringe_1 = require("tsyringe");
const DragConstraintUtils_1 = require("./utils/DragConstraintUtils");
const InteractionEffectUtils_1 = require("./utils/InteractionEffectUtils");
class AbstractInteractionManager {
    constructor() {
        // #region Properties (5)
        _AbstractInteractionManager_dragConstraintUtils.set(this, tsyringe_1.container.resolve(DragConstraintUtils_1.DragConstraintUtils));
        _AbstractInteractionManager_effectMaterial.set(this, void 0);
        _AbstractInteractionManager_interactionEffectUtils.set(this, tsyringe_1.container.resolve(InteractionEffectUtils_1.InteractionEffectUtils));
        _AbstractInteractionManager_viewport.set(this, void 0);
        // #endregion Public Abstract Methods (3)
    }
    // #endregion Properties (5)
    // #region Public Accessors (8)
    get dragConstraintUtils() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_dragConstraintUtils, "f");
    }
    set dragConstraintUtils(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_dragConstraintUtils, value, "f");
    }
    get effectMaterial() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_effectMaterial, "f");
    }
    set effectMaterial(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_effectMaterial, value, "f");
    }
    get interactionEffectUtils() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_interactionEffectUtils, "f");
    }
    set interactionEffectUtils(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_interactionEffectUtils, value, "f");
    }
    get viewport() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f");
    }
    set viewport(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_viewport, value, "f");
    }
}
exports.AbstractInteractionManager = AbstractInteractionManager;
_AbstractInteractionManager_dragConstraintUtils = new WeakMap(), _AbstractInteractionManager_effectMaterial = new WeakMap(), _AbstractInteractionManager_interactionEffectUtils = new WeakMap(), _AbstractInteractionManager_viewport = new WeakMap();
//# sourceMappingURL=AbstractInteractionManager.js.map