import { SdtfGeometryArcType, SdtfGeometryBoundingBoxType, SdtfGeometryBoxType, SdtfGeometryCircleType, SdtfGeometryComplexType, SdtfGeometryConeType, SdtfGeometryCylinderType, SdtfGeometryEllipseType, SdtfGeometryInterval2Type, SdtfGeometryIntervalType, SdtfGeometryLineType, SdtfGeometryMatrixType, SdtfGeometryPlaneType, SdtfGeometryPoint2d, SdtfGeometryPoint3d, SdtfGeometryPoint4d, SdtfGeometryPointType, SdtfGeometryPolylineType, SdtfGeometryRayType, SdtfGeometryRectangleType, SdtfGeometrySphereType, SdtfGeometryTorusType, SdtfGeometryTransformType, SdtfGeometryVector2d, SdtfGeometryVector3d, SdtfGeometryVectorType } from "./ISdtfGeometryTypes";
export declare class SdtfGeometryTypeGuard {
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */
    static assertArc(value: unknown): asserts value is SdtfGeometryArcType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */
    static isArc(value: unknown): value is SdtfGeometryArcType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */
    static assertBoundingBox(value: unknown): asserts value is SdtfGeometryBoundingBoxType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */
    static isBoundingBox(value: unknown): value is SdtfGeometryBoundingBoxType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */
    static assertBox(value: unknown): asserts value is SdtfGeometryBoxType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */
    static isBox(value: unknown): value is SdtfGeometryBoxType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */
    static assertCircle(value: unknown): asserts value is SdtfGeometryCircleType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */
    static isCircle(value: unknown): value is SdtfGeometryCircleType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */
    static assertComplex(value: unknown): asserts value is SdtfGeometryComplexType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */
    static isComplex(value: unknown): value is SdtfGeometryComplexType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */
    static assertCone(value: unknown): asserts value is SdtfGeometryConeType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */
    static isCone(value: unknown): value is SdtfGeometryConeType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */
    static assertCylinder(value: unknown): asserts value is SdtfGeometryCylinderType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */
    static isCylinder(value: unknown): value is SdtfGeometryCylinderType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */
    static assertEllipse(value: unknown): asserts value is SdtfGeometryEllipseType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */
    static isEllipse(value: unknown): value is SdtfGeometryEllipseType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */
    static assertInterval(value: unknown): asserts value is SdtfGeometryIntervalType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */
    static isInterval(value: unknown): value is SdtfGeometryIntervalType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */
    static assertInterval2(value: unknown): asserts value is SdtfGeometryInterval2Type;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */
    static isInterval2(value: unknown): value is SdtfGeometryInterval2Type;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */
    static assertLine(value: unknown): asserts value is SdtfGeometryLineType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */
    static isLine(value: unknown): value is SdtfGeometryLineType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */
    static assertMatrix(value: unknown): asserts value is SdtfGeometryMatrixType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */
    static isMatrix(value: unknown): value is SdtfGeometryMatrixType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */
    static assertPlane(value: unknown): asserts value is SdtfGeometryPlaneType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */
    static isPlane(value: unknown): value is SdtfGeometryPlaneType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint(value: unknown): asserts value is SdtfGeometryPointType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2, 3 or 4 elements. */
    static isPoint(value: unknown): value is SdtfGeometryPointType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint2d(value: unknown): asserts value is SdtfGeometryPoint2d;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2 elements. */
    static isPoint2d(value: unknown): value is SdtfGeometryPoint2d;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint3d(value: unknown): asserts value is SdtfGeometryPoint3d;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 3 elements. */
    static isPoint3d(value: unknown): value is SdtfGeometryPoint3d;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint4d(value: unknown): asserts value is SdtfGeometryPoint4d;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 4 elements. */
    static isPoint4d(value: unknown): value is SdtfGeometryPoint4d;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */
    static assertPolyline(value: unknown): asserts value is SdtfGeometryPolylineType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */
    static isPolyline(value: unknown): value is SdtfGeometryPolylineType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */
    static assertRay(value: unknown): asserts value is SdtfGeometryRayType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */
    static isRay(value: unknown): value is SdtfGeometryRayType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */
    static assertRectangle(value: unknown): asserts value is SdtfGeometryRectangleType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */
    static isRectangle(value: unknown): value is SdtfGeometryRectangleType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */
    static assertSphere(value: unknown): asserts value is SdtfGeometrySphereType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */
    static isSphere(value: unknown): value is SdtfGeometrySphereType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */
    static assertTorus(value: unknown): asserts value is SdtfGeometryTorusType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */
    static isTorus(value: unknown): value is SdtfGeometryTorusType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */
    static assertTransform(value: unknown): asserts value is SdtfGeometryTransformType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */
    static isTransform(value: unknown): value is SdtfGeometryTransformType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector(value: unknown): asserts value is SdtfGeometryVectorType;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2 or 3 elements. */
    static isVector(value: unknown): value is SdtfGeometryVectorType;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector2d(value: unknown): asserts value is SdtfGeometryVector2d;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2 elements. */
    private static isVector2d;
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector3d(value: unknown): asserts value is SdtfGeometryVector3d;
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 3 elements. */
    private static isVector3d;
}
//# sourceMappingURL=SdtfGeometryTypeGuard.d.ts.map