"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfGeometryTypeGuard = void 0;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
class SdtfGeometryTypeGuard {
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */
    static assertArc(value) {
        if (!this.isArc(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry arc type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */
    static isArc(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            typeof value.radius === "number" &&
            typeof value.angle === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */
    static assertBoundingBox(value) {
        if (!this.isBoundingBox(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry bounding box type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */
    static isBoundingBox(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPoint3d(value.min) &&
            this.isPoint3d(value.max);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */
    static assertBox(value) {
        if (!this.isBox(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry box type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */
    static isBox(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            Array.isArray(value.extents) &&
            value.extents.length === 3 &&
            value.extents.every(e => (0, sdk_sdtf_core_1.isNumberArray)(e) && e.length === 2);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */
    static assertCircle(value) {
        if (!this.isCircle(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry circle type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */
    static isCircle(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            typeof value.radius === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */
    static assertComplex(value) {
        if (!this.isComplex(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry complex type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */
    static isComplex(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */
    static assertCone(value) {
        if (!this.isCone(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry cone type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */
    static isCone(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            typeof value.radius === "number" &&
            typeof value.height === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */
    static assertCylinder(value) {
        if (!this.isCylinder(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry cylinder type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */
    static isCylinder(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isCircle(value.baseCircle) &&
            typeof value.height === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */
    static assertEllipse(value) {
        if (!this.isEllipse(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry ellipse type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */
    static isEllipse(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            typeof value.r1 === "number" &&
            typeof value.r2 === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */
    static assertInterval(value) {
        if (!this.isInterval(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry interval type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */
    static isInterval(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */
    static assertInterval2(value) {
        if (!this.isInterval2(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry interval2 type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */
    static isInterval2(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isInterval(value.u) &&
            this.isInterval(value.v);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */
    static assertLine(value) {
        if (!this.isLine(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry line type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */
    static isLine(value) {
        return Array.isArray(value) &&
            value.length === 2 &&
            this.isPoint3d(value[0]) &&
            this.isPoint3d(value[1]);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */
    static assertMatrix(value) {
        if (!this.isMatrix(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry matrix type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */
    static isMatrix(value) {
        if (!Array.isArray(value))
            return false;
        // All sub-arrays must have the same length with numeric content
        const nItems = value[0].length;
        return value.every(v => (0, sdk_sdtf_core_1.isNumberArray)(v) && v.length === nItems);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */
    static assertPlane(value) {
        if (!this.isPlane(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry plane type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */
    static isPlane(value) {
        return Array.isArray(value) &&
            value.length === 3 &&
            this.isPoint3d(value[0]) &&
            this.isVector3d(value[1]) &&
            this.isVector3d(value[2]);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint(value) {
        if (!this.isPoint(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry point type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2, 3 or 4 elements. */
    static isPoint(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && (value.length === 2 || value.length === 3 || value.length === 4);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint2d(value) {
        if (!this.isPoint2d(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry point type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2 elements. */
    static isPoint2d(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint3d(value) {
        if (!this.isPoint3d(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry point type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 3 elements. */
    static isPoint3d(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 3;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */
    static assertPoint4d(value) {
        if (!this.isPoint4d(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry point type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 4 elements. */
    static isPoint4d(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 4;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */
    static assertPolyline(value) {
        if (!this.isPolyline(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry polyline type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */
    static isPolyline(value) {
        return Array.isArray(value) && value.every(v => this.isPoint3d(v));
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */
    static assertRay(value) {
        if (!this.isRay(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry ray type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */
    static isRay(value) {
        return Array.isArray(value) &&
            value.length === 2 &&
            this.isPoint3d(value[0]) &&
            this.isVector3d(value[1]);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */
    static assertRectangle(value) {
        if (!this.isRectangle(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry rectangle type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */
    static isRectangle(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            this.isInterval(value.x) &&
            this.isInterval(value.y);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */
    static assertSphere(value) {
        if (!this.isSphere(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry sphere type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */
    static isSphere(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPoint3d(value.center) &&
            typeof value.radius === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */
    static assertTorus(value) {
        if (!this.isTorus(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry torus type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */
    static isTorus(value) {
        return (0, sdk_sdtf_core_1.isDataObject)(value) &&
            this.isPlane(value.plane) &&
            typeof value.majorRadius === "number" &&
            typeof value.minorRadius === "number";
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */
    static assertTransform(value) {
        if (!this.isTransform(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry transform type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */
    static isTransform(value) {
        return Array.isArray(value) && value.length === 4 && value.every(v => (0, sdk_sdtf_core_1.isNumberArray)(v) && v.length === 4);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector(value) {
        if (!this.isVector(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry vector type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2 or 3 elements. */
    static isVector(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && (value.length === 2 || value.length === 3);
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector2d(value) {
        if (!this.isVector2d(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry vector type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2 elements. */
    static isVector2d(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;
    }
    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */
    static assertVector3d(value) {
        if (!this.isVector3d(value))
            throw new sdk_sdtf_core_1.SdtfError("Assertion error: Value is not a geometry vector type.");
    }
    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 3 elements. */
    static isVector3d(value) {
        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 3;
    }
}
exports.SdtfGeometryTypeGuard = SdtfGeometryTypeGuard;
//# sourceMappingURL=SdtfGeometryTypeGuard.js.map