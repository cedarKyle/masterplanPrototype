import Head from "next/head";
import styles from "../styles/Home.module.scss";
import { useEffect, useState } from "react";
import { addListener, createViewport, EVENTTYPE } from "@shapediver/viewer";
import SdSession from "../src/components/SdSession";
import SdSessionInputs from "../src/components/SdSessionInputs";
import OutputsTable from "../src/components/OutputsTable";
import { formatNumberToDollars } from "../src/components/utils";
import { CedarLogo } from "../src/components/Logo";

interface PriceSummary {
    sumProfit: number;
    sumConstructionCost: number;
    sumSalePrice: number
}
export default function Home() {
    const sdvUrl = "https://sdeuc1.eu-central-1.shapediver.com";
    const albertLaneTicket = "116032b935e396f231268dcd074c49fd3170ca6b7362e41dbe5871a4bebe3fc15166a313d1dbecc8a5a74f941cb78e868a08c6656422f5daa5f101a16b770e27014a65fe3f9ebfd69f60eecbc1b0934e161312afb819374c442fe880debd88807b53bf47416ed7-4da524edbbbec467fbb94f1753351058";
    
    const [ticket, setTicket] = useState(albertLaneTicket);
    const [modelViewUrl, setModelViewUrl] = useState(sdvUrl);

    const [sessionUpdated, setSessionUpdated] = useState(0);

    const [constructionCost, setConstructionCost] = useState(250);
    const [salePrice, setSalePrice] = useState(600);

    const [priceData, setPriceData] = useState<PriceSummary>({ sumProfit: null, sumConstructionCost: null, sumSalePrice: null });

    const loadShapediverViewport = async () => {
        const viewport = await createViewport({
            canvas: document.getElementById("canvas") as HTMLCanvasElement,
            id: "myViewport",
        });
    };

    useEffect(() => {
        loadShapediverViewport();
    }, []);

    // Quick hack to force an update whenever the session re-computes due to an input parameter change:
    useEffect(() => {
        // create a listener that is called whenever the session has been customized
        addListener(EVENTTYPE.SESSION.SESSION_CUSTOMIZED, (e) => {
            console.log("Session Customized: ", e);
            setSessionUpdated(sessionUpdated + 1);
        });
    }, [sessionUpdated])

    const handlePriceSummaryUpdate = (data: PriceSummary) => {
        // 
        if ((priceData.sumProfit !== data.sumProfit)) {
            window.console.log('pricing data:', data);
            setPriceData(data);
        }
        
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>CedarPro</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={styles.header}>
                <CedarLogo/>
                <div className={styles.cedarTitle}>cedar</div>
            </div>
            <div className={styles.header}>
                <div className={styles.subtitle}>
                    7605 Albert Rd, Austin, TX, 78745
                </div>
            </div>
            <SdSession ticket={ticket} modelViewUrl={modelViewUrl}>
                <div className={styles.gridLayout}>
                    <div className={styles.canvasContainer}>
                        <canvas className={styles.canvas} id="canvas"></canvas>
                    </div>
                    <div className={styles.inputsContainer}>
                        {/* 
                            TODO: Additional components to pull in from the example if we want to enable model interaction
                            <SdSessionInteractionData level={interactionLevel} interactionTypes={interactionTypes}/>
                            <SdSessionParameterBridge/>
                            <SdSessionParameterPanel/> 
                        */}
                        <SdSessionInputs />
                    </div>
                </div>
                <div className={styles.tableContainer}>
                    <div className={styles.tableContent}>
                        <div className={styles.tableHeader}>
                            <div className={styles.tableHeaderSection}>
                                <div className={styles.subtitle}>Phase Breakdown</div>
                                <div className={styles.line}/>

                                <div className={styles.inputRow}>
                                    <label>Construction cost / sqft.</label>
                                    <div className={styles.inputBox}>
                                        <span className={styles.prefix}>$</span>
                                        <input
                                            type="text"
                                            value={constructionCost}
                                            onChange={(e) =>
                                                setConstructionCost(+e.target.value)
                                            }
                                        />
                                    </div>
                                </div>
                                <div className={styles.inputRow}>
                                    <label>Sale price / sqft.</label>
                                    <div className={styles.inputBox}>
                                        <span className={styles.prefix}>$</span>
                                        <input
                                            type="text"
                                            value={salePrice}
                                            onChange={(e) =>
                                                setSalePrice(+e.target.value)
                                            }
                                        />
                                    </div>
                                </div>
                            </div>

                            <div className={styles.tableHeaderSection}>
                                <div className={styles.subtitle}>
                                    Investment Summary
                                </div>
                                <div className={styles.line}/>
                                <div className={styles.dataRow}>
                                    <div className={styles.propDescription}>Total Construction Cost: </div>
                                    <div className={styles.value}>{formatNumberToDollars(priceData.sumConstructionCost)} </div>
                                </div>
                                <div className={styles.dataRow}>
                                    <div className={styles.propDescription}>Total Sale Price: </div>
                                    <div className={styles.value}>{formatNumberToDollars(priceData.sumSalePrice)} </div>
                                </div>
                                <div className={styles.dataRow}>
                                    <div className={styles.propDescription}>Total Net Profit: </div>
                                    <div className={styles.value}>{formatNumberToDollars(priceData.sumProfit)} </div>
                                </div>
                            </div>
                        </div>

                        <OutputsTable
                            constructionCost={constructionCost}
                            salePrice={salePrice}
                            onDataUpdate={handlePriceSummaryUpdate}
                        />
                    </div>
                </div>
            </SdSession>
        </div>
    );
}
